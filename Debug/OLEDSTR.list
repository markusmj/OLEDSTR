
OLEDSTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001554  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800626c  0800626c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800626c  0800626c  0001626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006274  08006274  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800627c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000088  08006304  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08006304  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc55  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f63  00000000  00000000  0002fd0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  00031c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  00032ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f9f2  00000000  00000000  00033818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad6c  00000000  00000000  0005320a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1c17  00000000  00000000  0005df76  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011fb8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc4  00000000  00000000  0011fc08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d00 	.word	0x08004d00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08004d00 	.word	0x08004d00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 ffcd 	bl	8001514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f9d1 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 fb1d 	bl	8000bbc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000582:	f000 fa37 	bl	80009f4 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000586:	f000 fa99 	bl	8000abc <MX_TIM2_Init>
  MX_I2C1_Init();
 800058a:	f000 fa69 	bl	8000a60 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800058e:	2100      	movs	r1, #0
 8000590:	4872      	ldr	r0, [pc, #456]	; (800075c <main+0x1ec>)
 8000592:	f003 f933 	bl	80037fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // start the PWM counters
 8000596:	2104      	movs	r1, #4
 8000598:	4870      	ldr	r0, [pc, #448]	; (800075c <main+0x1ec>)
 800059a:	f003 f92f 	bl	80037fc <HAL_TIM_PWM_Start>
  HAL_Delay(10);
 800059e:	200a      	movs	r0, #10
 80005a0:	f001 f82a 	bl	80015f8 <HAL_Delay>
  SSD1306_Init();  // initialise Screen
 80005a4:	f000 fb64 	bl	8000c70 <SSD1306_Init>

  // Start Can Bus

  // Defining CAN 1 Filter Banks.

    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a8:	4b6d      	ldr	r3, [pc, #436]	; (8000760 <main+0x1f0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005ae:	4b6c      	ldr	r3, [pc, #432]	; (8000760 <main+0x1f0>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdLow = 0x0000;
 80005b4:	4b6a      	ldr	r3, [pc, #424]	; (8000760 <main+0x1f0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005ba:	4b69      	ldr	r3, [pc, #420]	; (8000760 <main+0x1f0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005c0:	4b67      	ldr	r3, [pc, #412]	; (8000760 <main+0x1f0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80005c6:	4b66      	ldr	r3, [pc, #408]	; (8000760 <main+0x1f0>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 80005cc:	4b64      	ldr	r3, [pc, #400]	; (8000760 <main+0x1f0>)
 80005ce:	220e      	movs	r2, #14
 80005d0:	625a      	str	r2, [r3, #36]	; 0x24

    // BMS Voltage
    // Can Message (HPF019 ID=0xB Bytes 0-3) 0x7B6, High to Low, Bytes 0-1

    sFilterConfig.FilterBank = 0;
 80005d2:	4b63      	ldr	r3, [pc, #396]	; (8000760 <main+0x1f0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterIdHigh = 0x07B6 << 5;
 80005d8:	4b61      	ldr	r3, [pc, #388]	; (8000760 <main+0x1f0>)
 80005da:	f24f 62c0 	movw	r2, #63168	; 0xf6c0
 80005de:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterMaskIdHigh = 0x07B6 << 5;
 80005e0:	4b5f      	ldr	r3, [pc, #380]	; (8000760 <main+0x1f0>)
 80005e2:	f24f 62c0 	movw	r2, #63168	; 0xf6c0
 80005e6:	609a      	str	r2, [r3, #8]

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005e8:	495d      	ldr	r1, [pc, #372]	; (8000760 <main+0x1f0>)
 80005ea:	485e      	ldr	r0, [pc, #376]	; (8000764 <main+0x1f4>)
 80005ec:	f001 f922 	bl	8001834 <HAL_CAN_ConfigFilter>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <main+0x8a>
    {
      //Filter configuration Error
      Error_Handler();
 80005f6:	f000 fb33 	bl	8000c60 <Error_Handler>
    }

    // Low Voltage
    // Can Message 0x527, High to Low, Byte 1

    sFilterConfig.FilterBank = 1;
 80005fa:	4b59      	ldr	r3, [pc, #356]	; (8000760 <main+0x1f0>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterIdHigh = 0x0527 << 5;
 8000600:	4b57      	ldr	r3, [pc, #348]	; (8000760 <main+0x1f0>)
 8000602:	f24a 42e0 	movw	r2, #42208	; 0xa4e0
 8000606:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterMaskIdHigh = 0x0527 << 5;
 8000608:	4b55      	ldr	r3, [pc, #340]	; (8000760 <main+0x1f0>)
 800060a:	f24a 42e0 	movw	r2, #42208	; 0xa4e0
 800060e:	609a      	str	r2, [r3, #8]

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000610:	4953      	ldr	r1, [pc, #332]	; (8000760 <main+0x1f0>)
 8000612:	4854      	ldr	r0, [pc, #336]	; (8000764 <main+0x1f4>)
 8000614:	f001 f90e 	bl	8001834 <HAL_CAN_ConfigFilter>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <main+0xb2>
        {
          //Filter configuration Error
          Error_Handler();
 800061e:	f000 fb1f 	bl	8000c60 <Error_Handler>
        }

    // Drive Mode & Max Torque
    // Can Message 0x7C8 Byte 1=Max Torque Byte 0=driveModeFuture

    sFilterConfig.FilterBank = 1;
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <main+0x1f0>)
 8000624:	2201      	movs	r2, #1
 8000626:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterIdHigh = 0x07C8 << 5;
 8000628:	4b4d      	ldr	r3, [pc, #308]	; (8000760 <main+0x1f0>)
 800062a:	f44f 4279 	mov.w	r2, #63744	; 0xf900
 800062e:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterMaskIdHigh = 0x07C8 << 5;
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <main+0x1f0>)
 8000632:	f44f 4279 	mov.w	r2, #63744	; 0xf900
 8000636:	609a      	str	r2, [r3, #8]

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000638:	4949      	ldr	r1, [pc, #292]	; (8000760 <main+0x1f0>)
 800063a:	484a      	ldr	r0, [pc, #296]	; (8000764 <main+0x1f4>)
 800063c:	f001 f8fa 	bl	8001834 <HAL_CAN_ConfigFilter>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <main+0xda>
        {
          //Filter configuration Error
          Error_Handler();
 8000646:	f000 fb0b 	bl	8000c60 <Error_Handler>
        }


  // Start Can 1

    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800064a:	4846      	ldr	r0, [pc, #280]	; (8000764 <main+0x1f4>)
 800064c:	f001 f9d2 	bl	80019f4 <HAL_CAN_Start>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <main+0xea>
    {
      // Start Error
      Error_Handler();
 8000656:	f000 fb03 	bl	8000c60 <Error_Handler>
    }

    scrtimer=HAL_GetTick();
 800065a:	f000 ffc1 	bl	80015e0 <HAL_GetTick>
 800065e:	4602      	mov	r2, r0
 8000660:	4b41      	ldr	r3, [pc, #260]	; (8000768 <main+0x1f8>)
 8000662:	601a      	str	r2, [r3, #0]

    // Write static stuff to screen only once
                  SSD1306_Clear();
 8000664:	f000 fd29 	bl	80010ba <SSD1306_Clear>
    			  SSD1306_GotoXY (5,0);
 8000668:	2100      	movs	r1, #0
 800066a:	2005      	movs	r0, #5
 800066c:	f000 fc6a 	bl	8000f44 <SSD1306_GotoXY>
   	  		      SSD1306_Puts ("Kerttu", &Font_7x10, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	493e      	ldr	r1, [pc, #248]	; (800076c <main+0x1fc>)
 8000674:	483e      	ldr	r0, [pc, #248]	; (8000770 <main+0x200>)
 8000676:	f000 fcfb 	bl	8001070 <SSD1306_Puts>
  	  		      SSD1306_GotoXY (65,0);
 800067a:	2100      	movs	r1, #0
 800067c:	2041      	movs	r0, #65	; 0x41
 800067e:	f000 fc61 	bl	8000f44 <SSD1306_GotoXY>
   	  		      SSD1306_Puts ("LV Batt.", &Font_7x10, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	4939      	ldr	r1, [pc, #228]	; (800076c <main+0x1fc>)
 8000686:	483b      	ldr	r0, [pc, #236]	; (8000774 <main+0x204>)
 8000688:	f000 fcf2 	bl	8001070 <SSD1306_Puts>
   	  		      SSD1306_GotoXY (10,33);
 800068c:	2121      	movs	r1, #33	; 0x21
 800068e:	200a      	movs	r0, #10
 8000690:	f000 fc58 	bl	8000f44 <SSD1306_GotoXY>
   	  		      SSD1306_Puts ("Mode", &Font_7x10, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	4935      	ldr	r1, [pc, #212]	; (800076c <main+0x1fc>)
 8000698:	4837      	ldr	r0, [pc, #220]	; (8000778 <main+0x208>)
 800069a:	f000 fce9 	bl	8001070 <SSD1306_Puts>
   	  		      SSD1306_GotoXY (65,33);
 800069e:	2121      	movs	r1, #33	; 0x21
 80006a0:	2041      	movs	r0, #65	; 0x41
 80006a2:	f000 fc4f 	bl	8000f44 <SSD1306_GotoXY>
   	  		      SSD1306_Puts ("Torque", &Font_7x10, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	4930      	ldr	r1, [pc, #192]	; (800076c <main+0x1fc>)
 80006aa:	4834      	ldr	r0, [pc, #208]	; (800077c <main+0x20c>)
 80006ac:	f000 fce0 	bl	8001070 <SSD1306_Puts>
   	  		      SSD1306_UpdateScreen();
 80006b0:	f000 fba2 	bl	8000df8 <SSD1306_UpdateScreen>
  while (1)
  {


	   // Read Steering Angle sensor
	      PWMValue = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80006b4:	2100      	movs	r1, #0
 80006b6:	4829      	ldr	r0, [pc, #164]	; (800075c <main+0x1ec>)
 80006b8:	f003 faf0 	bl	8003c9c <HAL_TIM_ReadCapturedValue>
 80006bc:	4602      	mov	r2, r0
 80006be:	4b30      	ldr	r3, [pc, #192]	; (8000780 <main+0x210>)
 80006c0:	601a      	str	r2, [r3, #0]

	  	  if (PWMValue != 0)
 80006c2:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <main+0x210>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d010      	beq.n	80006ec <main+0x17c>
	  	  {
	  		STRAngle = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2)*360/PWMValue;
 80006ca:	2104      	movs	r1, #4
 80006cc:	4823      	ldr	r0, [pc, #140]	; (800075c <main+0x1ec>)
 80006ce:	f003 fae5 	bl	8003c9c <HAL_TIM_ReadCapturedValue>
 80006d2:	4602      	mov	r2, r0
 80006d4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80006d8:	fb03 f202 	mul.w	r2, r3, r2
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <main+0x210>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <main+0x214>)
 80006e8:	801a      	strh	r2, [r3, #0]
 80006ea:	e002      	b.n	80006f2 <main+0x182>
	  	  }
	  	  else
	  	  {
	  		  STRAngle = 0;
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <main+0x214>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	801a      	strh	r2, [r3, #0]
	  	  }


	  	// Receive Can 1 message

	  		    if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 1)
 80006f2:	2100      	movs	r1, #0
 80006f4:	481b      	ldr	r0, [pc, #108]	; (8000764 <main+0x1f4>)
 80006f6:	f001 fbe3 	bl	8001ec0 <HAL_CAN_GetRxFifoFillLevel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d001      	beq.n	8000704 <main+0x194>
	  		      {
	  		        /* Reception Missing */
	  		        Error_Handler();
 8000700:	f000 faae 	bl	8000c60 <Error_Handler>
	  		      }

	  		      if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <main+0x218>)
 8000706:	4a21      	ldr	r2, [pc, #132]	; (800078c <main+0x21c>)
 8000708:	2100      	movs	r1, #0
 800070a:	4816      	ldr	r0, [pc, #88]	; (8000764 <main+0x1f4>)
 800070c:	f001 fac6 	bl	8001c9c <HAL_CAN_GetRxMessage>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <main+0x1aa>
	  		      {
	  		        /* Reception Error */
	  		        Error_Handler();
 8000716:	f000 faa3 	bl	8000c60 <Error_Handler>
	  		      }

	  		    switch ( RxHeader.StdId )
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <main+0x21c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f240 72b6 	movw	r2, #1974	; 0x7b6
 8000722:	4293      	cmp	r3, r2
 8000724:	d007      	beq.n	8000736 <main+0x1c6>
 8000726:	f5b3 6ff9 	cmp.w	r3, #1992	; 0x7c8
 800072a:	d035      	beq.n	8000798 <main+0x228>
 800072c:	f240 5227 	movw	r2, #1319	; 0x527
 8000730:	4293      	cmp	r3, r2
 8000732:	d00d      	beq.n	8000750 <main+0x1e0>
 8000734:	e039      	b.n	80007aa <main+0x23a>
	  		            {
	  		    			case 0x7B6 :  // BMS Voltage
	  		                    Kerttu=256*RxData[0]+RxData[1];
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <main+0x218>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b29b      	uxth	r3, r3
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <main+0x218>)
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	b29b      	uxth	r3, r3
 8000746:	4413      	add	r3, r2
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <main+0x220>)
 800074c:	801a      	strh	r2, [r3, #0]
	  		                    break;
 800074e:	e02c      	b.n	80007aa <main+0x23a>

	  		    			case 0x527 :  // Low Voltage Battery or is it 0x520???
	  		    				LVBatt=RxData[1];
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <main+0x218>)
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	b29a      	uxth	r2, r3
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <main+0x224>)
 8000758:	801a      	strh	r2, [r3, #0]
	  		    				break;
 800075a:	e026      	b.n	80007aa <main+0x23a>
 800075c:	20000558 	.word	0x20000558
 8000760:	200004c4 	.word	0x200004c4
 8000764:	20000598 	.word	0x20000598
 8000768:	200000ac 	.word	0x200000ac
 800076c:	20000000 	.word	0x20000000
 8000770:	08004d18 	.word	0x08004d18
 8000774:	08004d20 	.word	0x08004d20
 8000778:	08004d2c 	.word	0x08004d2c
 800077c:	08004d34 	.word	0x08004d34
 8000780:	200000a4 	.word	0x200000a4
 8000784:	200000a8 	.word	0x200000a8
 8000788:	20000550 	.word	0x20000550
 800078c:	200005d8 	.word	0x200005d8
 8000790:	20000010 	.word	0x20000010
 8000794:	20000012 	.word	0x20000012

	  		    			case 0x07C8 :  // Byte 1=Max Torque Byte 0=driveModeFuture
	  		    				DriveMode=RxData[0];
 8000798:	4b4e      	ldr	r3, [pc, #312]	; (80008d4 <main+0x364>)
 800079a:	781a      	ldrb	r2, [r3, #0]
 800079c:	4b4e      	ldr	r3, [pc, #312]	; (80008d8 <main+0x368>)
 800079e:	701a      	strb	r2, [r3, #0]
	  		    				Turku=RxData[0];
 80007a0:	4b4c      	ldr	r3, [pc, #304]	; (80008d4 <main+0x364>)
 80007a2:	781a      	ldrb	r2, [r3, #0]
 80007a4:	4b4d      	ldr	r3, [pc, #308]	; (80008dc <main+0x36c>)
 80007a6:	701a      	strb	r2, [r3, #0]
	  		    				break;
 80007a8:	bf00      	nop

	  		      union {
	  		    	    uint16_t integer;
	  		      		unsigned char bytearray[2];
	  		      	} data;
	  		      	data.integer = STRAngle;
 80007aa:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <main+0x370>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	80bb      	strh	r3, [r7, #4]


	  		      // Can 1 Start the Transmission process
	  		        TxHeader.StdId = 69;
 80007b0:	4b4c      	ldr	r3, [pc, #304]	; (80008e4 <main+0x374>)
 80007b2:	2245      	movs	r2, #69	; 0x45
 80007b4:	601a      	str	r2, [r3, #0]
	  		        TxHeader.RTR = CAN_RTR_DATA;
 80007b6:	4b4b      	ldr	r3, [pc, #300]	; (80008e4 <main+0x374>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
	  		        TxHeader.IDE = CAN_ID_STD;
 80007bc:	4b49      	ldr	r3, [pc, #292]	; (80008e4 <main+0x374>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
	  		        TxHeader.DLC = 2;
 80007c2:	4b48      	ldr	r3, [pc, #288]	; (80008e4 <main+0x374>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	611a      	str	r2, [r3, #16]
	  		        TxHeader.TransmitGlobalTime = DISABLE;
 80007c8:	4b46      	ldr	r3, [pc, #280]	; (80008e4 <main+0x374>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	751a      	strb	r2, [r3, #20]
	  		        TxData[0] = data.bytearray[0];
 80007ce:	793a      	ldrb	r2, [r7, #4]
 80007d0:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <main+0x378>)
 80007d2:	701a      	strb	r2, [r3, #0]
	  		        TxData[1] = data.bytearray[1];
 80007d4:	797a      	ldrb	r2, [r7, #5]
 80007d6:	4b44      	ldr	r3, [pc, #272]	; (80008e8 <main+0x378>)
 80007d8:	705a      	strb	r2, [r3, #1]


	  		        if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80007da:	4b44      	ldr	r3, [pc, #272]	; (80008ec <main+0x37c>)
 80007dc:	4a42      	ldr	r2, [pc, #264]	; (80008e8 <main+0x378>)
 80007de:	4941      	ldr	r1, [pc, #260]	; (80008e4 <main+0x374>)
 80007e0:	4843      	ldr	r0, [pc, #268]	; (80008f0 <main+0x380>)
 80007e2:	f001 f94b 	bl	8001a7c <HAL_CAN_AddTxMessage>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <main+0x280>
	  		        {
	  		          /* Transmission request Error */
	  		          Error_Handler();
 80007ec:	f000 fa38 	bl	8000c60 <Error_Handler>
	  		        }

	  		        /* Wait transmission complete */
	  		          while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 80007f0:	bf00      	nop
 80007f2:	483f      	ldr	r0, [pc, #252]	; (80008f0 <main+0x380>)
 80007f4:	f001 fa1d 	bl	8001c32 <HAL_CAN_GetTxMailboxesFreeLevel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d1f9      	bne.n	80007f2 <main+0x282>

	   //Write to the screen


if (HAL_GetTick()-scrtimer > 100) {
 80007fe:	f000 feef 	bl	80015e0 <HAL_GetTick>
 8000802:	4602      	mov	r2, r0
 8000804:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <main+0x384>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	2b64      	cmp	r3, #100	; 0x64
 800080c:	d959      	bls.n	80008c2 <main+0x352>
	    SSD1306_GotoXY (5,12);
 800080e:	210c      	movs	r1, #12
 8000810:	2005      	movs	r0, #5
 8000812:	f000 fb97 	bl	8000f44 <SSD1306_GotoXY>
	    sprintf(txt, "%iv", Kerttu);
 8000816:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <main+0x388>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	4937      	ldr	r1, [pc, #220]	; (80008fc <main+0x38c>)
 800081e:	4838      	ldr	r0, [pc, #224]	; (8000900 <main+0x390>)
 8000820:	f003 fe68 	bl	80044f4 <siprintf>
	    SSD1306_Puts (txt, &Font_11x18, 1);
 8000824:	2201      	movs	r2, #1
 8000826:	4937      	ldr	r1, [pc, #220]	; (8000904 <main+0x394>)
 8000828:	4835      	ldr	r0, [pc, #212]	; (8000900 <main+0x390>)
 800082a:	f000 fc21 	bl	8001070 <SSD1306_Puts>
	    SSD1306_GotoXY (65,12);
 800082e:	210c      	movs	r1, #12
 8000830:	2041      	movs	r0, #65	; 0x41
 8000832:	f000 fb87 	bl	8000f44 <SSD1306_GotoXY>
	    sprintf(txt, "%u.%01uv", LVBatt/10, LVBatt%10);
 8000836:	4b34      	ldr	r3, [pc, #208]	; (8000908 <main+0x398>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	4a34      	ldr	r2, [pc, #208]	; (800090c <main+0x39c>)
 800083c:	fba2 2303 	umull	r2, r3, r2, r3
 8000840:	08db      	lsrs	r3, r3, #3
 8000842:	b29b      	uxth	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	4b30      	ldr	r3, [pc, #192]	; (8000908 <main+0x398>)
 8000848:	881a      	ldrh	r2, [r3, #0]
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <main+0x39c>)
 800084c:	fba3 1302 	umull	r1, r3, r3, r2
 8000850:	08d9      	lsrs	r1, r3, #3
 8000852:	460b      	mov	r3, r1
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	440b      	add	r3, r1
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	b29b      	uxth	r3, r3
 800085e:	4602      	mov	r2, r0
 8000860:	492b      	ldr	r1, [pc, #172]	; (8000910 <main+0x3a0>)
 8000862:	4827      	ldr	r0, [pc, #156]	; (8000900 <main+0x390>)
 8000864:	f003 fe46 	bl	80044f4 <siprintf>
	    SSD1306_Puts (txt, &Font_11x18, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	4926      	ldr	r1, [pc, #152]	; (8000904 <main+0x394>)
 800086c:	4824      	ldr	r0, [pc, #144]	; (8000900 <main+0x390>)
 800086e:	f000 fbff 	bl	8001070 <SSD1306_Puts>
	    SSD1306_GotoXY (12,45);
 8000872:	212d      	movs	r1, #45	; 0x2d
 8000874:	200c      	movs	r0, #12
 8000876:	f000 fb65 	bl	8000f44 <SSD1306_GotoXY>
	    sprintf(txt, "#%i", DriveMode);
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <main+0x368>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	4924      	ldr	r1, [pc, #144]	; (8000914 <main+0x3a4>)
 8000882:	481f      	ldr	r0, [pc, #124]	; (8000900 <main+0x390>)
 8000884:	f003 fe36 	bl	80044f4 <siprintf>
	    SSD1306_Puts (txt, &Font_11x18, 1);
 8000888:	2201      	movs	r2, #1
 800088a:	491e      	ldr	r1, [pc, #120]	; (8000904 <main+0x394>)
 800088c:	481c      	ldr	r0, [pc, #112]	; (8000900 <main+0x390>)
 800088e:	f000 fbef 	bl	8001070 <SSD1306_Puts>
	    SSD1306_GotoXY (65,45);
 8000892:	212d      	movs	r1, #45	; 0x2d
 8000894:	2041      	movs	r0, #65	; 0x41
 8000896:	f000 fb55 	bl	8000f44 <SSD1306_GotoXY>
	    sprintf(txt, "%iNm", Turku);
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <main+0x36c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	491d      	ldr	r1, [pc, #116]	; (8000918 <main+0x3a8>)
 80008a2:	4817      	ldr	r0, [pc, #92]	; (8000900 <main+0x390>)
 80008a4:	f003 fe26 	bl	80044f4 <siprintf>
	    SSD1306_Puts (txt, &Font_11x18, 1);
 80008a8:	2201      	movs	r2, #1
 80008aa:	4916      	ldr	r1, [pc, #88]	; (8000904 <main+0x394>)
 80008ac:	4814      	ldr	r0, [pc, #80]	; (8000900 <main+0x390>)
 80008ae:	f000 fbdf 	bl	8001070 <SSD1306_Puts>
	    SSD1306_UpdateScreen();
 80008b2:	f000 faa1 	bl	8000df8 <SSD1306_UpdateScreen>
        scrtimer=HAL_GetTick();
 80008b6:	f000 fe93 	bl	80015e0 <HAL_GetTick>
 80008ba:	4602      	mov	r2, r0
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <main+0x384>)
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	e002      	b.n	80008c8 <main+0x358>
} else { HAL_Delay(4);}
 80008c2:	2004      	movs	r0, #4
 80008c4:	f000 fe98 	bl	80015f8 <HAL_Delay>

	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80008c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008cc:	4813      	ldr	r0, [pc, #76]	; (800091c <main+0x3ac>)
 80008ce:	f001 fde4 	bl	800249a <HAL_GPIO_TogglePin>
  {
 80008d2:	e6ef      	b.n	80006b4 <main+0x144>
 80008d4:	20000550 	.word	0x20000550
 80008d8:	20000014 	.word	0x20000014
 80008dc:	20000015 	.word	0x20000015
 80008e0:	200000a8 	.word	0x200000a8
 80008e4:	200005c0 	.word	0x200005c0
 80008e8:	20000548 	.word	0x20000548
 80008ec:	2000054c 	.word	0x2000054c
 80008f0:	20000598 	.word	0x20000598
 80008f4:	200000ac 	.word	0x200000ac
 80008f8:	20000010 	.word	0x20000010
 80008fc:	08004d3c 	.word	0x08004d3c
 8000900:	200004ec 	.word	0x200004ec
 8000904:	20000008 	.word	0x20000008
 8000908:	20000012 	.word	0x20000012
 800090c:	cccccccd 	.word	0xcccccccd
 8000910:	08004d40 	.word	0x08004d40
 8000914:	08004d4c 	.word	0x08004d4c
 8000918:	08004d50 	.word	0x08004d50
 800091c:	40020800 	.word	0x40020800

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b094      	sub	sp, #80	; 0x50
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	2230      	movs	r2, #48	; 0x30
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f003 fdd8 	bl	80044e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	4b28      	ldr	r3, [pc, #160]	; (80009ec <SystemClock_Config+0xcc>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a27      	ldr	r2, [pc, #156]	; (80009ec <SystemClock_Config+0xcc>)
 800094e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000952:	6413      	str	r3, [r2, #64]	; 0x40
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <SystemClock_Config+0xcc>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <SystemClock_Config+0xd0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <SystemClock_Config+0xd0>)
 800096a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <SystemClock_Config+0xd0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000984:	2310      	movs	r3, #16
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000988:	2302      	movs	r3, #2
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800098c:	2300      	movs	r3, #0
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000990:	2308      	movs	r3, #8
 8000992:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000994:	23a8      	movs	r3, #168	; 0xa8
 8000996:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000998:	2302      	movs	r3, #2
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800099c:	2304      	movs	r3, #4
 800099e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 0320 	add.w	r3, r7, #32
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 fb01 	bl	8002fac <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b0:	f000 f956 	bl	8000c60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	230f      	movs	r3, #15
 80009b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b8:	2302      	movs	r3, #2
 80009ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2105      	movs	r1, #5
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 fd5a 	bl	800348c <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009de:	f000 f93f 	bl	8000c60 <Error_Handler>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3750      	adds	r7, #80	; 0x50
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40007000 	.word	0x40007000

080009f4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_CAN1_Init+0x64>)
 80009fa:	4a18      	ldr	r2, [pc, #96]	; (8000a5c <MX_CAN1_Init+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_CAN1_Init+0x64>)
 8000a00:	2203      	movs	r2, #3
 8000a02:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_CAN1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_CAN1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_CAN1_Init+0x64>)
 8000a12:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000a16:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_CAN1_Init+0x64>)
 8000a1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a1e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <MX_CAN1_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_CAN1_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_CAN1_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_CAN1_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_CAN1_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_CAN1_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_CAN1_Init+0x64>)
 8000a46:	f000 fdf9 	bl	800163c <HAL_CAN_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a50:	f000 f906 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000598 	.word	0x20000598
 8000a5c:	40006400 	.word	0x40006400

08000a60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

    // For better speed to update the screen
	// hi2c1.Init.ClockSpeed = 1600000;

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MX_I2C1_Init+0x54>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 1600000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_I2C1_Init+0x58>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a9e:	f001 fd17 	bl	80024d0 <HAL_I2C_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 f8da 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200004f4 	.word	0x200004f4
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	00186a00 	.word	0x00186a00

08000abc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	; 0x30
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae8:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <MX_TIM2_Init+0xfc>)
 8000aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120;
 8000af0:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <MX_TIM2_Init+0xfc>)
 8000af2:	2278      	movs	r2, #120	; 0x78
 8000af4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <MX_TIM2_Init+0xfc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000afc:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <MX_TIM2_Init+0xfc>)
 8000afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <MX_TIM2_Init+0xfc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <MX_TIM2_Init+0xfc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b10:	4829      	ldr	r0, [pc, #164]	; (8000bb8 <MX_TIM2_Init+0xfc>)
 8000b12:	f002 feb1 	bl	8003878 <HAL_TIM_IC_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000b1c:	f000 f8a0 	bl	8000c60 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b20:	2304      	movs	r3, #4
 8000b22:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b24:	2350      	movs	r3, #80	; 0x50
 8000b26:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	481f      	ldr	r0, [pc, #124]	; (8000bb8 <MX_TIM2_Init+0xfc>)
 8000b3c:	f003 f86b 	bl	8003c16 <HAL_TIM_SlaveConfigSynchro>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b46:	f000 f88b 	bl	8000c60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4619      	mov	r1, r3
 8000b62:	4815      	ldr	r0, [pc, #84]	; (8000bb8 <MX_TIM2_Init+0xfc>)
 8000b64:	f002 ffbb 	bl	8003ade <HAL_TIM_IC_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b6e:	f000 f877 	bl	8000c60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b76:	2302      	movs	r3, #2
 8000b78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2204      	movs	r2, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <MX_TIM2_Init+0xfc>)
 8000b84:	f002 ffab 	bl	8003ade <HAL_TIM_IC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000b8e:	f000 f867 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <MX_TIM2_Init+0xfc>)
 8000ba0:	f003 fbe6 	bl	8004370 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000baa:	f000 f859 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	3730      	adds	r7, #48	; 0x30
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000558 	.word	0x20000558

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_GPIO_Init+0x9c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a1f      	ldr	r2, [pc, #124]	; (8000c58 <MX_GPIO_Init+0x9c>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_GPIO_Init+0x9c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_GPIO_Init+0x9c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <MX_GPIO_Init+0x9c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_GPIO_Init+0x9c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_GPIO_Init+0x9c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <MX_GPIO_Init+0x9c>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_GPIO_Init+0x9c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <MX_GPIO_Init+0xa0>)
 8000c2e:	f001 fc1b 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_GPIO_Init+0xa0>)
 8000c4c:	f001 fa72 	bl	8002134 <HAL_GPIO_Init>

}
 8000c50:	bf00      	nop
 8000c52:	3720      	adds	r7, #32
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020800 	.word	0x40020800

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c76:	f000 fa29 	bl	80010cc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000c7a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2178      	movs	r1, #120	; 0x78
 8000c82:	485b      	ldr	r0, [pc, #364]	; (8000df0 <SSD1306_Init+0x180>)
 8000c84:	f001 fe5a 	bl	800293c <HAL_I2C_IsDeviceReady>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e0a9      	b.n	8000de6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000c92:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000c96:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c98:	e002      	b.n	8000ca0 <SSD1306_Init+0x30>
		p--;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f9      	bne.n	8000c9a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000ca6:	22ae      	movs	r2, #174	; 0xae
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2078      	movs	r0, #120	; 0x78
 8000cac:	f000 fa6a 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000cb0:	2220      	movs	r2, #32
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2078      	movs	r0, #120	; 0x78
 8000cb6:	f000 fa65 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000cba:	2210      	movs	r2, #16
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2078      	movs	r0, #120	; 0x78
 8000cc0:	f000 fa60 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000cc4:	22b0      	movs	r2, #176	; 0xb0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2078      	movs	r0, #120	; 0x78
 8000cca:	f000 fa5b 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000cce:	22c8      	movs	r2, #200	; 0xc8
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2078      	movs	r0, #120	; 0x78
 8000cd4:	f000 fa56 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2078      	movs	r0, #120	; 0x78
 8000cde:	f000 fa51 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2078      	movs	r0, #120	; 0x78
 8000ce8:	f000 fa4c 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000cec:	2240      	movs	r2, #64	; 0x40
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2078      	movs	r0, #120	; 0x78
 8000cf2:	f000 fa47 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000cf6:	2281      	movs	r2, #129	; 0x81
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2078      	movs	r0, #120	; 0x78
 8000cfc:	f000 fa42 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000d00:	22ff      	movs	r2, #255	; 0xff
 8000d02:	2100      	movs	r1, #0
 8000d04:	2078      	movs	r0, #120	; 0x78
 8000d06:	f000 fa3d 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d0a:	22a1      	movs	r2, #161	; 0xa1
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2078      	movs	r0, #120	; 0x78
 8000d10:	f000 fa38 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000d14:	22a6      	movs	r2, #166	; 0xa6
 8000d16:	2100      	movs	r1, #0
 8000d18:	2078      	movs	r0, #120	; 0x78
 8000d1a:	f000 fa33 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000d1e:	22a8      	movs	r2, #168	; 0xa8
 8000d20:	2100      	movs	r1, #0
 8000d22:	2078      	movs	r0, #120	; 0x78
 8000d24:	f000 fa2e 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000d28:	223f      	movs	r2, #63	; 0x3f
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2078      	movs	r0, #120	; 0x78
 8000d2e:	f000 fa29 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d32:	22a4      	movs	r2, #164	; 0xa4
 8000d34:	2100      	movs	r1, #0
 8000d36:	2078      	movs	r0, #120	; 0x78
 8000d38:	f000 fa24 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d3c:	22d3      	movs	r2, #211	; 0xd3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2078      	movs	r0, #120	; 0x78
 8000d42:	f000 fa1f 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2078      	movs	r0, #120	; 0x78
 8000d4c:	f000 fa1a 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d50:	22d5      	movs	r2, #213	; 0xd5
 8000d52:	2100      	movs	r1, #0
 8000d54:	2078      	movs	r0, #120	; 0x78
 8000d56:	f000 fa15 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000d5a:	22f0      	movs	r2, #240	; 0xf0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	; 0x78
 8000d60:	f000 fa10 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000d64:	22d9      	movs	r2, #217	; 0xd9
 8000d66:	2100      	movs	r1, #0
 8000d68:	2078      	movs	r0, #120	; 0x78
 8000d6a:	f000 fa0b 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000d6e:	2222      	movs	r2, #34	; 0x22
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	; 0x78
 8000d74:	f000 fa06 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000d78:	22da      	movs	r2, #218	; 0xda
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2078      	movs	r0, #120	; 0x78
 8000d7e:	f000 fa01 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000d82:	2212      	movs	r2, #18
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	; 0x78
 8000d88:	f000 f9fc 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000d8c:	22db      	movs	r2, #219	; 0xdb
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2078      	movs	r0, #120	; 0x78
 8000d92:	f000 f9f7 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000d96:	2220      	movs	r2, #32
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	; 0x78
 8000d9c:	f000 f9f2 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000da0:	228d      	movs	r2, #141	; 0x8d
 8000da2:	2100      	movs	r1, #0
 8000da4:	2078      	movs	r0, #120	; 0x78
 8000da6:	f000 f9ed 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000daa:	2214      	movs	r2, #20
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	; 0x78
 8000db0:	f000 f9e8 	bl	8001184 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000db4:	22af      	movs	r2, #175	; 0xaf
 8000db6:	2100      	movs	r1, #0
 8000db8:	2078      	movs	r0, #120	; 0x78
 8000dba:	f000 f9e3 	bl	8001184 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000dbe:	222e      	movs	r2, #46	; 0x2e
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	; 0x78
 8000dc4:	f000 f9de 	bl	8001184 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 f843 	bl	8000e54 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000dce:	f000 f813 	bl	8000df8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <SSD1306_Init+0x184>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SSD1306_Init+0x184>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SSD1306_Init+0x184>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000de4:	2301      	movs	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200004f4 	.word	0x200004f4
 8000df4:	200004b0 	.word	0x200004b0

08000df8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000dfe:	2300      	movs	r3, #0
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	e01d      	b.n	8000e40 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	3b50      	subs	r3, #80	; 0x50
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2078      	movs	r0, #120	; 0x78
 8000e10:	f000 f9b8 	bl	8001184 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	2078      	movs	r0, #120	; 0x78
 8000e1a:	f000 f9b3 	bl	8001184 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000e1e:	2210      	movs	r2, #16
 8000e20:	2100      	movs	r1, #0
 8000e22:	2078      	movs	r0, #120	; 0x78
 8000e24:	f000 f9ae 	bl	8001184 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	01db      	lsls	r3, r3, #7
 8000e2c:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <SSD1306_UpdateScreen+0x58>)
 8000e2e:	441a      	add	r2, r3
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	2078      	movs	r0, #120	; 0x78
 8000e36:	f000 f95d 	bl	80010f4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2b07      	cmp	r3, #7
 8000e44:	d9de      	bls.n	8000e04 <SSD1306_UpdateScreen+0xc>
	}
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200000b0 	.word	0x200000b0

08000e54 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <SSD1306_Fill+0x14>
 8000e64:	2300      	movs	r3, #0
 8000e66:	e000      	b.n	8000e6a <SSD1306_Fill+0x16>
 8000e68:	23ff      	movs	r3, #255	; 0xff
 8000e6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <SSD1306_Fill+0x2c>)
 8000e72:	f003 fb37 	bl	80044e4 <memset>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000b0 	.word	0x200000b0

08000e84 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	80bb      	strh	r3, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	70fb      	strb	r3, [r7, #3]
	if (
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	2b7f      	cmp	r3, #127	; 0x7f
 8000e9a:	d848      	bhi.n	8000f2e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000ea0:	d845      	bhi.n	8000f2e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <SSD1306_DrawPixel+0xb8>)
 8000ea4:	791b      	ldrb	r3, [r3, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d006      	beq.n	8000eb8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf0c      	ite	eq
 8000eb0:	2301      	moveq	r3, #1
 8000eb2:	2300      	movne	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d11a      	bne.n	8000ef4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ebe:	88fa      	ldrh	r2, [r7, #6]
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	08db      	lsrs	r3, r3, #3
 8000ec4:	b298      	uxth	r0, r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	01db      	lsls	r3, r3, #7
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <SSD1306_DrawPixel+0xbc>)
 8000ece:	5cd3      	ldrb	r3, [r2, r3]
 8000ed0:	b25a      	sxtb	r2, r3
 8000ed2:	88bb      	ldrh	r3, [r7, #4]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	2101      	movs	r1, #1
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b259      	sxtb	r1, r3
 8000ee4:	88fa      	ldrh	r2, [r7, #6]
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	01db      	lsls	r3, r3, #7
 8000eea:	4413      	add	r3, r2
 8000eec:	b2c9      	uxtb	r1, r1
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <SSD1306_DrawPixel+0xbc>)
 8000ef0:	54d1      	strb	r1, [r2, r3]
 8000ef2:	e01d      	b.n	8000f30 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ef4:	88fa      	ldrh	r2, [r7, #6]
 8000ef6:	88bb      	ldrh	r3, [r7, #4]
 8000ef8:	08db      	lsrs	r3, r3, #3
 8000efa:	b298      	uxth	r0, r3
 8000efc:	4603      	mov	r3, r0
 8000efe:	01db      	lsls	r3, r3, #7
 8000f00:	4413      	add	r3, r2
 8000f02:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <SSD1306_DrawPixel+0xbc>)
 8000f04:	5cd3      	ldrb	r3, [r2, r3]
 8000f06:	b25a      	sxtb	r2, r3
 8000f08:	88bb      	ldrh	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	b259      	sxtb	r1, r3
 8000f1e:	88fa      	ldrh	r2, [r7, #6]
 8000f20:	4603      	mov	r3, r0
 8000f22:	01db      	lsls	r3, r3, #7
 8000f24:	4413      	add	r3, r2
 8000f26:	b2c9      	uxtb	r1, r1
 8000f28:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SSD1306_DrawPixel+0xbc>)
 8000f2a:	54d1      	strb	r1, [r2, r3]
 8000f2c:	e000      	b.n	8000f30 <SSD1306_DrawPixel+0xac>
		return;
 8000f2e:	bf00      	nop
	}
}
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	200004b0 	.word	0x200004b0
 8000f40:	200000b0 	.word	0x200000b0

08000f44 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	80fb      	strh	r3, [r7, #6]
 8000f50:	4613      	mov	r3, r2
 8000f52:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000f54:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <SSD1306_GotoXY+0x28>)
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <SSD1306_GotoXY+0x28>)
 8000f5c:	88bb      	ldrh	r3, [r7, #4]
 8000f5e:	8053      	strh	r3, [r2, #2]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	200004b0 	.word	0x200004b0

08000f70 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f80:	4b3a      	ldr	r3, [pc, #232]	; (800106c <SSD1306_Putc+0xfc>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
	if (
 8000f8c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f8e:	dc07      	bgt.n	8000fa0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000f90:	4b36      	ldr	r3, [pc, #216]	; (800106c <SSD1306_Putc+0xfc>)
 8000f92:	885b      	ldrh	r3, [r3, #2]
 8000f94:	461a      	mov	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	785b      	ldrb	r3, [r3, #1]
 8000f9a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f9c:	2b3f      	cmp	r3, #63	; 0x3f
 8000f9e:	dd01      	ble.n	8000fa4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e05e      	b.n	8001062 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	e04b      	b.n	8001042 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	3b20      	subs	r3, #32
 8000fb2:	6839      	ldr	r1, [r7, #0]
 8000fb4:	7849      	ldrb	r1, [r1, #1]
 8000fb6:	fb01 f303 	mul.w	r3, r1, r3
 8000fba:	4619      	mov	r1, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	440b      	add	r3, r1
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	e030      	b.n	8001030 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d010      	beq.n	8001000 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <SSD1306_Putc+0xfc>)
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b298      	uxth	r0, r3
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <SSD1306_Putc+0xfc>)
 8000fec:	885a      	ldrh	r2, [r3, #2]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	79ba      	ldrb	r2, [r7, #6]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff ff43 	bl	8000e84 <SSD1306_DrawPixel>
 8000ffe:	e014      	b.n	800102a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <SSD1306_Putc+0xfc>)
 8001002:	881a      	ldrh	r2, [r3, #0]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	b29b      	uxth	r3, r3
 8001008:	4413      	add	r3, r2
 800100a:	b298      	uxth	r0, r3
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <SSD1306_Putc+0xfc>)
 800100e:	885a      	ldrh	r2, [r3, #2]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	b29b      	uxth	r3, r3
 8001014:	4413      	add	r3, r2
 8001016:	b299      	uxth	r1, r3
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	2b00      	cmp	r3, #0
 800101c:	bf0c      	ite	eq
 800101e:	2301      	moveq	r3, #1
 8001020:	2300      	movne	r3, #0
 8001022:	b2db      	uxtb	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	f7ff ff2d 	bl	8000e84 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	3301      	adds	r3, #1
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4293      	cmp	r3, r2
 800103a:	d3c8      	bcc.n	8000fce <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	461a      	mov	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	4293      	cmp	r3, r2
 800104c:	d3ad      	bcc.n	8000faa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <SSD1306_Putc+0xfc>)
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4413      	add	r3, r2
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <SSD1306_Putc+0xfc>)
 800105e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001060:	79fb      	ldrb	r3, [r7, #7]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200004b0 	.word	0x200004b0

08001070 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4613      	mov	r3, r2
 800107c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800107e:	e012      	b.n	80010a6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	79fa      	ldrb	r2, [r7, #7]
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff71 	bl	8000f70 <SSD1306_Putc>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d002      	beq.n	80010a0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	e008      	b.n	80010b2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3301      	adds	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1e8      	bne.n	8001080 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	781b      	ldrb	r3, [r3, #0]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff fec8 	bl	8000e54 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80010c4:	f7ff fe98 	bl	8000df8 <SSD1306_UpdateScreen>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <ssd1306_I2C_Init+0x24>)
 80010d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010d6:	e002      	b.n	80010de <ssd1306_I2C_Init+0x12>
		p--;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f9      	bne.n	80010d8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	0003d090 	.word	0x0003d090

080010f4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b0c7      	sub	sp, #284	; 0x11c
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	4639      	mov	r1, r7
 8001100:	600a      	str	r2, [r1, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	4622      	mov	r2, r4
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	1dbb      	adds	r3, r7, #6
 800110c:	4602      	mov	r2, r0
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	460a      	mov	r2, r1
 8001114:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	1dba      	adds	r2, r7, #6
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001120:	2300      	movs	r3, #0
 8001122:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001126:	e010      	b.n	800114a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001128:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800112c:	463a      	mov	r2, r7
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	441a      	add	r2, r3
 8001132:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001136:	3301      	adds	r3, #1
 8001138:	7811      	ldrb	r1, [r2, #0]
 800113a:	f107 020c 	add.w	r2, r7, #12
 800113e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001140:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001144:	3301      	adds	r3, #1
 8001146:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800114a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800114e:	b29b      	uxth	r3, r3
 8001150:	1d3a      	adds	r2, r7, #4
 8001152:	8812      	ldrh	r2, [r2, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8e7      	bhi.n	8001128 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b299      	uxth	r1, r3
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	b298      	uxth	r0, r3
 8001166:	f107 020c 	add.w	r2, r7, #12
 800116a:	230a      	movs	r3, #10
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	4603      	mov	r3, r0
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <ssd1306_I2C_WriteMulti+0x8c>)
 8001172:	f001 fae5 	bl	8002740 <HAL_I2C_Master_Transmit>
}
 8001176:	bf00      	nop
 8001178:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	200004f4 	.word	0x200004f4

08001184 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
 800118e:	460b      	mov	r3, r1
 8001190:	71bb      	strb	r3, [r7, #6]
 8001192:	4613      	mov	r3, r2
 8001194:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800119a:	797b      	ldrb	r3, [r7, #5]
 800119c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	b299      	uxth	r1, r3
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	230a      	movs	r3, #10
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2302      	movs	r3, #2
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <ssd1306_I2C_Write+0x38>)
 80011ae:	f001 fac7 	bl	8002740 <HAL_I2C_Master_Transmit>
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200004f4 	.word	0x200004f4

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_MspInit+0x4c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x4c>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <HAL_CAN_MspInit+0x84>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12c      	bne.n	800128c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_CAN_MspInit+0x88>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_CAN_MspInit+0x88>)
 800123c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_CAN_MspInit+0x88>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_CAN_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_CAN_MspInit+0x88>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_CAN_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800126a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800127c:	2309      	movs	r3, #9
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_CAN_MspInit+0x8c>)
 8001288:	f000 ff54 	bl	8002134 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40006400 	.word	0x40006400
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000

080012a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a19      	ldr	r2, [pc, #100]	; (8001324 <HAL_I2C_MspInit+0x84>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d12b      	bne.n	800131a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_I2C_MspInit+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a17      	ldr	r2, [pc, #92]	; (8001328 <HAL_I2C_MspInit+0x88>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_I2C_MspInit+0x88>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012de:	23c0      	movs	r3, #192	; 0xc0
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e2:	2312      	movs	r3, #18
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ee:	2304      	movs	r3, #4
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <HAL_I2C_MspInit+0x8c>)
 80012fa:	f000 ff1b 	bl	8002134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_I2C_MspInit+0x88>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <HAL_I2C_MspInit+0x88>)
 8001308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_I2C_MspInit+0x88>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40005400 	.word	0x40005400
 8001328:	40023800 	.word	0x40023800
 800132c:	40020400 	.word	0x40020400

08001330 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001350:	d133      	bne.n	80013ba <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_TIM_IC_MspInit+0x94>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <HAL_TIM_IC_MspInit+0x94>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_TIM_IC_MspInit+0x94>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_TIM_IC_MspInit+0x94>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <HAL_TIM_IC_MspInit+0x94>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_TIM_IC_MspInit+0x94>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800138a:	2301      	movs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800139a:	2301      	movs	r3, #1
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <HAL_TIM_IC_MspInit+0x98>)
 80013a6:	f000 fec5 	bl	8002134 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	201c      	movs	r0, #28
 80013b0:	f000 fe89 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b4:	201c      	movs	r0, #28
 80013b6:	f000 fea2 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f8ca 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <TIM2_IRQHandler+0x10>)
 800142e:	f002 fa4e 	bl	80038ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000558 	.word	0x20000558

0800143c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x50>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x16>
		heap_end = &end;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <_sbrk+0x50>)
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <_sbrk+0x54>)
 8001450:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <_sbrk+0x50>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <_sbrk+0x50>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4413      	add	r3, r2
 8001460:	466a      	mov	r2, sp
 8001462:	4293      	cmp	r3, r2
 8001464:	d907      	bls.n	8001476 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001466:	f003 f813 	bl	8004490 <__errno>
 800146a:	4602      	mov	r2, r0
 800146c:	230c      	movs	r3, #12
 800146e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	e006      	b.n	8001484 <_sbrk+0x48>
	}

	heap_end += incr;
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <_sbrk+0x50>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a03      	ldr	r2, [pc, #12]	; (800148c <_sbrk+0x50>)
 8001480:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200004b8 	.word	0x200004b8
 8001490:	20000600 	.word	0x20000600

08001494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <SystemInit+0x28>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <SystemInit+0x28>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SystemInit+0x28>)
 80014aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ae:	609a      	str	r2, [r3, #8]
#endif
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014c6:	e003      	b.n	80014d0 <LoopCopyDataInit>

080014c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014ce:	3104      	adds	r1, #4

080014d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014d8:	d3f6      	bcc.n	80014c8 <CopyDataInit>
  ldr  r2, =_sbss
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014dc:	e002      	b.n	80014e4 <LoopFillZerobss>

080014de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014e0:	f842 3b04 	str.w	r3, [r2], #4

080014e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014e8:	d3f9      	bcc.n	80014de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ea:	f7ff ffd3 	bl	8001494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ee:	f002 ffd5 	bl	800449c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f2:	f7ff f83d 	bl	8000570 <main>
  bx  lr    
 80014f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014fc:	0800627c 	.word	0x0800627c
  ldr  r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001504:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001508:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 800150c:	200005fc 	.word	0x200005fc

08001510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC_IRQHandler>
	...

08001514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <HAL_Init+0x40>)
 800151e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_Init+0x40>)
 800152a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_Init+0x40>)
 8001536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 fdb7 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001542:	2000      	movs	r0, #0
 8001544:	f000 f808 	bl	8001558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001548:	f7ff fe3a 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023c00 	.word	0x40023c00

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x54>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x58>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fdcf 	bl	800211a <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00e      	b.n	80015a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d80a      	bhi.n	80015a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f000 fd97 	bl	80020c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <HAL_InitTick+0x5c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000018 	.word	0x20000018
 80015b0:	20000020 	.word	0x20000020
 80015b4:	2000001c 	.word	0x2000001c

080015b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x20>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x24>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <HAL_IncTick+0x24>)
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000020 	.word	0x20000020
 80015dc:	200005f4 	.word	0x200005f4

080015e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return uwTick;
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <HAL_GetTick+0x14>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	200005f4 	.word	0x200005f4

080015f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001600:	f7ff ffee 	bl	80015e0 <HAL_GetTick>
 8001604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001610:	d005      	beq.n	800161e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_Delay+0x40>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800161e:	bf00      	nop
 8001620:	f7ff ffde 	bl	80015e0 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	429a      	cmp	r2, r3
 800162e:	d8f7      	bhi.n	8001620 <HAL_Delay+0x28>
  {
  }
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000020 	.word	0x20000020

0800163c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0ed      	b.n	800182a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fdd8 	bl	8001210 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0202 	bic.w	r2, r2, #2
 800166e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001670:	f7ff ffb6 	bl	80015e0 <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001676:	e012      	b.n	800169e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001678:	f7ff ffb2 	bl	80015e0 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b0a      	cmp	r3, #10
 8001684:	d90b      	bls.n	800169e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2205      	movs	r2, #5
 8001696:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0c5      	b.n	800182a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e5      	bne.n	8001678 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016bc:	f7ff ff90 	bl	80015e0 <HAL_GetTick>
 80016c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016c2:	e012      	b.n	80016ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c4:	f7ff ff8c 	bl	80015e0 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b0a      	cmp	r3, #10
 80016d0:	d90b      	bls.n	80016ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2205      	movs	r2, #5
 80016e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e09f      	b.n	800182a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0e5      	beq.n	80016c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e1b      	ldrb	r3, [r3, #24]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d108      	bne.n	8001712 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e007      	b.n	8001722 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7e5b      	ldrb	r3, [r3, #25]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e007      	b.n	800174c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7e9b      	ldrb	r3, [r3, #26]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0220 	orr.w	r2, r2, #32
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0220 	bic.w	r2, r2, #32
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7edb      	ldrb	r3, [r3, #27]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0210 	bic.w	r2, r2, #16
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e007      	b.n	80017a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0210 	orr.w	r2, r2, #16
 800179e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7f1b      	ldrb	r3, [r3, #28]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d108      	bne.n	80017ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0208 	orr.w	r2, r2, #8
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e007      	b.n	80017ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0208 	bic.w	r2, r2, #8
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7f5b      	ldrb	r3, [r3, #29]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d108      	bne.n	80017e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0204 	orr.w	r2, r2, #4
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e007      	b.n	80017f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0204 	bic.w	r2, r2, #4
 80017f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	ea42 0103 	orr.w	r1, r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800184c:	7cfb      	ldrb	r3, [r7, #19]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d003      	beq.n	800185a <HAL_CAN_ConfigFilter+0x26>
 8001852:	7cfb      	ldrb	r3, [r7, #19]
 8001854:	2b02      	cmp	r3, #2
 8001856:	f040 80be 	bne.w	80019d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800185a:	4b65      	ldr	r3, [pc, #404]	; (80019f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800185c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001874:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	431a      	orrs	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	2201      	movs	r2, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	401a      	ands	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d123      	bne.n	8001904 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3248      	adds	r2, #72	; 0x48
 80018e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018fa:	6979      	ldr	r1, [r7, #20]
 80018fc:	3348      	adds	r3, #72	; 0x48
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d122      	bne.n	8001952 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800192c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3248      	adds	r2, #72	; 0x48
 8001932:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001946:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001948:	6979      	ldr	r1, [r7, #20]
 800194a:	3348      	adds	r3, #72	; 0x48
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	401a      	ands	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800196c:	e007      	b.n	800197e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	431a      	orrs	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43db      	mvns	r3, r3
 8001990:	401a      	ands	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001998:	e007      	b.n	80019aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019c8:	f023 0201 	bic.w	r2, r3, #1
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e006      	b.n	80019e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
  }
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	40006400 	.word	0x40006400

080019f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d12e      	bne.n	8001a66 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a20:	f7ff fdde 	bl	80015e0 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a26:	e012      	b.n	8001a4e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a28:	f7ff fdda 	bl	80015e0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b0a      	cmp	r3, #10
 8001a34:	d90b      	bls.n	8001a4e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2205      	movs	r2, #5
 8001a46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e012      	b.n	8001a74 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1e5      	bne.n	8001a28 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e006      	b.n	8001a74 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
  }
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a90:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a9a:	7ffb      	ldrb	r3, [r7, #31]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d003      	beq.n	8001aa8 <HAL_CAN_AddTxMessage+0x2c>
 8001aa0:	7ffb      	ldrb	r3, [r7, #31]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	f040 80b8 	bne.w	8001c18 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d105      	bne.n	8001ac8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80a0 	beq.w	8001c08 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	0e1b      	lsrs	r3, r3, #24
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d907      	bls.n	8001ae8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e09e      	b.n	8001c26 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	409a      	lsls	r2, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10d      	bne.n	8001b16 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	6809      	ldr	r1, [r1, #0]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3318      	adds	r3, #24
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	440b      	add	r3, r1
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e00f      	b.n	8001b36 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b20:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b26:	68f9      	ldr	r1, [r7, #12]
 8001b28:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b2a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3318      	adds	r3, #24
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	440b      	add	r3, r1
 8001b34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6819      	ldr	r1, [r3, #0]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3318      	adds	r3, #24
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	440b      	add	r3, r1
 8001b46:	3304      	adds	r3, #4
 8001b48:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	7d1b      	ldrb	r3, [r3, #20]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d111      	bne.n	8001b76 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3318      	adds	r3, #24
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3304      	adds	r3, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	6811      	ldr	r1, [r2, #0]
 8001b66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	440b      	add	r3, r1
 8001b72:	3304      	adds	r3, #4
 8001b74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3307      	adds	r3, #7
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	061a      	lsls	r2, r3, #24
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3306      	adds	r3, #6
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	041b      	lsls	r3, r3, #16
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3305      	adds	r3, #5
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	4313      	orrs	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	3204      	adds	r2, #4
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	4610      	mov	r0, r2
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	6811      	ldr	r1, [r2, #0]
 8001b9e:	ea43 0200 	orr.w	r2, r3, r0
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001bac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3303      	adds	r3, #3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	061a      	lsls	r2, r3, #24
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3302      	adds	r3, #2
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	4610      	mov	r0, r2
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	6811      	ldr	r1, [r2, #0]
 8001bd4:	ea43 0200 	orr.w	r2, r3, r0
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	440b      	add	r3, r1
 8001bde:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001be2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3318      	adds	r3, #24
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	6811      	ldr	r1, [r2, #0]
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3318      	adds	r3, #24
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	440b      	add	r3, r1
 8001c02:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e00e      	b.n	8001c26 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e006      	b.n	8001c26 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b085      	sub	sp, #20
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c44:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d002      	beq.n	8001c52 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d11d      	bne.n	8001c8e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3301      	adds	r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d003      	beq.n	8001cc0 <HAL_CAN_GetRxMessage+0x24>
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	f040 80f3 	bne.w	8001ea6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d116      	bne.n	8001d02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0e7      	b.n	8001eb4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d107      	bne.n	8001d02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0d8      	b.n	8001eb4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	331b      	adds	r3, #27
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0204 	and.w	r2, r3, #4
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10c      	bne.n	8001d3a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	331b      	adds	r3, #27
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	4413      	add	r3, r2
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0d5b      	lsrs	r3, r3, #21
 8001d30:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e00b      	b.n	8001d52 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	331b      	adds	r3, #27
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	4413      	add	r3, r2
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	331b      	adds	r3, #27
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	4413      	add	r3, r2
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0202 	and.w	r2, r3, #2
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	331b      	adds	r3, #27
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4413      	add	r3, r2
 8001d74:	3304      	adds	r3, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 020f 	and.w	r2, r3, #15
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	331b      	adds	r3, #27
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	331b      	adds	r3, #27
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0c1b      	lsrs	r3, r3, #16
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0a1a      	lsrs	r2, r3, #8
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0c1a      	lsrs	r2, r3, #16
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	3302      	adds	r3, #2
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	0e1a      	lsrs	r2, r3, #24
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	3303      	adds	r3, #3
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	3304      	adds	r3, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0a1a      	lsrs	r2, r3, #8
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	3305      	adds	r3, #5
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	0c1a      	lsrs	r2, r3, #16
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	3306      	adds	r3, #6
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0e1a      	lsrs	r2, r3, #24
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	3307      	adds	r3, #7
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d108      	bne.n	8001e92 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0220 	orr.w	r2, r2, #32
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	e007      	b.n	8001ea2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0220 	orr.w	r2, r2, #32
 8001ea0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e006      	b.n	8001eb4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
  }
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ed6:	7afb      	ldrb	r3, [r7, #11]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d002      	beq.n	8001ee2 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001edc:	7afb      	ldrb	r3, [r7, #11]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d10f      	bne.n	8001f02 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d106      	bne.n	8001ef6 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e005      	b.n	8001f02 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f42:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	60d3      	str	r3, [r2, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db0b      	blt.n	8001f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	4907      	ldr	r1, [pc, #28]	; (8001fac <__NVIC_EnableIRQ+0x38>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2001      	movs	r0, #1
 8001f96:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000e100 	.word	0xe000e100

08001fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db0a      	blt.n	8001fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	490c      	ldr	r1, [pc, #48]	; (8001ffc <__NVIC_SetPriority+0x4c>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd8:	e00a      	b.n	8001ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <__NVIC_SetPriority+0x50>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	761a      	strb	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f1c3 0307 	rsb	r3, r3, #7
 800201e:	2b04      	cmp	r3, #4
 8002020:	bf28      	it	cs
 8002022:	2304      	movcs	r3, #4
 8002024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3304      	adds	r3, #4
 800202a:	2b06      	cmp	r3, #6
 800202c:	d902      	bls.n	8002034 <NVIC_EncodePriority+0x30>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3b03      	subs	r3, #3
 8002032:	e000      	b.n	8002036 <NVIC_EncodePriority+0x32>
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43d9      	mvns	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	4313      	orrs	r3, r2
         );
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800207c:	d301      	bcc.n	8002082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207e:	2301      	movs	r3, #1
 8002080:	e00f      	b.n	80020a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <SysTick_Config+0x40>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208a:	210f      	movs	r1, #15
 800208c:	f04f 30ff 	mov.w	r0, #4294967295
 8002090:	f7ff ff8e 	bl	8001fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <SysTick_Config+0x40>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <SysTick_Config+0x40>)
 800209c:	2207      	movs	r2, #7
 800209e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff29 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d8:	f7ff ff3e 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 80020dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	f7ff ff8e 	bl	8002004 <NVIC_EncodePriority>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff5d 	bl	8001fb0 <__NVIC_SetPriority>
}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff31 	bl	8001f74 <__NVIC_EnableIRQ>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffa2 	bl	800206c <SysTick_Config>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	e16b      	b.n	8002428 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	f040 815a 	bne.w	8002422 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d00b      	beq.n	800218e <HAL_GPIO_Init+0x5a>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d007      	beq.n	800218e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002182:	2b11      	cmp	r3, #17
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b12      	cmp	r3, #18
 800218c:	d130      	bne.n	80021f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c4:	2201      	movs	r2, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 0201 	and.w	r2, r3, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0xfc>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b12      	cmp	r3, #18
 800222e:	d123      	bne.n	8002278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	08da      	lsrs	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3208      	adds	r2, #8
 8002272:	69b9      	ldr	r1, [r7, #24]
 8002274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0203 	and.w	r2, r3, #3
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80b4 	beq.w	8002422 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b5f      	ldr	r3, [pc, #380]	; (800243c <HAL_GPIO_Init+0x308>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4a5e      	ldr	r2, [pc, #376]	; (800243c <HAL_GPIO_Init+0x308>)
 80022c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ca:	4b5c      	ldr	r3, [pc, #368]	; (800243c <HAL_GPIO_Init+0x308>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d6:	4a5a      	ldr	r2, [pc, #360]	; (8002440 <HAL_GPIO_Init+0x30c>)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a51      	ldr	r2, [pc, #324]	; (8002444 <HAL_GPIO_Init+0x310>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d02b      	beq.n	800235a <HAL_GPIO_Init+0x226>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a50      	ldr	r2, [pc, #320]	; (8002448 <HAL_GPIO_Init+0x314>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d025      	beq.n	8002356 <HAL_GPIO_Init+0x222>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4f      	ldr	r2, [pc, #316]	; (800244c <HAL_GPIO_Init+0x318>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01f      	beq.n	8002352 <HAL_GPIO_Init+0x21e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4e      	ldr	r2, [pc, #312]	; (8002450 <HAL_GPIO_Init+0x31c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d019      	beq.n	800234e <HAL_GPIO_Init+0x21a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4d      	ldr	r2, [pc, #308]	; (8002454 <HAL_GPIO_Init+0x320>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0x216>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4c      	ldr	r2, [pc, #304]	; (8002458 <HAL_GPIO_Init+0x324>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00d      	beq.n	8002346 <HAL_GPIO_Init+0x212>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4b      	ldr	r2, [pc, #300]	; (800245c <HAL_GPIO_Init+0x328>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <HAL_GPIO_Init+0x20e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4a      	ldr	r2, [pc, #296]	; (8002460 <HAL_GPIO_Init+0x32c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_GPIO_Init+0x20a>
 800233a:	2307      	movs	r3, #7
 800233c:	e00e      	b.n	800235c <HAL_GPIO_Init+0x228>
 800233e:	2308      	movs	r3, #8
 8002340:	e00c      	b.n	800235c <HAL_GPIO_Init+0x228>
 8002342:	2306      	movs	r3, #6
 8002344:	e00a      	b.n	800235c <HAL_GPIO_Init+0x228>
 8002346:	2305      	movs	r3, #5
 8002348:	e008      	b.n	800235c <HAL_GPIO_Init+0x228>
 800234a:	2304      	movs	r3, #4
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x228>
 800234e:	2303      	movs	r3, #3
 8002350:	e004      	b.n	800235c <HAL_GPIO_Init+0x228>
 8002352:	2302      	movs	r3, #2
 8002354:	e002      	b.n	800235c <HAL_GPIO_Init+0x228>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_GPIO_Init+0x228>
 800235a:	2300      	movs	r3, #0
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	f002 0203 	and.w	r2, r2, #3
 8002362:	0092      	lsls	r2, r2, #2
 8002364:	4093      	lsls	r3, r2
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800236c:	4934      	ldr	r1, [pc, #208]	; (8002440 <HAL_GPIO_Init+0x30c>)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237a:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <HAL_GPIO_Init+0x330>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800239e:	4a31      	ldr	r2, [pc, #196]	; (8002464 <HAL_GPIO_Init+0x330>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023a4:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <HAL_GPIO_Init+0x330>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c8:	4a26      	ldr	r2, [pc, #152]	; (8002464 <HAL_GPIO_Init+0x330>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ce:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_GPIO_Init+0x330>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f2:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <HAL_GPIO_Init+0x330>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <HAL_GPIO_Init+0x330>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800241c:	4a11      	ldr	r2, [pc, #68]	; (8002464 <HAL_GPIO_Init+0x330>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3301      	adds	r3, #1
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b0f      	cmp	r3, #15
 800242c:	f67f ae90 	bls.w	8002150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002430:	bf00      	nop
 8002432:	3724      	adds	r7, #36	; 0x24
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	40023800 	.word	0x40023800
 8002440:	40013800 	.word	0x40013800
 8002444:	40020000 	.word	0x40020000
 8002448:	40020400 	.word	0x40020400
 800244c:	40020800 	.word	0x40020800
 8002450:	40020c00 	.word	0x40020c00
 8002454:	40021000 	.word	0x40021000
 8002458:	40021400 	.word	0x40021400
 800245c:	40021800 	.word	0x40021800
 8002460:	40021c00 	.word	0x40021c00
 8002464:	40013c00 	.word	0x40013c00

08002468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
 8002474:	4613      	mov	r3, r2
 8002476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002478:	787b      	ldrb	r3, [r7, #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002484:	e003      	b.n	800248e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002486:	887b      	ldrh	r3, [r7, #2]
 8002488:	041a      	lsls	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	619a      	str	r2, [r3, #24]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	401a      	ands	r2, r3
 80024ae:	887b      	ldrh	r3, [r7, #2]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d104      	bne.n	80024be <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024b4:	887b      	ldrh	r3, [r7, #2]
 80024b6:	041a      	lsls	r2, r3, #16
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80024bc:	e002      	b.n	80024c4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	619a      	str	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e11f      	b.n	8002722 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe fed2 	bl	80012a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2224      	movs	r2, #36	; 0x24
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002534:	f001 f94e 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8002538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4a7b      	ldr	r2, [pc, #492]	; (800272c <HAL_I2C_Init+0x25c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d807      	bhi.n	8002554 <HAL_I2C_Init+0x84>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a7a      	ldr	r2, [pc, #488]	; (8002730 <HAL_I2C_Init+0x260>)
 8002548:	4293      	cmp	r3, r2
 800254a:	bf94      	ite	ls
 800254c:	2301      	movls	r3, #1
 800254e:	2300      	movhi	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e006      	b.n	8002562 <HAL_I2C_Init+0x92>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4a77      	ldr	r2, [pc, #476]	; (8002734 <HAL_I2C_Init+0x264>)
 8002558:	4293      	cmp	r3, r2
 800255a:	bf94      	ite	ls
 800255c:	2301      	movls	r3, #1
 800255e:	2300      	movhi	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0db      	b.n	8002722 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a72      	ldr	r2, [pc, #456]	; (8002738 <HAL_I2C_Init+0x268>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0c9b      	lsrs	r3, r3, #18
 8002574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	430a      	orrs	r2, r1
 8002588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4a64      	ldr	r2, [pc, #400]	; (800272c <HAL_I2C_Init+0x25c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d802      	bhi.n	80025a4 <HAL_I2C_Init+0xd4>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3301      	adds	r3, #1
 80025a2:	e009      	b.n	80025b8 <HAL_I2C_Init+0xe8>
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	4a63      	ldr	r2, [pc, #396]	; (800273c <HAL_I2C_Init+0x26c>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	099b      	lsrs	r3, r3, #6
 80025b6:	3301      	adds	r3, #1
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	430b      	orrs	r3, r1
 80025be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4956      	ldr	r1, [pc, #344]	; (800272c <HAL_I2C_Init+0x25c>)
 80025d4:	428b      	cmp	r3, r1
 80025d6:	d80d      	bhi.n	80025f4 <HAL_I2C_Init+0x124>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1e59      	subs	r1, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	bf38      	it	cc
 80025f0:	2304      	movcc	r3, #4
 80025f2:	e04f      	b.n	8002694 <HAL_I2C_Init+0x1c4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d111      	bne.n	8002620 <HAL_I2C_Init+0x150>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1e58      	subs	r0, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	440b      	add	r3, r1
 800260a:	fbb0 f3f3 	udiv	r3, r0, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e012      	b.n	8002646 <HAL_I2C_Init+0x176>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1e58      	subs	r0, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	0099      	lsls	r1, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	fbb0 f3f3 	udiv	r3, r0, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Init+0x17e>
 800264a:	2301      	movs	r3, #1
 800264c:	e022      	b.n	8002694 <HAL_I2C_Init+0x1c4>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10e      	bne.n	8002674 <HAL_I2C_Init+0x1a4>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1e58      	subs	r0, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	440b      	add	r3, r1
 8002664:	fbb0 f3f3 	udiv	r3, r0, r3
 8002668:	3301      	adds	r3, #1
 800266a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002672:	e00f      	b.n	8002694 <HAL_I2C_Init+0x1c4>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1e58      	subs	r0, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	0099      	lsls	r1, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	fbb0 f3f3 	udiv	r3, r0, r3
 800268a:	3301      	adds	r3, #1
 800268c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	6809      	ldr	r1, [r1, #0]
 8002698:	4313      	orrs	r3, r2
 800269a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6911      	ldr	r1, [r2, #16]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68d2      	ldr	r2, [r2, #12]
 80026ce:	4311      	orrs	r1, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	430b      	orrs	r3, r1
 80026d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	000186a0 	.word	0x000186a0
 8002730:	001e847f 	.word	0x001e847f
 8002734:	003d08ff 	.word	0x003d08ff
 8002738:	431bde83 	.word	0x431bde83
 800273c:	10624dd3 	.word	0x10624dd3

08002740 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	461a      	mov	r2, r3
 800274c:	460b      	mov	r3, r1
 800274e:	817b      	strh	r3, [r7, #10]
 8002750:	4613      	mov	r3, r2
 8002752:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7fe ff44 	bl	80015e0 <HAL_GetTick>
 8002758:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b20      	cmp	r3, #32
 8002764:	f040 80e0 	bne.w	8002928 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2319      	movs	r3, #25
 800276e:	2201      	movs	r2, #1
 8002770:	4970      	ldr	r1, [pc, #448]	; (8002934 <HAL_I2C_Master_Transmit+0x1f4>)
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fa92 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800277e:	2302      	movs	r3, #2
 8002780:	e0d3      	b.n	800292a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_I2C_Master_Transmit+0x50>
 800278c:	2302      	movs	r3, #2
 800278e:	e0cc      	b.n	800292a <HAL_I2C_Master_Transmit+0x1ea>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d007      	beq.n	80027b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2221      	movs	r2, #33	; 0x21
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2210      	movs	r2, #16
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	893a      	ldrh	r2, [r7, #8]
 80027e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a50      	ldr	r2, [pc, #320]	; (8002938 <HAL_I2C_Master_Transmit+0x1f8>)
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027f8:	8979      	ldrh	r1, [r7, #10]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	6a3a      	ldr	r2, [r7, #32]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f9ca 	bl	8002b98 <I2C_MasterRequestWrite>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e08d      	b.n	800292a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002824:	e066      	b.n	80028f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	6a39      	ldr	r1, [r7, #32]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fb0c 	bl	8002e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00d      	beq.n	8002852 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2b04      	cmp	r3, #4
 800283c:	d107      	bne.n	800284e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e06b      	b.n	800292a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b04      	cmp	r3, #4
 800288e:	d11b      	bne.n	80028c8 <HAL_I2C_Master_Transmit+0x188>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	d017      	beq.n	80028c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	6a39      	ldr	r1, [r7, #32]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fafc 	bl	8002eca <I2C_WaitOnBTFFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00d      	beq.n	80028f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d107      	bne.n	80028f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e01a      	b.n	800292a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d194      	bne.n	8002826 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	e000      	b.n	800292a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002928:	2302      	movs	r3, #2
  }
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	00100002 	.word	0x00100002
 8002938:	ffff0000 	.word	0xffff0000

0800293c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	460b      	mov	r3, r1
 800294a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7fe fe48 	bl	80015e0 <HAL_GetTick>
 8002950:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002952:	2301      	movs	r3, #1
 8002954:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b20      	cmp	r3, #32
 8002960:	f040 8110 	bne.w	8002b84 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2319      	movs	r3, #25
 800296a:	2201      	movs	r2, #1
 800296c:	4988      	ldr	r1, [pc, #544]	; (8002b90 <HAL_I2C_IsDeviceReady+0x254>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f994 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
 800297c:	e103      	b.n	8002b86 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_I2C_IsDeviceReady+0x50>
 8002988:	2302      	movs	r3, #2
 800298a:	e0fc      	b.n	8002b86 <HAL_I2C_IsDeviceReady+0x24a>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d007      	beq.n	80029b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2224      	movs	r2, #36	; 0x24
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a70      	ldr	r2, [pc, #448]	; (8002b94 <HAL_I2C_IsDeviceReady+0x258>)
 80029d4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f952 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00c      	beq.n	8002a18 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e0b6      	b.n	8002b86 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a18:	897b      	ldrh	r3, [r7, #10]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a26:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a28:	f7fe fdda 	bl	80015e0 <HAL_GetTick>
 8002a2c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a5c:	e025      	b.n	8002aaa <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a5e:	f7fe fdbf 	bl	80015e0 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d302      	bcc.n	8002a74 <HAL_I2C_IsDeviceReady+0x138>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d103      	bne.n	8002a7c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	22a0      	movs	r2, #160	; 0xa0
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	bf0c      	ite	eq
 8002a8a:	2301      	moveq	r3, #1
 8002a8c:	2300      	movne	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_I2C_IsDeviceReady+0x186>
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <HAL_I2C_IsDeviceReady+0x186>
 8002abc:	7dbb      	ldrb	r3, [r7, #22]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0cd      	beq.n	8002a5e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d129      	bne.n	8002b2c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	2319      	movs	r3, #25
 8002b04:	2201      	movs	r2, #1
 8002b06:	4922      	ldr	r1, [pc, #136]	; (8002b90 <HAL_I2C_IsDeviceReady+0x254>)
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f8c7 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e036      	b.n	8002b86 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e02c      	b.n	8002b86 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b44:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	2319      	movs	r3, #25
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4910      	ldr	r1, [pc, #64]	; (8002b90 <HAL_I2C_IsDeviceReady+0x254>)
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f8a3 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e012      	b.n	8002b86 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	3301      	adds	r3, #1
 8002b64:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	f4ff af33 	bcc.w	80029d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	00100002 	.word	0x00100002
 8002b94:	ffff0000 	.word	0xffff0000

08002b98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d006      	beq.n	8002bc2 <I2C_MasterRequestWrite+0x2a>
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d003      	beq.n	8002bc2 <I2C_MasterRequestWrite+0x2a>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bc0:	d108      	bne.n	8002bd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e00b      	b.n	8002bec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	2b12      	cmp	r3, #18
 8002bda:	d107      	bne.n	8002bec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f84f 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00c      	beq.n	8002c1e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e035      	b.n	8002c8a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c26:	d108      	bne.n	8002c3a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c28:	897b      	ldrh	r3, [r7, #10]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c36:	611a      	str	r2, [r3, #16]
 8002c38:	e01b      	b.n	8002c72 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	11db      	asrs	r3, r3, #7
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f003 0306 	and.w	r3, r3, #6
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f063 030f 	orn	r3, r3, #15
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	490f      	ldr	r1, [pc, #60]	; (8002c94 <I2C_MasterRequestWrite+0xfc>)
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f876 	bl	8002d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e010      	b.n	8002c8a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c68:	897b      	ldrh	r3, [r7, #10]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4908      	ldr	r1, [pc, #32]	; (8002c98 <I2C_MasterRequestWrite+0x100>)
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f866 	bl	8002d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	00010008 	.word	0x00010008
 8002c98:	00010002 	.word	0x00010002

08002c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cac:	e025      	b.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d021      	beq.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb6:	f7fe fc93 	bl	80015e0 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d116      	bne.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f043 0220 	orr.w	r2, r3, #32
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e023      	b.n	8002d42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d10d      	bne.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf0c      	ite	eq
 8002d16:	2301      	moveq	r3, #1
 8002d18:	2300      	movne	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	e00c      	b.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf0c      	ite	eq
 8002d32:	2301      	moveq	r3, #1
 8002d34:	2300      	movne	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d0b6      	beq.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d58:	e051      	b.n	8002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d68:	d123      	bne.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0204 	orr.w	r2, r3, #4
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e046      	b.n	8002e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d021      	beq.n	8002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dba:	f7fe fc11 	bl	80015e0 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d302      	bcc.n	8002dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d116      	bne.n	8002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f043 0220 	orr.w	r2, r3, #32
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e020      	b.n	8002e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d10c      	bne.n	8002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4013      	ands	r3, r2
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bf14      	ite	ne
 8002e1a:	2301      	movne	r3, #1
 8002e1c:	2300      	moveq	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	e00b      	b.n	8002e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf14      	ite	ne
 8002e34:	2301      	movne	r3, #1
 8002e36:	2300      	moveq	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d18d      	bne.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e54:	e02d      	b.n	8002eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f878 	bl	8002f4c <I2C_IsAcknowledgeFailed>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e02d      	b.n	8002ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d021      	beq.n	8002eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6e:	f7fe fbb7 	bl	80015e0 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d302      	bcc.n	8002e84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d116      	bne.n	8002eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e007      	b.n	8002ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebc:	2b80      	cmp	r3, #128	; 0x80
 8002ebe:	d1ca      	bne.n	8002e56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ed6:	e02d      	b.n	8002f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f837 	bl	8002f4c <I2C_IsAcknowledgeFailed>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e02d      	b.n	8002f44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eee:	d021      	beq.n	8002f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef0:	f7fe fb76 	bl	80015e0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d302      	bcc.n	8002f06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d116      	bne.n	8002f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e007      	b.n	8002f44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d1ca      	bne.n	8002ed8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f62:	d11b      	bne.n	8002f9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f043 0204 	orr.w	r2, r3, #4
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e25b      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d075      	beq.n	80030b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fca:	4ba3      	ldr	r3, [pc, #652]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd6:	4ba0      	ldr	r3, [pc, #640]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d112      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe2:	4b9d      	ldr	r3, [pc, #628]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fee:	d10b      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	4b99      	ldr	r3, [pc, #612]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d05b      	beq.n	80030b4 <HAL_RCC_OscConfig+0x108>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d157      	bne.n	80030b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e236      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d106      	bne.n	8003020 <HAL_RCC_OscConfig+0x74>
 8003012:	4b91      	ldr	r3, [pc, #580]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a90      	ldr	r2, [pc, #576]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e01d      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x98>
 800302a:	4b8b      	ldr	r3, [pc, #556]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a8a      	ldr	r2, [pc, #552]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b88      	ldr	r3, [pc, #544]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a87      	ldr	r2, [pc, #540]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003044:	4b84      	ldr	r3, [pc, #528]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a83      	ldr	r2, [pc, #524]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b81      	ldr	r3, [pc, #516]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a80      	ldr	r2, [pc, #512]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe fabc 	bl	80015e0 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7fe fab8 	bl	80015e0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e1fb      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	4b76      	ldr	r3, [pc, #472]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0xc0>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fe faa8 	bl	80015e0 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003094:	f7fe faa4 	bl	80015e0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e1e7      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	4b6c      	ldr	r3, [pc, #432]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0xe8>
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d063      	beq.n	800318a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c2:	4b65      	ldr	r3, [pc, #404]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ce:	4b62      	ldr	r3, [pc, #392]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d11c      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030da:	4b5f      	ldr	r3, [pc, #380]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d116      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	4b5c      	ldr	r3, [pc, #368]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e1bb      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fe:	4b56      	ldr	r3, [pc, #344]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4952      	ldr	r1, [pc, #328]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003112:	e03a      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d020      	beq.n	800315e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800311c:	4b4f      	ldr	r3, [pc, #316]	; (800325c <HAL_RCC_OscConfig+0x2b0>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7fe fa5d 	bl	80015e0 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312a:	f7fe fa59 	bl	80015e0 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e19c      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	4b46      	ldr	r3, [pc, #280]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4940      	ldr	r1, [pc, #256]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
 800315c:	e015      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315e:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_OscConfig+0x2b0>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fa3c 	bl	80015e0 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316c:	f7fe fa38 	bl	80015e0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e17b      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d030      	beq.n	80031f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319e:	4b30      	ldr	r3, [pc, #192]	; (8003260 <HAL_RCC_OscConfig+0x2b4>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe fa1c 	bl	80015e0 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ac:	f7fe fa18 	bl	80015e0 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e15b      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	4b26      	ldr	r3, [pc, #152]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x200>
 80031ca:	e015      	b.n	80031f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031cc:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCC_OscConfig+0x2b4>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d2:	f7fe fa05 	bl	80015e0 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031da:	f7fe fa01 	bl	80015e0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e144      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80a0 	beq.w	8003346 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003206:	2300      	movs	r3, #0
 8003208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003224:	6413      	str	r3, [r2, #64]	; 0x40
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_OscConfig+0x2b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d121      	bne.n	8003286 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_RCC_OscConfig+0x2b8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <HAL_RCC_OscConfig+0x2b8>)
 8003248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324e:	f7fe f9c7 	bl	80015e0 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	e011      	b.n	800327a <HAL_RCC_OscConfig+0x2ce>
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	42470000 	.word	0x42470000
 8003260:	42470e80 	.word	0x42470e80
 8003264:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003268:	f7fe f9ba 	bl	80015e0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e0fd      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	4b81      	ldr	r3, [pc, #516]	; (8003480 <HAL_RCC_OscConfig+0x4d4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d106      	bne.n	800329c <HAL_RCC_OscConfig+0x2f0>
 800328e:	4b7d      	ldr	r3, [pc, #500]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a7c      	ldr	r2, [pc, #496]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
 800329a:	e01c      	b.n	80032d6 <HAL_RCC_OscConfig+0x32a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d10c      	bne.n	80032be <HAL_RCC_OscConfig+0x312>
 80032a4:	4b77      	ldr	r3, [pc, #476]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a76      	ldr	r2, [pc, #472]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 80032aa:	f043 0304 	orr.w	r3, r3, #4
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	4b74      	ldr	r3, [pc, #464]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	4a73      	ldr	r2, [pc, #460]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6713      	str	r3, [r2, #112]	; 0x70
 80032bc:	e00b      	b.n	80032d6 <HAL_RCC_OscConfig+0x32a>
 80032be:	4b71      	ldr	r3, [pc, #452]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a70      	ldr	r2, [pc, #448]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	4b6e      	ldr	r3, [pc, #440]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	4a6d      	ldr	r2, [pc, #436]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d015      	beq.n	800330a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fe f97f 	bl	80015e0 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fe f97b 	bl	80015e0 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0bc      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fc:	4b61      	ldr	r3, [pc, #388]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0ee      	beq.n	80032e6 <HAL_RCC_OscConfig+0x33a>
 8003308:	e014      	b.n	8003334 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330a:	f7fe f969 	bl	80015e0 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fe f965 	bl	80015e0 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0a6      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003328:	4b56      	ldr	r3, [pc, #344]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ee      	bne.n	8003312 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4b52      	ldr	r3, [pc, #328]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	4a51      	ldr	r2, [pc, #324]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003344:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8092 	beq.w	8003474 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003350:	4b4c      	ldr	r3, [pc, #304]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b08      	cmp	r3, #8
 800335a:	d05c      	beq.n	8003416 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d141      	bne.n	80033e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003364:	4b48      	ldr	r3, [pc, #288]	; (8003488 <HAL_RCC_OscConfig+0x4dc>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7fe f939 	bl	80015e0 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003372:	f7fe f935 	bl	80015e0 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e078      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003384:	4b3f      	ldr	r3, [pc, #252]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f0      	bne.n	8003372 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	019b      	lsls	r3, r3, #6
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	3b01      	subs	r3, #1
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	4933      	ldr	r1, [pc, #204]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ba:	4b33      	ldr	r3, [pc, #204]	; (8003488 <HAL_RCC_OscConfig+0x4dc>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe f90e 	bl	80015e0 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe f90a 	bl	80015e0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e04d      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033da:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x41c>
 80033e6:	e045      	b.n	8003474 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e8:	4b27      	ldr	r3, [pc, #156]	; (8003488 <HAL_RCC_OscConfig+0x4dc>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7fe f8f7 	bl	80015e0 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f6:	f7fe f8f3 	bl	80015e0 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e036      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003408:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f0      	bne.n	80033f6 <HAL_RCC_OscConfig+0x44a>
 8003414:	e02e      	b.n	8003474 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e029      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_RCC_OscConfig+0x4d8>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	429a      	cmp	r2, r3
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d115      	bne.n	8003470 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800344a:	4013      	ands	r3, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003450:	4293      	cmp	r3, r2
 8003452:	d10d      	bne.n	8003470 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d106      	bne.n	8003470 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40007000 	.word	0x40007000
 8003484:	40023800 	.word	0x40023800
 8003488:	42470060 	.word	0x42470060

0800348c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0cc      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a0:	4b68      	ldr	r3, [pc, #416]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d90c      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b65      	ldr	r3, [pc, #404]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b63      	ldr	r3, [pc, #396]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0b8      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e0:	4b59      	ldr	r3, [pc, #356]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a58      	ldr	r2, [pc, #352]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f8:	4b53      	ldr	r3, [pc, #332]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003504:	4b50      	ldr	r3, [pc, #320]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	494d      	ldr	r1, [pc, #308]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d044      	beq.n	80035ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d119      	bne.n	800356a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e07f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d003      	beq.n	800354a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003546:	2b03      	cmp	r3, #3
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	4b3f      	ldr	r3, [pc, #252]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e06f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355a:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e067      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356a:	4b37      	ldr	r3, [pc, #220]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f023 0203 	bic.w	r2, r3, #3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4934      	ldr	r1, [pc, #208]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	4313      	orrs	r3, r2
 800357a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800357c:	f7fe f830 	bl	80015e0 <HAL_GetTick>
 8003580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	e00a      	b.n	800359a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003584:	f7fe f82c 	bl	80015e0 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e04f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 020c 	and.w	r2, r3, #12
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d1eb      	bne.n	8003584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d20c      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ba:	4b22      	ldr	r3, [pc, #136]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e032      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4916      	ldr	r1, [pc, #88]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	490e      	ldr	r1, [pc, #56]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003612:	f000 f821 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8003616:	4601      	mov	r1, r0
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	5cd3      	ldrb	r3, [r2, r3]
 8003626:	fa21 f303 	lsr.w	r3, r1, r3
 800362a:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fd ff90 	bl	8001558 <HAL_InitTick>

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023c00 	.word	0x40023c00
 8003648:	40023800 	.word	0x40023800
 800364c:	08006220 	.word	0x08006220
 8003650:	20000018 	.word	0x20000018
 8003654:	2000001c 	.word	0x2000001c

08003658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	2300      	movs	r3, #0
 8003668:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800366e:	4b50      	ldr	r3, [pc, #320]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b04      	cmp	r3, #4
 8003678:	d007      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0x32>
 800367a:	2b08      	cmp	r3, #8
 800367c:	d008      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0x38>
 800367e:	2b00      	cmp	r3, #0
 8003680:	f040 808d 	bne.w	800379e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003684:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003686:	60bb      	str	r3, [r7, #8]
       break;
 8003688:	e08c      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800368a:	4b4b      	ldr	r3, [pc, #300]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800368c:	60bb      	str	r3, [r7, #8]
      break;
 800368e:	e089      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003690:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003698:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800369a:	4b45      	ldr	r3, [pc, #276]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x158>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d023      	beq.n	80036ee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a6:	4b42      	ldr	r3, [pc, #264]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	099b      	lsrs	r3, r3, #6
 80036ac:	f04f 0400 	mov.w	r4, #0
 80036b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	ea03 0501 	and.w	r5, r3, r1
 80036bc:	ea04 0602 	and.w	r6, r4, r2
 80036c0:	4a3d      	ldr	r2, [pc, #244]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80036c2:	fb02 f106 	mul.w	r1, r2, r6
 80036c6:	2200      	movs	r2, #0
 80036c8:	fb02 f205 	mul.w	r2, r2, r5
 80036cc:	440a      	add	r2, r1
 80036ce:	493a      	ldr	r1, [pc, #232]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80036d0:	fba5 0101 	umull	r0, r1, r5, r1
 80036d4:	1853      	adds	r3, r2, r1
 80036d6:	4619      	mov	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f04f 0400 	mov.w	r4, #0
 80036de:	461a      	mov	r2, r3
 80036e0:	4623      	mov	r3, r4
 80036e2:	f7fc fdc5 	bl	8000270 <__aeabi_uldivmod>
 80036e6:	4603      	mov	r3, r0
 80036e8:	460c      	mov	r4, r1
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	e049      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ee:	4b30      	ldr	r3, [pc, #192]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	099b      	lsrs	r3, r3, #6
 80036f4:	f04f 0400 	mov.w	r4, #0
 80036f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	ea03 0501 	and.w	r5, r3, r1
 8003704:	ea04 0602 	and.w	r6, r4, r2
 8003708:	4629      	mov	r1, r5
 800370a:	4632      	mov	r2, r6
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	f04f 0400 	mov.w	r4, #0
 8003714:	0154      	lsls	r4, r2, #5
 8003716:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800371a:	014b      	lsls	r3, r1, #5
 800371c:	4619      	mov	r1, r3
 800371e:	4622      	mov	r2, r4
 8003720:	1b49      	subs	r1, r1, r5
 8003722:	eb62 0206 	sbc.w	r2, r2, r6
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	f04f 0400 	mov.w	r4, #0
 800372e:	0194      	lsls	r4, r2, #6
 8003730:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003734:	018b      	lsls	r3, r1, #6
 8003736:	1a5b      	subs	r3, r3, r1
 8003738:	eb64 0402 	sbc.w	r4, r4, r2
 800373c:	f04f 0100 	mov.w	r1, #0
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	00e2      	lsls	r2, r4, #3
 8003746:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800374a:	00d9      	lsls	r1, r3, #3
 800374c:	460b      	mov	r3, r1
 800374e:	4614      	mov	r4, r2
 8003750:	195b      	adds	r3, r3, r5
 8003752:	eb44 0406 	adc.w	r4, r4, r6
 8003756:	f04f 0100 	mov.w	r1, #0
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	02a2      	lsls	r2, r4, #10
 8003760:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003764:	0299      	lsls	r1, r3, #10
 8003766:	460b      	mov	r3, r1
 8003768:	4614      	mov	r4, r2
 800376a:	4618      	mov	r0, r3
 800376c:	4621      	mov	r1, r4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f04f 0400 	mov.w	r4, #0
 8003774:	461a      	mov	r2, r3
 8003776:	4623      	mov	r3, r4
 8003778:	f7fc fd7a 	bl	8000270 <__aeabi_uldivmod>
 800377c:	4603      	mov	r3, r0
 800377e:	460c      	mov	r4, r1
 8003780:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	3301      	adds	r3, #1
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	fbb2 f3f3 	udiv	r3, r2, r3
 800379a:	60bb      	str	r3, [r7, #8]
      break;
 800379c:	e002      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80037a0:	60bb      	str	r3, [r7, #8]
      break;
 80037a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037a4:	68bb      	ldr	r3, [r7, #8]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800
 80037b4:	00f42400 	.word	0x00f42400
 80037b8:	017d7840 	.word	0x017d7840

080037bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000018 	.word	0x20000018

080037d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037d8:	f7ff fff0 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 80037dc:	4601      	mov	r1, r0
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	0a9b      	lsrs	r3, r3, #10
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4a03      	ldr	r2, [pc, #12]	; (80037f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800
 80037f8:	08006230 	.word	0x08006230

080037fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2201      	movs	r2, #1
 800380c:	6839      	ldr	r1, [r7, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fd89 	bl	8004326 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a15      	ldr	r2, [pc, #84]	; (8003870 <HAL_TIM_PWM_Start+0x74>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_TIM_PWM_Start+0x2c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a14      	ldr	r2, [pc, #80]	; (8003874 <HAL_TIM_PWM_Start+0x78>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d101      	bne.n	800382c <HAL_TIM_PWM_Start+0x30>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <HAL_TIM_PWM_Start+0x32>
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d007      	beq.n	8003842 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b06      	cmp	r3, #6
 8003852:	d007      	beq.n	8003864 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40010000 	.word	0x40010000
 8003874:	40010400 	.word	0x40010400

08003878 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e01d      	b.n	80038c6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fd46 	bl	8001330 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f000 fa66 	bl	8003d88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d122      	bne.n	800392a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d11b      	bne.n	800392a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f06f 0202 	mvn.w	r2, #2
 80038fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fa1b 	bl	8003d4c <HAL_TIM_IC_CaptureCallback>
 8003916:	e005      	b.n	8003924 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fa0d 	bl	8003d38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fa1e 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b04      	cmp	r3, #4
 8003936:	d122      	bne.n	800397e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b04      	cmp	r3, #4
 8003944:	d11b      	bne.n	800397e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f06f 0204 	mvn.w	r2, #4
 800394e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f9f1 	bl	8003d4c <HAL_TIM_IC_CaptureCallback>
 800396a:	e005      	b.n	8003978 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f9e3 	bl	8003d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f9f4 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b08      	cmp	r3, #8
 800398a:	d122      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b08      	cmp	r3, #8
 8003998:	d11b      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f06f 0208 	mvn.w	r2, #8
 80039a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2204      	movs	r2, #4
 80039a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f9c7 	bl	8003d4c <HAL_TIM_IC_CaptureCallback>
 80039be:	e005      	b.n	80039cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f9b9 	bl	8003d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f9ca 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d122      	bne.n	8003a26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d11b      	bne.n	8003a26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f06f 0210 	mvn.w	r2, #16
 80039f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2208      	movs	r2, #8
 80039fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f99d 	bl	8003d4c <HAL_TIM_IC_CaptureCallback>
 8003a12:	e005      	b.n	8003a20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f98f 	bl	8003d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f9a0 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d10e      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d107      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f06f 0201 	mvn.w	r2, #1
 8003a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f969 	bl	8003d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	2b80      	cmp	r3, #128	; 0x80
 8003a5e:	d10e      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d107      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fcff 	bl	800447c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d10e      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d107      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f965 	bl	8003d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d10e      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d107      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f06f 0220 	mvn.w	r2, #32
 8003ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fcc9 	bl	8004468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e08a      	b.n	8003c0e <HAL_TIM_IC_ConfigChannel+0x130>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11b      	bne.n	8003b46 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6819      	ldr	r1, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f000 fa59 	bl	8003fd4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 020c 	bic.w	r2, r2, #12
 8003b30:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6999      	ldr	r1, [r3, #24]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	619a      	str	r2, [r3, #24]
 8003b44:	e05a      	b.n	8003bfc <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d11c      	bne.n	8003b86 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f000 fadd 	bl	800411a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b6e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6999      	ldr	r1, [r3, #24]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	619a      	str	r2, [r3, #24]
 8003b84:	e03a      	b.n	8003bfc <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f000 fb2a 	bl	80041f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 020c 	bic.w	r2, r2, #12
 8003bae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69d9      	ldr	r1, [r3, #28]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	61da      	str	r2, [r3, #28]
 8003bc2:	e01b      	b.n	8003bfc <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	6819      	ldr	r1, [r3, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f000 fb4a 	bl	800426c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003be6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69d9      	ldr	r1, [r3, #28]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	021a      	lsls	r2, r3, #8
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_TIM_SlaveConfigSynchro+0x18>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e031      	b.n	8003c92 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003c3e:	6839      	ldr	r1, [r7, #0]
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f941 	bl	8003ec8 <TIM_SlaveTimer_SetConfig>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e018      	b.n	8003c92 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c7e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d831      	bhi.n	8003d14 <HAL_TIM_ReadCapturedValue+0x78>
 8003cb0:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003ced 	.word	0x08003ced
 8003cbc:	08003d15 	.word	0x08003d15
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003d15 	.word	0x08003d15
 8003cc8:	08003cf7 	.word	0x08003cf7
 8003ccc:	08003d15 	.word	0x08003d15
 8003cd0:	08003d15 	.word	0x08003d15
 8003cd4:	08003d15 	.word	0x08003d15
 8003cd8:	08003d01 	.word	0x08003d01
 8003cdc:	08003d15 	.word	0x08003d15
 8003ce0:	08003d15 	.word	0x08003d15
 8003ce4:	08003d15 	.word	0x08003d15
 8003ce8:	08003d0b 	.word	0x08003d0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	60fb      	str	r3, [r7, #12]

      break;
 8003cf4:	e00f      	b.n	8003d16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	60fb      	str	r3, [r7, #12]

      break;
 8003cfe:	e00a      	b.n	8003d16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d06:	60fb      	str	r3, [r7, #12]

      break;
 8003d08:	e005      	b.n	8003d16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	60fb      	str	r3, [r7, #12]

      break;
 8003d12:	e000      	b.n	8003d16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d14:	bf00      	nop
  }

  return tmpreg;
 8003d16:	68fb      	ldr	r3, [r7, #12]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <TIM_Base_SetConfig+0x114>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da6:	d00f      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a3d      	ldr	r2, [pc, #244]	; (8003ea0 <TIM_Base_SetConfig+0x118>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00b      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a3c      	ldr	r2, [pc, #240]	; (8003ea4 <TIM_Base_SetConfig+0x11c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a3b      	ldr	r2, [pc, #236]	; (8003ea8 <TIM_Base_SetConfig+0x120>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0x40>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a3a      	ldr	r2, [pc, #232]	; (8003eac <TIM_Base_SetConfig+0x124>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2f      	ldr	r2, [pc, #188]	; (8003e9c <TIM_Base_SetConfig+0x114>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d02b      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d027      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2c      	ldr	r2, [pc, #176]	; (8003ea0 <TIM_Base_SetConfig+0x118>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d023      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <TIM_Base_SetConfig+0x11c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01f      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <TIM_Base_SetConfig+0x120>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01b      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a29      	ldr	r2, [pc, #164]	; (8003eac <TIM_Base_SetConfig+0x124>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d017      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a28      	ldr	r2, [pc, #160]	; (8003eb0 <TIM_Base_SetConfig+0x128>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a27      	ldr	r2, [pc, #156]	; (8003eb4 <TIM_Base_SetConfig+0x12c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00f      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a26      	ldr	r2, [pc, #152]	; (8003eb8 <TIM_Base_SetConfig+0x130>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00b      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a25      	ldr	r2, [pc, #148]	; (8003ebc <TIM_Base_SetConfig+0x134>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a24      	ldr	r2, [pc, #144]	; (8003ec0 <TIM_Base_SetConfig+0x138>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a23      	ldr	r2, [pc, #140]	; (8003ec4 <TIM_Base_SetConfig+0x13c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d108      	bne.n	8003e4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <TIM_Base_SetConfig+0x114>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0xf8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <TIM_Base_SetConfig+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d103      	bne.n	8003e88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	615a      	str	r2, [r3, #20]
}
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800
 8003ea8:	40000c00 	.word	0x40000c00
 8003eac:	40010400 	.word	0x40010400
 8003eb0:	40014000 	.word	0x40014000
 8003eb4:	40014400 	.word	0x40014400
 8003eb8:	40014800 	.word	0x40014800
 8003ebc:	40001800 	.word	0x40001800
 8003ec0:	40001c00 	.word	0x40001c00
 8003ec4:	40002000 	.word	0x40002000

08003ec8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 0307 	bic.w	r3, r3, #7
 8003ef2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b30      	cmp	r3, #48	; 0x30
 8003f0c:	d05c      	beq.n	8003fc8 <TIM_SlaveTimer_SetConfig+0x100>
 8003f0e:	2b30      	cmp	r3, #48	; 0x30
 8003f10:	d806      	bhi.n	8003f20 <TIM_SlaveTimer_SetConfig+0x58>
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d058      	beq.n	8003fc8 <TIM_SlaveTimer_SetConfig+0x100>
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d056      	beq.n	8003fc8 <TIM_SlaveTimer_SetConfig+0x100>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d054      	beq.n	8003fc8 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8003f1e:	e054      	b.n	8003fca <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003f20:	2b50      	cmp	r3, #80	; 0x50
 8003f22:	d03d      	beq.n	8003fa0 <TIM_SlaveTimer_SetConfig+0xd8>
 8003f24:	2b50      	cmp	r3, #80	; 0x50
 8003f26:	d802      	bhi.n	8003f2e <TIM_SlaveTimer_SetConfig+0x66>
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d010      	beq.n	8003f4e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8003f2c:	e04d      	b.n	8003fca <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003f2e:	2b60      	cmp	r3, #96	; 0x60
 8003f30:	d040      	beq.n	8003fb4 <TIM_SlaveTimer_SetConfig+0xec>
 8003f32:	2b70      	cmp	r3, #112	; 0x70
 8003f34:	d000      	beq.n	8003f38 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8003f36:	e048      	b.n	8003fca <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68d9      	ldr	r1, [r3, #12]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f000 f9cd 	bl	80042e6 <TIM_ETR_SetConfig>
      break;
 8003f4c:	e03d      	b.n	8003fca <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b05      	cmp	r3, #5
 8003f54:	d101      	bne.n	8003f5a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e038      	b.n	8003fcc <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a1a      	ldr	r2, [r3, #32]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f80:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	621a      	str	r2, [r3, #32]
      break;
 8003f9e:	e014      	b.n	8003fca <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	6899      	ldr	r1, [r3, #8]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	461a      	mov	r2, r3
 8003fae:	f000 f885 	bl	80040bc <TIM_TI1_ConfigInputStage>
      break;
 8003fb2:	e00a      	b.n	8003fca <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6899      	ldr	r1, [r3, #8]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f000 f8e7 	bl	8004194 <TIM_TI2_ConfigInputStage>
      break;
 8003fc6:	e000      	b.n	8003fca <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8003fc8:	bf00      	nop
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f023 0201 	bic.w	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4a28      	ldr	r2, [pc, #160]	; (80040a0 <TIM_TI1_SetConfig+0xcc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01b      	beq.n	800403a <TIM_TI1_SetConfig+0x66>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004008:	d017      	beq.n	800403a <TIM_TI1_SetConfig+0x66>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a25      	ldr	r2, [pc, #148]	; (80040a4 <TIM_TI1_SetConfig+0xd0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <TIM_TI1_SetConfig+0x66>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a24      	ldr	r2, [pc, #144]	; (80040a8 <TIM_TI1_SetConfig+0xd4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00f      	beq.n	800403a <TIM_TI1_SetConfig+0x66>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a23      	ldr	r2, [pc, #140]	; (80040ac <TIM_TI1_SetConfig+0xd8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00b      	beq.n	800403a <TIM_TI1_SetConfig+0x66>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <TIM_TI1_SetConfig+0xdc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d007      	beq.n	800403a <TIM_TI1_SetConfig+0x66>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a21      	ldr	r2, [pc, #132]	; (80040b4 <TIM_TI1_SetConfig+0xe0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_TI1_SetConfig+0x66>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a20      	ldr	r2, [pc, #128]	; (80040b8 <TIM_TI1_SetConfig+0xe4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <TIM_TI1_SetConfig+0x6a>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <TIM_TI1_SetConfig+0x6c>
 800403e:	2300      	movs	r3, #0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0303 	bic.w	r3, r3, #3
 800404a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	e003      	b.n	800405e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004064:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	b2db      	uxtb	r3, r3
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f023 030a 	bic.w	r3, r3, #10
 8004078:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f003 030a 	and.w	r3, r3, #10
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800
 80040ac:	40000c00 	.word	0x40000c00
 80040b0:	40010400 	.word	0x40010400
 80040b4:	40014000 	.word	0x40014000
 80040b8:	40001800 	.word	0x40001800

080040bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f023 030a 	bic.w	r3, r3, #10
 80040f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800411a:	b480      	push	{r7}
 800411c:	b087      	sub	sp, #28
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f023 0210 	bic.w	r2, r3, #16
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004146:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004158:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	031b      	lsls	r3, r3, #12
 800415e:	b29b      	uxth	r3, r3
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800416c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	621a      	str	r2, [r3, #32]
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f023 0210 	bic.w	r2, r3, #16
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	031b      	lsls	r3, r3, #12
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f023 0303 	bic.w	r3, r3, #3
 8004220:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004230:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	b2db      	uxtb	r3, r3
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004244:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	621a      	str	r2, [r3, #32]
}
 8004260:	bf00      	nop
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004298:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	031b      	lsls	r3, r3, #12
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80042be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	031b      	lsls	r3, r3, #12
 80042c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b087      	sub	sp, #28
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004300:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	021a      	lsls	r2, r3, #8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	431a      	orrs	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4313      	orrs	r3, r2
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	609a      	str	r2, [r3, #8]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004326:	b480      	push	{r7}
 8004328:	b087      	sub	sp, #28
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2201      	movs	r2, #1
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a1a      	ldr	r2, [r3, #32]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	43db      	mvns	r3, r3
 8004348:	401a      	ands	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1a      	ldr	r2, [r3, #32]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	fa01 f303 	lsl.w	r3, r1, r3
 800435e:	431a      	orrs	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	621a      	str	r2, [r3, #32]
}
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004384:	2302      	movs	r3, #2
 8004386:	e05a      	b.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a21      	ldr	r2, [pc, #132]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d022      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d4:	d01d      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d018      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a18      	ldr	r2, [pc, #96]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a17      	ldr	r2, [pc, #92]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a15      	ldr	r2, [pc, #84]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10c      	bne.n	800442c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	4313      	orrs	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40010000 	.word	0x40010000
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800
 8004458:	40000c00 	.word	0x40000c00
 800445c:	40010400 	.word	0x40010400
 8004460:	40014000 	.word	0x40014000
 8004464:	40001800 	.word	0x40001800

08004468 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <__errno>:
 8004490:	4b01      	ldr	r3, [pc, #4]	; (8004498 <__errno+0x8>)
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000024 	.word	0x20000024

0800449c <__libc_init_array>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	4e0d      	ldr	r6, [pc, #52]	; (80044d4 <__libc_init_array+0x38>)
 80044a0:	4c0d      	ldr	r4, [pc, #52]	; (80044d8 <__libc_init_array+0x3c>)
 80044a2:	1ba4      	subs	r4, r4, r6
 80044a4:	10a4      	asrs	r4, r4, #2
 80044a6:	2500      	movs	r5, #0
 80044a8:	42a5      	cmp	r5, r4
 80044aa:	d109      	bne.n	80044c0 <__libc_init_array+0x24>
 80044ac:	4e0b      	ldr	r6, [pc, #44]	; (80044dc <__libc_init_array+0x40>)
 80044ae:	4c0c      	ldr	r4, [pc, #48]	; (80044e0 <__libc_init_array+0x44>)
 80044b0:	f000 fc26 	bl	8004d00 <_init>
 80044b4:	1ba4      	subs	r4, r4, r6
 80044b6:	10a4      	asrs	r4, r4, #2
 80044b8:	2500      	movs	r5, #0
 80044ba:	42a5      	cmp	r5, r4
 80044bc:	d105      	bne.n	80044ca <__libc_init_array+0x2e>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044c4:	4798      	blx	r3
 80044c6:	3501      	adds	r5, #1
 80044c8:	e7ee      	b.n	80044a8 <__libc_init_array+0xc>
 80044ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044ce:	4798      	blx	r3
 80044d0:	3501      	adds	r5, #1
 80044d2:	e7f2      	b.n	80044ba <__libc_init_array+0x1e>
 80044d4:	08006274 	.word	0x08006274
 80044d8:	08006274 	.word	0x08006274
 80044dc:	08006274 	.word	0x08006274
 80044e0:	08006278 	.word	0x08006278

080044e4 <memset>:
 80044e4:	4402      	add	r2, r0
 80044e6:	4603      	mov	r3, r0
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d100      	bne.n	80044ee <memset+0xa>
 80044ec:	4770      	bx	lr
 80044ee:	f803 1b01 	strb.w	r1, [r3], #1
 80044f2:	e7f9      	b.n	80044e8 <memset+0x4>

080044f4 <siprintf>:
 80044f4:	b40e      	push	{r1, r2, r3}
 80044f6:	b500      	push	{lr}
 80044f8:	b09c      	sub	sp, #112	; 0x70
 80044fa:	ab1d      	add	r3, sp, #116	; 0x74
 80044fc:	9002      	str	r0, [sp, #8]
 80044fe:	9006      	str	r0, [sp, #24]
 8004500:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004504:	4809      	ldr	r0, [pc, #36]	; (800452c <siprintf+0x38>)
 8004506:	9107      	str	r1, [sp, #28]
 8004508:	9104      	str	r1, [sp, #16]
 800450a:	4909      	ldr	r1, [pc, #36]	; (8004530 <siprintf+0x3c>)
 800450c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004510:	9105      	str	r1, [sp, #20]
 8004512:	6800      	ldr	r0, [r0, #0]
 8004514:	9301      	str	r3, [sp, #4]
 8004516:	a902      	add	r1, sp, #8
 8004518:	f000 f866 	bl	80045e8 <_svfiprintf_r>
 800451c:	9b02      	ldr	r3, [sp, #8]
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	b01c      	add	sp, #112	; 0x70
 8004524:	f85d eb04 	ldr.w	lr, [sp], #4
 8004528:	b003      	add	sp, #12
 800452a:	4770      	bx	lr
 800452c:	20000024 	.word	0x20000024
 8004530:	ffff0208 	.word	0xffff0208

08004534 <__ssputs_r>:
 8004534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004538:	688e      	ldr	r6, [r1, #8]
 800453a:	429e      	cmp	r6, r3
 800453c:	4682      	mov	sl, r0
 800453e:	460c      	mov	r4, r1
 8004540:	4690      	mov	r8, r2
 8004542:	4699      	mov	r9, r3
 8004544:	d837      	bhi.n	80045b6 <__ssputs_r+0x82>
 8004546:	898a      	ldrh	r2, [r1, #12]
 8004548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800454c:	d031      	beq.n	80045b2 <__ssputs_r+0x7e>
 800454e:	6825      	ldr	r5, [r4, #0]
 8004550:	6909      	ldr	r1, [r1, #16]
 8004552:	1a6f      	subs	r7, r5, r1
 8004554:	6965      	ldr	r5, [r4, #20]
 8004556:	2302      	movs	r3, #2
 8004558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800455c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004560:	f109 0301 	add.w	r3, r9, #1
 8004564:	443b      	add	r3, r7
 8004566:	429d      	cmp	r5, r3
 8004568:	bf38      	it	cc
 800456a:	461d      	movcc	r5, r3
 800456c:	0553      	lsls	r3, r2, #21
 800456e:	d530      	bpl.n	80045d2 <__ssputs_r+0x9e>
 8004570:	4629      	mov	r1, r5
 8004572:	f000 fb2b 	bl	8004bcc <_malloc_r>
 8004576:	4606      	mov	r6, r0
 8004578:	b950      	cbnz	r0, 8004590 <__ssputs_r+0x5c>
 800457a:	230c      	movs	r3, #12
 800457c:	f8ca 3000 	str.w	r3, [sl]
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004590:	463a      	mov	r2, r7
 8004592:	6921      	ldr	r1, [r4, #16]
 8004594:	f000 faa8 	bl	8004ae8 <memcpy>
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800459e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a2:	81a3      	strh	r3, [r4, #12]
 80045a4:	6126      	str	r6, [r4, #16]
 80045a6:	6165      	str	r5, [r4, #20]
 80045a8:	443e      	add	r6, r7
 80045aa:	1bed      	subs	r5, r5, r7
 80045ac:	6026      	str	r6, [r4, #0]
 80045ae:	60a5      	str	r5, [r4, #8]
 80045b0:	464e      	mov	r6, r9
 80045b2:	454e      	cmp	r6, r9
 80045b4:	d900      	bls.n	80045b8 <__ssputs_r+0x84>
 80045b6:	464e      	mov	r6, r9
 80045b8:	4632      	mov	r2, r6
 80045ba:	4641      	mov	r1, r8
 80045bc:	6820      	ldr	r0, [r4, #0]
 80045be:	f000 fa9e 	bl	8004afe <memmove>
 80045c2:	68a3      	ldr	r3, [r4, #8]
 80045c4:	1b9b      	subs	r3, r3, r6
 80045c6:	60a3      	str	r3, [r4, #8]
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	441e      	add	r6, r3
 80045cc:	6026      	str	r6, [r4, #0]
 80045ce:	2000      	movs	r0, #0
 80045d0:	e7dc      	b.n	800458c <__ssputs_r+0x58>
 80045d2:	462a      	mov	r2, r5
 80045d4:	f000 fb54 	bl	8004c80 <_realloc_r>
 80045d8:	4606      	mov	r6, r0
 80045da:	2800      	cmp	r0, #0
 80045dc:	d1e2      	bne.n	80045a4 <__ssputs_r+0x70>
 80045de:	6921      	ldr	r1, [r4, #16]
 80045e0:	4650      	mov	r0, sl
 80045e2:	f000 faa5 	bl	8004b30 <_free_r>
 80045e6:	e7c8      	b.n	800457a <__ssputs_r+0x46>

080045e8 <_svfiprintf_r>:
 80045e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ec:	461d      	mov	r5, r3
 80045ee:	898b      	ldrh	r3, [r1, #12]
 80045f0:	061f      	lsls	r7, r3, #24
 80045f2:	b09d      	sub	sp, #116	; 0x74
 80045f4:	4680      	mov	r8, r0
 80045f6:	460c      	mov	r4, r1
 80045f8:	4616      	mov	r6, r2
 80045fa:	d50f      	bpl.n	800461c <_svfiprintf_r+0x34>
 80045fc:	690b      	ldr	r3, [r1, #16]
 80045fe:	b96b      	cbnz	r3, 800461c <_svfiprintf_r+0x34>
 8004600:	2140      	movs	r1, #64	; 0x40
 8004602:	f000 fae3 	bl	8004bcc <_malloc_r>
 8004606:	6020      	str	r0, [r4, #0]
 8004608:	6120      	str	r0, [r4, #16]
 800460a:	b928      	cbnz	r0, 8004618 <_svfiprintf_r+0x30>
 800460c:	230c      	movs	r3, #12
 800460e:	f8c8 3000 	str.w	r3, [r8]
 8004612:	f04f 30ff 	mov.w	r0, #4294967295
 8004616:	e0c8      	b.n	80047aa <_svfiprintf_r+0x1c2>
 8004618:	2340      	movs	r3, #64	; 0x40
 800461a:	6163      	str	r3, [r4, #20]
 800461c:	2300      	movs	r3, #0
 800461e:	9309      	str	r3, [sp, #36]	; 0x24
 8004620:	2320      	movs	r3, #32
 8004622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004626:	2330      	movs	r3, #48	; 0x30
 8004628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800462c:	9503      	str	r5, [sp, #12]
 800462e:	f04f 0b01 	mov.w	fp, #1
 8004632:	4637      	mov	r7, r6
 8004634:	463d      	mov	r5, r7
 8004636:	f815 3b01 	ldrb.w	r3, [r5], #1
 800463a:	b10b      	cbz	r3, 8004640 <_svfiprintf_r+0x58>
 800463c:	2b25      	cmp	r3, #37	; 0x25
 800463e:	d13e      	bne.n	80046be <_svfiprintf_r+0xd6>
 8004640:	ebb7 0a06 	subs.w	sl, r7, r6
 8004644:	d00b      	beq.n	800465e <_svfiprintf_r+0x76>
 8004646:	4653      	mov	r3, sl
 8004648:	4632      	mov	r2, r6
 800464a:	4621      	mov	r1, r4
 800464c:	4640      	mov	r0, r8
 800464e:	f7ff ff71 	bl	8004534 <__ssputs_r>
 8004652:	3001      	adds	r0, #1
 8004654:	f000 80a4 	beq.w	80047a0 <_svfiprintf_r+0x1b8>
 8004658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800465a:	4453      	add	r3, sl
 800465c:	9309      	str	r3, [sp, #36]	; 0x24
 800465e:	783b      	ldrb	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 809d 	beq.w	80047a0 <_svfiprintf_r+0x1b8>
 8004666:	2300      	movs	r3, #0
 8004668:	f04f 32ff 	mov.w	r2, #4294967295
 800466c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004670:	9304      	str	r3, [sp, #16]
 8004672:	9307      	str	r3, [sp, #28]
 8004674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004678:	931a      	str	r3, [sp, #104]	; 0x68
 800467a:	462f      	mov	r7, r5
 800467c:	2205      	movs	r2, #5
 800467e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004682:	4850      	ldr	r0, [pc, #320]	; (80047c4 <_svfiprintf_r+0x1dc>)
 8004684:	f7fb fda4 	bl	80001d0 <memchr>
 8004688:	9b04      	ldr	r3, [sp, #16]
 800468a:	b9d0      	cbnz	r0, 80046c2 <_svfiprintf_r+0xda>
 800468c:	06d9      	lsls	r1, r3, #27
 800468e:	bf44      	itt	mi
 8004690:	2220      	movmi	r2, #32
 8004692:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004696:	071a      	lsls	r2, r3, #28
 8004698:	bf44      	itt	mi
 800469a:	222b      	movmi	r2, #43	; 0x2b
 800469c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046a0:	782a      	ldrb	r2, [r5, #0]
 80046a2:	2a2a      	cmp	r2, #42	; 0x2a
 80046a4:	d015      	beq.n	80046d2 <_svfiprintf_r+0xea>
 80046a6:	9a07      	ldr	r2, [sp, #28]
 80046a8:	462f      	mov	r7, r5
 80046aa:	2000      	movs	r0, #0
 80046ac:	250a      	movs	r5, #10
 80046ae:	4639      	mov	r1, r7
 80046b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046b4:	3b30      	subs	r3, #48	; 0x30
 80046b6:	2b09      	cmp	r3, #9
 80046b8:	d94d      	bls.n	8004756 <_svfiprintf_r+0x16e>
 80046ba:	b1b8      	cbz	r0, 80046ec <_svfiprintf_r+0x104>
 80046bc:	e00f      	b.n	80046de <_svfiprintf_r+0xf6>
 80046be:	462f      	mov	r7, r5
 80046c0:	e7b8      	b.n	8004634 <_svfiprintf_r+0x4c>
 80046c2:	4a40      	ldr	r2, [pc, #256]	; (80047c4 <_svfiprintf_r+0x1dc>)
 80046c4:	1a80      	subs	r0, r0, r2
 80046c6:	fa0b f000 	lsl.w	r0, fp, r0
 80046ca:	4318      	orrs	r0, r3
 80046cc:	9004      	str	r0, [sp, #16]
 80046ce:	463d      	mov	r5, r7
 80046d0:	e7d3      	b.n	800467a <_svfiprintf_r+0x92>
 80046d2:	9a03      	ldr	r2, [sp, #12]
 80046d4:	1d11      	adds	r1, r2, #4
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	9103      	str	r1, [sp, #12]
 80046da:	2a00      	cmp	r2, #0
 80046dc:	db01      	blt.n	80046e2 <_svfiprintf_r+0xfa>
 80046de:	9207      	str	r2, [sp, #28]
 80046e0:	e004      	b.n	80046ec <_svfiprintf_r+0x104>
 80046e2:	4252      	negs	r2, r2
 80046e4:	f043 0302 	orr.w	r3, r3, #2
 80046e8:	9207      	str	r2, [sp, #28]
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	783b      	ldrb	r3, [r7, #0]
 80046ee:	2b2e      	cmp	r3, #46	; 0x2e
 80046f0:	d10c      	bne.n	800470c <_svfiprintf_r+0x124>
 80046f2:	787b      	ldrb	r3, [r7, #1]
 80046f4:	2b2a      	cmp	r3, #42	; 0x2a
 80046f6:	d133      	bne.n	8004760 <_svfiprintf_r+0x178>
 80046f8:	9b03      	ldr	r3, [sp, #12]
 80046fa:	1d1a      	adds	r2, r3, #4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	9203      	str	r2, [sp, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	bfb8      	it	lt
 8004704:	f04f 33ff 	movlt.w	r3, #4294967295
 8004708:	3702      	adds	r7, #2
 800470a:	9305      	str	r3, [sp, #20]
 800470c:	4d2e      	ldr	r5, [pc, #184]	; (80047c8 <_svfiprintf_r+0x1e0>)
 800470e:	7839      	ldrb	r1, [r7, #0]
 8004710:	2203      	movs	r2, #3
 8004712:	4628      	mov	r0, r5
 8004714:	f7fb fd5c 	bl	80001d0 <memchr>
 8004718:	b138      	cbz	r0, 800472a <_svfiprintf_r+0x142>
 800471a:	2340      	movs	r3, #64	; 0x40
 800471c:	1b40      	subs	r0, r0, r5
 800471e:	fa03 f000 	lsl.w	r0, r3, r0
 8004722:	9b04      	ldr	r3, [sp, #16]
 8004724:	4303      	orrs	r3, r0
 8004726:	3701      	adds	r7, #1
 8004728:	9304      	str	r3, [sp, #16]
 800472a:	7839      	ldrb	r1, [r7, #0]
 800472c:	4827      	ldr	r0, [pc, #156]	; (80047cc <_svfiprintf_r+0x1e4>)
 800472e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004732:	2206      	movs	r2, #6
 8004734:	1c7e      	adds	r6, r7, #1
 8004736:	f7fb fd4b 	bl	80001d0 <memchr>
 800473a:	2800      	cmp	r0, #0
 800473c:	d038      	beq.n	80047b0 <_svfiprintf_r+0x1c8>
 800473e:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <_svfiprintf_r+0x1e8>)
 8004740:	bb13      	cbnz	r3, 8004788 <_svfiprintf_r+0x1a0>
 8004742:	9b03      	ldr	r3, [sp, #12]
 8004744:	3307      	adds	r3, #7
 8004746:	f023 0307 	bic.w	r3, r3, #7
 800474a:	3308      	adds	r3, #8
 800474c:	9303      	str	r3, [sp, #12]
 800474e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004750:	444b      	add	r3, r9
 8004752:	9309      	str	r3, [sp, #36]	; 0x24
 8004754:	e76d      	b.n	8004632 <_svfiprintf_r+0x4a>
 8004756:	fb05 3202 	mla	r2, r5, r2, r3
 800475a:	2001      	movs	r0, #1
 800475c:	460f      	mov	r7, r1
 800475e:	e7a6      	b.n	80046ae <_svfiprintf_r+0xc6>
 8004760:	2300      	movs	r3, #0
 8004762:	3701      	adds	r7, #1
 8004764:	9305      	str	r3, [sp, #20]
 8004766:	4619      	mov	r1, r3
 8004768:	250a      	movs	r5, #10
 800476a:	4638      	mov	r0, r7
 800476c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004770:	3a30      	subs	r2, #48	; 0x30
 8004772:	2a09      	cmp	r2, #9
 8004774:	d903      	bls.n	800477e <_svfiprintf_r+0x196>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0c8      	beq.n	800470c <_svfiprintf_r+0x124>
 800477a:	9105      	str	r1, [sp, #20]
 800477c:	e7c6      	b.n	800470c <_svfiprintf_r+0x124>
 800477e:	fb05 2101 	mla	r1, r5, r1, r2
 8004782:	2301      	movs	r3, #1
 8004784:	4607      	mov	r7, r0
 8004786:	e7f0      	b.n	800476a <_svfiprintf_r+0x182>
 8004788:	ab03      	add	r3, sp, #12
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	4622      	mov	r2, r4
 800478e:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <_svfiprintf_r+0x1ec>)
 8004790:	a904      	add	r1, sp, #16
 8004792:	4640      	mov	r0, r8
 8004794:	f3af 8000 	nop.w
 8004798:	f1b0 3fff 	cmp.w	r0, #4294967295
 800479c:	4681      	mov	r9, r0
 800479e:	d1d6      	bne.n	800474e <_svfiprintf_r+0x166>
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	065b      	lsls	r3, r3, #25
 80047a4:	f53f af35 	bmi.w	8004612 <_svfiprintf_r+0x2a>
 80047a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047aa:	b01d      	add	sp, #116	; 0x74
 80047ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b0:	ab03      	add	r3, sp, #12
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	4622      	mov	r2, r4
 80047b6:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <_svfiprintf_r+0x1ec>)
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	4640      	mov	r0, r8
 80047bc:	f000 f882 	bl	80048c4 <_printf_i>
 80047c0:	e7ea      	b.n	8004798 <_svfiprintf_r+0x1b0>
 80047c2:	bf00      	nop
 80047c4:	08006238 	.word	0x08006238
 80047c8:	0800623e 	.word	0x0800623e
 80047cc:	08006242 	.word	0x08006242
 80047d0:	00000000 	.word	0x00000000
 80047d4:	08004535 	.word	0x08004535

080047d8 <_printf_common>:
 80047d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047dc:	4691      	mov	r9, r2
 80047de:	461f      	mov	r7, r3
 80047e0:	688a      	ldr	r2, [r1, #8]
 80047e2:	690b      	ldr	r3, [r1, #16]
 80047e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047e8:	4293      	cmp	r3, r2
 80047ea:	bfb8      	it	lt
 80047ec:	4613      	movlt	r3, r2
 80047ee:	f8c9 3000 	str.w	r3, [r9]
 80047f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047f6:	4606      	mov	r6, r0
 80047f8:	460c      	mov	r4, r1
 80047fa:	b112      	cbz	r2, 8004802 <_printf_common+0x2a>
 80047fc:	3301      	adds	r3, #1
 80047fe:	f8c9 3000 	str.w	r3, [r9]
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	0699      	lsls	r1, r3, #26
 8004806:	bf42      	ittt	mi
 8004808:	f8d9 3000 	ldrmi.w	r3, [r9]
 800480c:	3302      	addmi	r3, #2
 800480e:	f8c9 3000 	strmi.w	r3, [r9]
 8004812:	6825      	ldr	r5, [r4, #0]
 8004814:	f015 0506 	ands.w	r5, r5, #6
 8004818:	d107      	bne.n	800482a <_printf_common+0x52>
 800481a:	f104 0a19 	add.w	sl, r4, #25
 800481e:	68e3      	ldr	r3, [r4, #12]
 8004820:	f8d9 2000 	ldr.w	r2, [r9]
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	42ab      	cmp	r3, r5
 8004828:	dc28      	bgt.n	800487c <_printf_common+0xa4>
 800482a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800482e:	6822      	ldr	r2, [r4, #0]
 8004830:	3300      	adds	r3, #0
 8004832:	bf18      	it	ne
 8004834:	2301      	movne	r3, #1
 8004836:	0692      	lsls	r2, r2, #26
 8004838:	d42d      	bmi.n	8004896 <_printf_common+0xbe>
 800483a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800483e:	4639      	mov	r1, r7
 8004840:	4630      	mov	r0, r6
 8004842:	47c0      	blx	r8
 8004844:	3001      	adds	r0, #1
 8004846:	d020      	beq.n	800488a <_printf_common+0xb2>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	68e5      	ldr	r5, [r4, #12]
 800484c:	f8d9 2000 	ldr.w	r2, [r9]
 8004850:	f003 0306 	and.w	r3, r3, #6
 8004854:	2b04      	cmp	r3, #4
 8004856:	bf08      	it	eq
 8004858:	1aad      	subeq	r5, r5, r2
 800485a:	68a3      	ldr	r3, [r4, #8]
 800485c:	6922      	ldr	r2, [r4, #16]
 800485e:	bf0c      	ite	eq
 8004860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004864:	2500      	movne	r5, #0
 8004866:	4293      	cmp	r3, r2
 8004868:	bfc4      	itt	gt
 800486a:	1a9b      	subgt	r3, r3, r2
 800486c:	18ed      	addgt	r5, r5, r3
 800486e:	f04f 0900 	mov.w	r9, #0
 8004872:	341a      	adds	r4, #26
 8004874:	454d      	cmp	r5, r9
 8004876:	d11a      	bne.n	80048ae <_printf_common+0xd6>
 8004878:	2000      	movs	r0, #0
 800487a:	e008      	b.n	800488e <_printf_common+0xb6>
 800487c:	2301      	movs	r3, #1
 800487e:	4652      	mov	r2, sl
 8004880:	4639      	mov	r1, r7
 8004882:	4630      	mov	r0, r6
 8004884:	47c0      	blx	r8
 8004886:	3001      	adds	r0, #1
 8004888:	d103      	bne.n	8004892 <_printf_common+0xba>
 800488a:	f04f 30ff 	mov.w	r0, #4294967295
 800488e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004892:	3501      	adds	r5, #1
 8004894:	e7c3      	b.n	800481e <_printf_common+0x46>
 8004896:	18e1      	adds	r1, r4, r3
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	2030      	movs	r0, #48	; 0x30
 800489c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048a0:	4422      	add	r2, r4
 80048a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048aa:	3302      	adds	r3, #2
 80048ac:	e7c5      	b.n	800483a <_printf_common+0x62>
 80048ae:	2301      	movs	r3, #1
 80048b0:	4622      	mov	r2, r4
 80048b2:	4639      	mov	r1, r7
 80048b4:	4630      	mov	r0, r6
 80048b6:	47c0      	blx	r8
 80048b8:	3001      	adds	r0, #1
 80048ba:	d0e6      	beq.n	800488a <_printf_common+0xb2>
 80048bc:	f109 0901 	add.w	r9, r9, #1
 80048c0:	e7d8      	b.n	8004874 <_printf_common+0x9c>
	...

080048c4 <_printf_i>:
 80048c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80048cc:	460c      	mov	r4, r1
 80048ce:	7e09      	ldrb	r1, [r1, #24]
 80048d0:	b085      	sub	sp, #20
 80048d2:	296e      	cmp	r1, #110	; 0x6e
 80048d4:	4617      	mov	r7, r2
 80048d6:	4606      	mov	r6, r0
 80048d8:	4698      	mov	r8, r3
 80048da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048dc:	f000 80b3 	beq.w	8004a46 <_printf_i+0x182>
 80048e0:	d822      	bhi.n	8004928 <_printf_i+0x64>
 80048e2:	2963      	cmp	r1, #99	; 0x63
 80048e4:	d036      	beq.n	8004954 <_printf_i+0x90>
 80048e6:	d80a      	bhi.n	80048fe <_printf_i+0x3a>
 80048e8:	2900      	cmp	r1, #0
 80048ea:	f000 80b9 	beq.w	8004a60 <_printf_i+0x19c>
 80048ee:	2958      	cmp	r1, #88	; 0x58
 80048f0:	f000 8083 	beq.w	80049fa <_printf_i+0x136>
 80048f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80048fc:	e032      	b.n	8004964 <_printf_i+0xa0>
 80048fe:	2964      	cmp	r1, #100	; 0x64
 8004900:	d001      	beq.n	8004906 <_printf_i+0x42>
 8004902:	2969      	cmp	r1, #105	; 0x69
 8004904:	d1f6      	bne.n	80048f4 <_printf_i+0x30>
 8004906:	6820      	ldr	r0, [r4, #0]
 8004908:	6813      	ldr	r3, [r2, #0]
 800490a:	0605      	lsls	r5, r0, #24
 800490c:	f103 0104 	add.w	r1, r3, #4
 8004910:	d52a      	bpl.n	8004968 <_printf_i+0xa4>
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6011      	str	r1, [r2, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	da03      	bge.n	8004922 <_printf_i+0x5e>
 800491a:	222d      	movs	r2, #45	; 0x2d
 800491c:	425b      	negs	r3, r3
 800491e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004922:	486f      	ldr	r0, [pc, #444]	; (8004ae0 <_printf_i+0x21c>)
 8004924:	220a      	movs	r2, #10
 8004926:	e039      	b.n	800499c <_printf_i+0xd8>
 8004928:	2973      	cmp	r1, #115	; 0x73
 800492a:	f000 809d 	beq.w	8004a68 <_printf_i+0x1a4>
 800492e:	d808      	bhi.n	8004942 <_printf_i+0x7e>
 8004930:	296f      	cmp	r1, #111	; 0x6f
 8004932:	d020      	beq.n	8004976 <_printf_i+0xb2>
 8004934:	2970      	cmp	r1, #112	; 0x70
 8004936:	d1dd      	bne.n	80048f4 <_printf_i+0x30>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	f043 0320 	orr.w	r3, r3, #32
 800493e:	6023      	str	r3, [r4, #0]
 8004940:	e003      	b.n	800494a <_printf_i+0x86>
 8004942:	2975      	cmp	r1, #117	; 0x75
 8004944:	d017      	beq.n	8004976 <_printf_i+0xb2>
 8004946:	2978      	cmp	r1, #120	; 0x78
 8004948:	d1d4      	bne.n	80048f4 <_printf_i+0x30>
 800494a:	2378      	movs	r3, #120	; 0x78
 800494c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004950:	4864      	ldr	r0, [pc, #400]	; (8004ae4 <_printf_i+0x220>)
 8004952:	e055      	b.n	8004a00 <_printf_i+0x13c>
 8004954:	6813      	ldr	r3, [r2, #0]
 8004956:	1d19      	adds	r1, r3, #4
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6011      	str	r1, [r2, #0]
 800495c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004964:	2301      	movs	r3, #1
 8004966:	e08c      	b.n	8004a82 <_printf_i+0x1be>
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6011      	str	r1, [r2, #0]
 800496c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004970:	bf18      	it	ne
 8004972:	b21b      	sxthne	r3, r3
 8004974:	e7cf      	b.n	8004916 <_printf_i+0x52>
 8004976:	6813      	ldr	r3, [r2, #0]
 8004978:	6825      	ldr	r5, [r4, #0]
 800497a:	1d18      	adds	r0, r3, #4
 800497c:	6010      	str	r0, [r2, #0]
 800497e:	0628      	lsls	r0, r5, #24
 8004980:	d501      	bpl.n	8004986 <_printf_i+0xc2>
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	e002      	b.n	800498c <_printf_i+0xc8>
 8004986:	0668      	lsls	r0, r5, #25
 8004988:	d5fb      	bpl.n	8004982 <_printf_i+0xbe>
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	4854      	ldr	r0, [pc, #336]	; (8004ae0 <_printf_i+0x21c>)
 800498e:	296f      	cmp	r1, #111	; 0x6f
 8004990:	bf14      	ite	ne
 8004992:	220a      	movne	r2, #10
 8004994:	2208      	moveq	r2, #8
 8004996:	2100      	movs	r1, #0
 8004998:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800499c:	6865      	ldr	r5, [r4, #4]
 800499e:	60a5      	str	r5, [r4, #8]
 80049a0:	2d00      	cmp	r5, #0
 80049a2:	f2c0 8095 	blt.w	8004ad0 <_printf_i+0x20c>
 80049a6:	6821      	ldr	r1, [r4, #0]
 80049a8:	f021 0104 	bic.w	r1, r1, #4
 80049ac:	6021      	str	r1, [r4, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d13d      	bne.n	8004a2e <_printf_i+0x16a>
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	f040 808e 	bne.w	8004ad4 <_printf_i+0x210>
 80049b8:	4665      	mov	r5, ip
 80049ba:	2a08      	cmp	r2, #8
 80049bc:	d10b      	bne.n	80049d6 <_printf_i+0x112>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	07db      	lsls	r3, r3, #31
 80049c2:	d508      	bpl.n	80049d6 <_printf_i+0x112>
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	6862      	ldr	r2, [r4, #4]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	bfde      	ittt	le
 80049cc:	2330      	movle	r3, #48	; 0x30
 80049ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049d6:	ebac 0305 	sub.w	r3, ip, r5
 80049da:	6123      	str	r3, [r4, #16]
 80049dc:	f8cd 8000 	str.w	r8, [sp]
 80049e0:	463b      	mov	r3, r7
 80049e2:	aa03      	add	r2, sp, #12
 80049e4:	4621      	mov	r1, r4
 80049e6:	4630      	mov	r0, r6
 80049e8:	f7ff fef6 	bl	80047d8 <_printf_common>
 80049ec:	3001      	adds	r0, #1
 80049ee:	d14d      	bne.n	8004a8c <_printf_i+0x1c8>
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295
 80049f4:	b005      	add	sp, #20
 80049f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049fa:	4839      	ldr	r0, [pc, #228]	; (8004ae0 <_printf_i+0x21c>)
 80049fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a00:	6813      	ldr	r3, [r2, #0]
 8004a02:	6821      	ldr	r1, [r4, #0]
 8004a04:	1d1d      	adds	r5, r3, #4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6015      	str	r5, [r2, #0]
 8004a0a:	060a      	lsls	r2, r1, #24
 8004a0c:	d50b      	bpl.n	8004a26 <_printf_i+0x162>
 8004a0e:	07ca      	lsls	r2, r1, #31
 8004a10:	bf44      	itt	mi
 8004a12:	f041 0120 	orrmi.w	r1, r1, #32
 8004a16:	6021      	strmi	r1, [r4, #0]
 8004a18:	b91b      	cbnz	r3, 8004a22 <_printf_i+0x15e>
 8004a1a:	6822      	ldr	r2, [r4, #0]
 8004a1c:	f022 0220 	bic.w	r2, r2, #32
 8004a20:	6022      	str	r2, [r4, #0]
 8004a22:	2210      	movs	r2, #16
 8004a24:	e7b7      	b.n	8004996 <_printf_i+0xd2>
 8004a26:	064d      	lsls	r5, r1, #25
 8004a28:	bf48      	it	mi
 8004a2a:	b29b      	uxthmi	r3, r3
 8004a2c:	e7ef      	b.n	8004a0e <_printf_i+0x14a>
 8004a2e:	4665      	mov	r5, ip
 8004a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a34:	fb02 3311 	mls	r3, r2, r1, r3
 8004a38:	5cc3      	ldrb	r3, [r0, r3]
 8004a3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a3e:	460b      	mov	r3, r1
 8004a40:	2900      	cmp	r1, #0
 8004a42:	d1f5      	bne.n	8004a30 <_printf_i+0x16c>
 8004a44:	e7b9      	b.n	80049ba <_printf_i+0xf6>
 8004a46:	6813      	ldr	r3, [r2, #0]
 8004a48:	6825      	ldr	r5, [r4, #0]
 8004a4a:	6961      	ldr	r1, [r4, #20]
 8004a4c:	1d18      	adds	r0, r3, #4
 8004a4e:	6010      	str	r0, [r2, #0]
 8004a50:	0628      	lsls	r0, r5, #24
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	d501      	bpl.n	8004a5a <_printf_i+0x196>
 8004a56:	6019      	str	r1, [r3, #0]
 8004a58:	e002      	b.n	8004a60 <_printf_i+0x19c>
 8004a5a:	066a      	lsls	r2, r5, #25
 8004a5c:	d5fb      	bpl.n	8004a56 <_printf_i+0x192>
 8004a5e:	8019      	strh	r1, [r3, #0]
 8004a60:	2300      	movs	r3, #0
 8004a62:	6123      	str	r3, [r4, #16]
 8004a64:	4665      	mov	r5, ip
 8004a66:	e7b9      	b.n	80049dc <_printf_i+0x118>
 8004a68:	6813      	ldr	r3, [r2, #0]
 8004a6a:	1d19      	adds	r1, r3, #4
 8004a6c:	6011      	str	r1, [r2, #0]
 8004a6e:	681d      	ldr	r5, [r3, #0]
 8004a70:	6862      	ldr	r2, [r4, #4]
 8004a72:	2100      	movs	r1, #0
 8004a74:	4628      	mov	r0, r5
 8004a76:	f7fb fbab 	bl	80001d0 <memchr>
 8004a7a:	b108      	cbz	r0, 8004a80 <_printf_i+0x1bc>
 8004a7c:	1b40      	subs	r0, r0, r5
 8004a7e:	6060      	str	r0, [r4, #4]
 8004a80:	6863      	ldr	r3, [r4, #4]
 8004a82:	6123      	str	r3, [r4, #16]
 8004a84:	2300      	movs	r3, #0
 8004a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a8a:	e7a7      	b.n	80049dc <_printf_i+0x118>
 8004a8c:	6923      	ldr	r3, [r4, #16]
 8004a8e:	462a      	mov	r2, r5
 8004a90:	4639      	mov	r1, r7
 8004a92:	4630      	mov	r0, r6
 8004a94:	47c0      	blx	r8
 8004a96:	3001      	adds	r0, #1
 8004a98:	d0aa      	beq.n	80049f0 <_printf_i+0x12c>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	079b      	lsls	r3, r3, #30
 8004a9e:	d413      	bmi.n	8004ac8 <_printf_i+0x204>
 8004aa0:	68e0      	ldr	r0, [r4, #12]
 8004aa2:	9b03      	ldr	r3, [sp, #12]
 8004aa4:	4298      	cmp	r0, r3
 8004aa6:	bfb8      	it	lt
 8004aa8:	4618      	movlt	r0, r3
 8004aaa:	e7a3      	b.n	80049f4 <_printf_i+0x130>
 8004aac:	2301      	movs	r3, #1
 8004aae:	464a      	mov	r2, r9
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	47c0      	blx	r8
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d09a      	beq.n	80049f0 <_printf_i+0x12c>
 8004aba:	3501      	adds	r5, #1
 8004abc:	68e3      	ldr	r3, [r4, #12]
 8004abe:	9a03      	ldr	r2, [sp, #12]
 8004ac0:	1a9b      	subs	r3, r3, r2
 8004ac2:	42ab      	cmp	r3, r5
 8004ac4:	dcf2      	bgt.n	8004aac <_printf_i+0x1e8>
 8004ac6:	e7eb      	b.n	8004aa0 <_printf_i+0x1dc>
 8004ac8:	2500      	movs	r5, #0
 8004aca:	f104 0919 	add.w	r9, r4, #25
 8004ace:	e7f5      	b.n	8004abc <_printf_i+0x1f8>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ac      	bne.n	8004a2e <_printf_i+0x16a>
 8004ad4:	7803      	ldrb	r3, [r0, #0]
 8004ad6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ada:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ade:	e76c      	b.n	80049ba <_printf_i+0xf6>
 8004ae0:	08006249 	.word	0x08006249
 8004ae4:	0800625a 	.word	0x0800625a

08004ae8 <memcpy>:
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	1e43      	subs	r3, r0, #1
 8004aec:	440a      	add	r2, r1
 8004aee:	4291      	cmp	r1, r2
 8004af0:	d100      	bne.n	8004af4 <memcpy+0xc>
 8004af2:	bd10      	pop	{r4, pc}
 8004af4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004af8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004afc:	e7f7      	b.n	8004aee <memcpy+0x6>

08004afe <memmove>:
 8004afe:	4288      	cmp	r0, r1
 8004b00:	b510      	push	{r4, lr}
 8004b02:	eb01 0302 	add.w	r3, r1, r2
 8004b06:	d807      	bhi.n	8004b18 <memmove+0x1a>
 8004b08:	1e42      	subs	r2, r0, #1
 8004b0a:	4299      	cmp	r1, r3
 8004b0c:	d00a      	beq.n	8004b24 <memmove+0x26>
 8004b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b12:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004b16:	e7f8      	b.n	8004b0a <memmove+0xc>
 8004b18:	4283      	cmp	r3, r0
 8004b1a:	d9f5      	bls.n	8004b08 <memmove+0xa>
 8004b1c:	1881      	adds	r1, r0, r2
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	42d3      	cmn	r3, r2
 8004b22:	d100      	bne.n	8004b26 <memmove+0x28>
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b2a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004b2e:	e7f7      	b.n	8004b20 <memmove+0x22>

08004b30 <_free_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4605      	mov	r5, r0
 8004b34:	2900      	cmp	r1, #0
 8004b36:	d045      	beq.n	8004bc4 <_free_r+0x94>
 8004b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b3c:	1f0c      	subs	r4, r1, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bfb8      	it	lt
 8004b42:	18e4      	addlt	r4, r4, r3
 8004b44:	f000 f8d2 	bl	8004cec <__malloc_lock>
 8004b48:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <_free_r+0x98>)
 8004b4a:	6813      	ldr	r3, [r2, #0]
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	b933      	cbnz	r3, 8004b5e <_free_r+0x2e>
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	6014      	str	r4, [r2, #0]
 8004b54:	4628      	mov	r0, r5
 8004b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b5a:	f000 b8c8 	b.w	8004cee <__malloc_unlock>
 8004b5e:	42a3      	cmp	r3, r4
 8004b60:	d90c      	bls.n	8004b7c <_free_r+0x4c>
 8004b62:	6821      	ldr	r1, [r4, #0]
 8004b64:	1862      	adds	r2, r4, r1
 8004b66:	4293      	cmp	r3, r2
 8004b68:	bf04      	itt	eq
 8004b6a:	681a      	ldreq	r2, [r3, #0]
 8004b6c:	685b      	ldreq	r3, [r3, #4]
 8004b6e:	6063      	str	r3, [r4, #4]
 8004b70:	bf04      	itt	eq
 8004b72:	1852      	addeq	r2, r2, r1
 8004b74:	6022      	streq	r2, [r4, #0]
 8004b76:	6004      	str	r4, [r0, #0]
 8004b78:	e7ec      	b.n	8004b54 <_free_r+0x24>
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	b10a      	cbz	r2, 8004b84 <_free_r+0x54>
 8004b80:	42a2      	cmp	r2, r4
 8004b82:	d9fa      	bls.n	8004b7a <_free_r+0x4a>
 8004b84:	6819      	ldr	r1, [r3, #0]
 8004b86:	1858      	adds	r0, r3, r1
 8004b88:	42a0      	cmp	r0, r4
 8004b8a:	d10b      	bne.n	8004ba4 <_free_r+0x74>
 8004b8c:	6820      	ldr	r0, [r4, #0]
 8004b8e:	4401      	add	r1, r0
 8004b90:	1858      	adds	r0, r3, r1
 8004b92:	4282      	cmp	r2, r0
 8004b94:	6019      	str	r1, [r3, #0]
 8004b96:	d1dd      	bne.n	8004b54 <_free_r+0x24>
 8004b98:	6810      	ldr	r0, [r2, #0]
 8004b9a:	6852      	ldr	r2, [r2, #4]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	4401      	add	r1, r0
 8004ba0:	6019      	str	r1, [r3, #0]
 8004ba2:	e7d7      	b.n	8004b54 <_free_r+0x24>
 8004ba4:	d902      	bls.n	8004bac <_free_r+0x7c>
 8004ba6:	230c      	movs	r3, #12
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	e7d3      	b.n	8004b54 <_free_r+0x24>
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	1821      	adds	r1, r4, r0
 8004bb0:	428a      	cmp	r2, r1
 8004bb2:	bf04      	itt	eq
 8004bb4:	6811      	ldreq	r1, [r2, #0]
 8004bb6:	6852      	ldreq	r2, [r2, #4]
 8004bb8:	6062      	str	r2, [r4, #4]
 8004bba:	bf04      	itt	eq
 8004bbc:	1809      	addeq	r1, r1, r0
 8004bbe:	6021      	streq	r1, [r4, #0]
 8004bc0:	605c      	str	r4, [r3, #4]
 8004bc2:	e7c7      	b.n	8004b54 <_free_r+0x24>
 8004bc4:	bd38      	pop	{r3, r4, r5, pc}
 8004bc6:	bf00      	nop
 8004bc8:	200004bc 	.word	0x200004bc

08004bcc <_malloc_r>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	1ccd      	adds	r5, r1, #3
 8004bd0:	f025 0503 	bic.w	r5, r5, #3
 8004bd4:	3508      	adds	r5, #8
 8004bd6:	2d0c      	cmp	r5, #12
 8004bd8:	bf38      	it	cc
 8004bda:	250c      	movcc	r5, #12
 8004bdc:	2d00      	cmp	r5, #0
 8004bde:	4606      	mov	r6, r0
 8004be0:	db01      	blt.n	8004be6 <_malloc_r+0x1a>
 8004be2:	42a9      	cmp	r1, r5
 8004be4:	d903      	bls.n	8004bee <_malloc_r+0x22>
 8004be6:	230c      	movs	r3, #12
 8004be8:	6033      	str	r3, [r6, #0]
 8004bea:	2000      	movs	r0, #0
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
 8004bee:	f000 f87d 	bl	8004cec <__malloc_lock>
 8004bf2:	4a21      	ldr	r2, [pc, #132]	; (8004c78 <_malloc_r+0xac>)
 8004bf4:	6814      	ldr	r4, [r2, #0]
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	b991      	cbnz	r1, 8004c20 <_malloc_r+0x54>
 8004bfa:	4c20      	ldr	r4, [pc, #128]	; (8004c7c <_malloc_r+0xb0>)
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	b91b      	cbnz	r3, 8004c08 <_malloc_r+0x3c>
 8004c00:	4630      	mov	r0, r6
 8004c02:	f000 f863 	bl	8004ccc <_sbrk_r>
 8004c06:	6020      	str	r0, [r4, #0]
 8004c08:	4629      	mov	r1, r5
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f000 f85e 	bl	8004ccc <_sbrk_r>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d124      	bne.n	8004c5e <_malloc_r+0x92>
 8004c14:	230c      	movs	r3, #12
 8004c16:	6033      	str	r3, [r6, #0]
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 f868 	bl	8004cee <__malloc_unlock>
 8004c1e:	e7e4      	b.n	8004bea <_malloc_r+0x1e>
 8004c20:	680b      	ldr	r3, [r1, #0]
 8004c22:	1b5b      	subs	r3, r3, r5
 8004c24:	d418      	bmi.n	8004c58 <_malloc_r+0x8c>
 8004c26:	2b0b      	cmp	r3, #11
 8004c28:	d90f      	bls.n	8004c4a <_malloc_r+0x7e>
 8004c2a:	600b      	str	r3, [r1, #0]
 8004c2c:	50cd      	str	r5, [r1, r3]
 8004c2e:	18cc      	adds	r4, r1, r3
 8004c30:	4630      	mov	r0, r6
 8004c32:	f000 f85c 	bl	8004cee <__malloc_unlock>
 8004c36:	f104 000b 	add.w	r0, r4, #11
 8004c3a:	1d23      	adds	r3, r4, #4
 8004c3c:	f020 0007 	bic.w	r0, r0, #7
 8004c40:	1ac3      	subs	r3, r0, r3
 8004c42:	d0d3      	beq.n	8004bec <_malloc_r+0x20>
 8004c44:	425a      	negs	r2, r3
 8004c46:	50e2      	str	r2, [r4, r3]
 8004c48:	e7d0      	b.n	8004bec <_malloc_r+0x20>
 8004c4a:	428c      	cmp	r4, r1
 8004c4c:	684b      	ldr	r3, [r1, #4]
 8004c4e:	bf16      	itet	ne
 8004c50:	6063      	strne	r3, [r4, #4]
 8004c52:	6013      	streq	r3, [r2, #0]
 8004c54:	460c      	movne	r4, r1
 8004c56:	e7eb      	b.n	8004c30 <_malloc_r+0x64>
 8004c58:	460c      	mov	r4, r1
 8004c5a:	6849      	ldr	r1, [r1, #4]
 8004c5c:	e7cc      	b.n	8004bf8 <_malloc_r+0x2c>
 8004c5e:	1cc4      	adds	r4, r0, #3
 8004c60:	f024 0403 	bic.w	r4, r4, #3
 8004c64:	42a0      	cmp	r0, r4
 8004c66:	d005      	beq.n	8004c74 <_malloc_r+0xa8>
 8004c68:	1a21      	subs	r1, r4, r0
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f000 f82e 	bl	8004ccc <_sbrk_r>
 8004c70:	3001      	adds	r0, #1
 8004c72:	d0cf      	beq.n	8004c14 <_malloc_r+0x48>
 8004c74:	6025      	str	r5, [r4, #0]
 8004c76:	e7db      	b.n	8004c30 <_malloc_r+0x64>
 8004c78:	200004bc 	.word	0x200004bc
 8004c7c:	200004c0 	.word	0x200004c0

08004c80 <_realloc_r>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	4607      	mov	r7, r0
 8004c84:	4614      	mov	r4, r2
 8004c86:	460e      	mov	r6, r1
 8004c88:	b921      	cbnz	r1, 8004c94 <_realloc_r+0x14>
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c90:	f7ff bf9c 	b.w	8004bcc <_malloc_r>
 8004c94:	b922      	cbnz	r2, 8004ca0 <_realloc_r+0x20>
 8004c96:	f7ff ff4b 	bl	8004b30 <_free_r>
 8004c9a:	4625      	mov	r5, r4
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca0:	f000 f826 	bl	8004cf0 <_malloc_usable_size_r>
 8004ca4:	42a0      	cmp	r0, r4
 8004ca6:	d20f      	bcs.n	8004cc8 <_realloc_r+0x48>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4638      	mov	r0, r7
 8004cac:	f7ff ff8e 	bl	8004bcc <_malloc_r>
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d0f2      	beq.n	8004c9c <_realloc_r+0x1c>
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4622      	mov	r2, r4
 8004cba:	f7ff ff15 	bl	8004ae8 <memcpy>
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	f7ff ff35 	bl	8004b30 <_free_r>
 8004cc6:	e7e9      	b.n	8004c9c <_realloc_r+0x1c>
 8004cc8:	4635      	mov	r5, r6
 8004cca:	e7e7      	b.n	8004c9c <_realloc_r+0x1c>

08004ccc <_sbrk_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4c06      	ldr	r4, [pc, #24]	; (8004ce8 <_sbrk_r+0x1c>)
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	f7fc fbb0 	bl	800143c <_sbrk>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d102      	bne.n	8004ce6 <_sbrk_r+0x1a>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	b103      	cbz	r3, 8004ce6 <_sbrk_r+0x1a>
 8004ce4:	602b      	str	r3, [r5, #0]
 8004ce6:	bd38      	pop	{r3, r4, r5, pc}
 8004ce8:	200005f8 	.word	0x200005f8

08004cec <__malloc_lock>:
 8004cec:	4770      	bx	lr

08004cee <__malloc_unlock>:
 8004cee:	4770      	bx	lr

08004cf0 <_malloc_usable_size_r>:
 8004cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cf4:	1f18      	subs	r0, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bfbc      	itt	lt
 8004cfa:	580b      	ldrlt	r3, [r1, r0]
 8004cfc:	18c0      	addlt	r0, r0, r3
 8004cfe:	4770      	bx	lr

08004d00 <_init>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	bf00      	nop
 8004d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d06:	bc08      	pop	{r3}
 8004d08:	469e      	mov	lr, r3
 8004d0a:	4770      	bx	lr

08004d0c <_fini>:
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	bf00      	nop
 8004d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d12:	bc08      	pop	{r3}
 8004d14:	469e      	mov	lr, r3
 8004d16:	4770      	bx	lr
