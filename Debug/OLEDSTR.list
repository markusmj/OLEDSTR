
OLEDSTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005828  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001554  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f0c  08006f0c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f14  08006f14  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f14  08006f14  00016f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f18  08006f18  00016f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000088  08006fa4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08006fa4  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010018  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fc6  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  00032098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d70  00000000  00000000  00032ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f9f2  00000000  00000000  00033c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad85  00000000  00000000  00053642  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1c2b  00000000  00000000  0005e3c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011fff2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004100  00000000  00000000  00120070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059a0 	.word	0x080059a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080059a0 	.word	0x080059a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b972 	b.w	8000d48 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	4688      	mov	r8, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14b      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4615      	mov	r5, r2
 8000a8e:	d967      	bls.n	8000b60 <__udivmoddi4+0xe4>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0720 	rsb	r7, r2, #32
 8000a9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000aa2:	4095      	lsls	r5, r2
 8000aa4:	ea47 0803 	orr.w	r8, r7, r3
 8000aa8:	4094      	lsls	r4, r2
 8000aaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ab4:	fa1f fc85 	uxth.w	ip, r5
 8000ab8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000abc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ac4:	4299      	cmp	r1, r3
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x60>
 8000ac8:	18eb      	adds	r3, r5, r3
 8000aca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ace:	f080 811b 	bcs.w	8000d08 <__udivmoddi4+0x28c>
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	f240 8118 	bls.w	8000d08 <__udivmoddi4+0x28c>
 8000ad8:	3f02      	subs	r7, #2
 8000ada:	442b      	add	r3, r5
 8000adc:	1a5b      	subs	r3, r3, r1
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ae4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af0:	45a4      	cmp	ip, r4
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x8c>
 8000af4:	192c      	adds	r4, r5, r4
 8000af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000afa:	f080 8107 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	f240 8104 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000b04:	3802      	subs	r0, #2
 8000b06:	442c      	add	r4, r5
 8000b08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b0c:	eba4 040c 	sub.w	r4, r4, ip
 8000b10:	2700      	movs	r7, #0
 8000b12:	b11e      	cbz	r6, 8000b1c <__udivmoddi4+0xa0>
 8000b14:	40d4      	lsrs	r4, r2
 8000b16:	2300      	movs	r3, #0
 8000b18:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0xbe>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80eb 	beq.w	8000d02 <__udivmoddi4+0x286>
 8000b2c:	2700      	movs	r7, #0
 8000b2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b32:	4638      	mov	r0, r7
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	fab3 f783 	clz	r7, r3
 8000b3e:	2f00      	cmp	r7, #0
 8000b40:	d147      	bne.n	8000bd2 <__udivmoddi4+0x156>
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xd0>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 80fa 	bhi.w	8000d40 <__udivmoddi4+0x2c4>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4698      	mov	r8, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d0e0      	beq.n	8000b1c <__udivmoddi4+0xa0>
 8000b5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b5e:	e7dd      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000b60:	b902      	cbnz	r2, 8000b64 <__udivmoddi4+0xe8>
 8000b62:	deff      	udf	#255	; 0xff
 8000b64:	fab2 f282 	clz	r2, r2
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f040 808f 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6e:	1b49      	subs	r1, r1, r5
 8000b70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b74:	fa1f f885 	uxth.w	r8, r5
 8000b78:	2701      	movs	r7, #1
 8000b7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb08 f10c 	mul.w	r1, r8, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2bc>
 8000b9e:	4684      	mov	ip, r0
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	b2a3      	uxth	r3, r4
 8000ba4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb0:	fb08 f800 	mul.w	r8, r8, r0
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x14c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x14a>
 8000bc0:	45a0      	cmp	r8, r4
 8000bc2:	f200 80b6 	bhi.w	8000d32 <__udivmoddi4+0x2b6>
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	eba4 0408 	sub.w	r4, r4, r8
 8000bcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd0:	e79f      	b.n	8000b12 <__udivmoddi4+0x96>
 8000bd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bd6:	40bb      	lsls	r3, r7
 8000bd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bdc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be0:	fa01 f407 	lsl.w	r4, r1, r7
 8000be4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf0:	4325      	orrs	r5, r4
 8000bf2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bf6:	0c2c      	lsrs	r4, r5, #16
 8000bf8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bfc:	fa1f fa8e 	uxth.w	sl, lr
 8000c00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c04:	fb09 f40a 	mul.w	r4, r9, sl
 8000c08:	429c      	cmp	r4, r3
 8000c0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1e 0303 	adds.w	r3, lr, r3
 8000c18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c1c:	f080 8087 	bcs.w	8000d2e <__udivmoddi4+0x2b2>
 8000c20:	429c      	cmp	r4, r3
 8000c22:	f240 8084 	bls.w	8000d2e <__udivmoddi4+0x2b2>
 8000c26:	f1a9 0902 	sub.w	r9, r9, #2
 8000c2a:	4473      	add	r3, lr
 8000c2c:	1b1b      	subs	r3, r3, r4
 8000c2e:	b2ad      	uxth	r5, r5
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c40:	45a2      	cmp	sl, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1e 0404 	adds.w	r4, lr, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	d26b      	bcs.n	8000d26 <__udivmoddi4+0x2aa>
 8000c4e:	45a2      	cmp	sl, r4
 8000c50:	d969      	bls.n	8000d26 <__udivmoddi4+0x2aa>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4474      	add	r4, lr
 8000c56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c5e:	eba4 040a 	sub.w	r4, r4, sl
 8000c62:	454c      	cmp	r4, r9
 8000c64:	46c2      	mov	sl, r8
 8000c66:	464b      	mov	r3, r9
 8000c68:	d354      	bcc.n	8000d14 <__udivmoddi4+0x298>
 8000c6a:	d051      	beq.n	8000d10 <__udivmoddi4+0x294>
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d069      	beq.n	8000d44 <__udivmoddi4+0x2c8>
 8000c70:	ebb1 050a 	subs.w	r5, r1, sl
 8000c74:	eb64 0403 	sbc.w	r4, r4, r3
 8000c78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c7c:	40fd      	lsrs	r5, r7
 8000c7e:	40fc      	lsrs	r4, r7
 8000c80:	ea4c 0505 	orr.w	r5, ip, r5
 8000c84:	e9c6 5400 	strd	r5, r4, [r6]
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e747      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000c8c:	f1c2 0320 	rsb	r3, r2, #32
 8000c90:	fa20 f703 	lsr.w	r7, r0, r3
 8000c94:	4095      	lsls	r5, r2
 8000c96:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca2:	4338      	orrs	r0, r7
 8000ca4:	0c01      	lsrs	r1, r0, #16
 8000ca6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000caa:	fa1f f885 	uxth.w	r8, r5
 8000cae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb6:	fb07 f308 	mul.w	r3, r7, r8
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x256>
 8000cc2:	1869      	adds	r1, r5, r1
 8000cc4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cc8:	d22f      	bcs.n	8000d2a <__udivmoddi4+0x2ae>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d92d      	bls.n	8000d2a <__udivmoddi4+0x2ae>
 8000cce:	3f02      	subs	r7, #2
 8000cd0:	4429      	add	r1, r5
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	b281      	uxth	r1, r0
 8000cd6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce2:	fb00 f308 	mul.w	r3, r0, r8
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x27e>
 8000cea:	1869      	adds	r1, r5, r1
 8000cec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf0:	d217      	bcs.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d915      	bls.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4429      	add	r1, r5
 8000cfa:	1ac9      	subs	r1, r1, r3
 8000cfc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d00:	e73b      	b.n	8000b7a <__udivmoddi4+0xfe>
 8000d02:	4637      	mov	r7, r6
 8000d04:	4630      	mov	r0, r6
 8000d06:	e709      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000d08:	4607      	mov	r7, r0
 8000d0a:	e6e7      	b.n	8000adc <__udivmoddi4+0x60>
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	e6fb      	b.n	8000b08 <__udivmoddi4+0x8c>
 8000d10:	4541      	cmp	r1, r8
 8000d12:	d2ab      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d18:	eb69 020e 	sbc.w	r2, r9, lr
 8000d1c:	3801      	subs	r0, #1
 8000d1e:	4613      	mov	r3, r2
 8000d20:	e7a4      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d22:	4660      	mov	r0, ip
 8000d24:	e7e9      	b.n	8000cfa <__udivmoddi4+0x27e>
 8000d26:	4618      	mov	r0, r3
 8000d28:	e795      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2a:	4667      	mov	r7, ip
 8000d2c:	e7d1      	b.n	8000cd2 <__udivmoddi4+0x256>
 8000d2e:	4681      	mov	r9, r0
 8000d30:	e77c      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	442c      	add	r4, r5
 8000d36:	e747      	b.n	8000bc8 <__udivmoddi4+0x14c>
 8000d38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d3c:	442b      	add	r3, r5
 8000d3e:	e72f      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d40:	4638      	mov	r0, r7
 8000d42:	e708      	b.n	8000b56 <__udivmoddi4+0xda>
 8000d44:	4637      	mov	r7, r6
 8000d46:	e6e9      	b.n	8000b1c <__udivmoddi4+0xa0>

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	0000      	movs	r0, r0
	...

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 fff9 	bl	8001d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f9eb 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f000 fb37 	bl	80013d0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d62:	f000 fa51 	bl	8001208 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000d66:	f000 fab3 	bl	80012d0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000d6a:	f000 fa83 	bl	8001274 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	487f      	ldr	r0, [pc, #508]	; (8000f70 <main+0x220>)
 8000d72:	f003 fb93 	bl	800449c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // start the PWM counters
 8000d76:	2104      	movs	r1, #4
 8000d78:	487d      	ldr	r0, [pc, #500]	; (8000f70 <main+0x220>)
 8000d7a:	f003 fb8f 	bl	800449c <HAL_TIM_PWM_Start>
  HAL_Delay(10);
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f001 f856 	bl	8001e30 <HAL_Delay>
  SSD1306_Init();  // initialise Screen
 8000d84:	f000 fb7e 	bl	8001484 <SSD1306_Init>

  // Start Can Bus

  // Defining CAN 1 Filter Banks.

    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d88:	4b7a      	ldr	r3, [pc, #488]	; (8000f74 <main+0x224>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d8e:	4b79      	ldr	r3, [pc, #484]	; (8000f74 <main+0x224>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdLow = 0x0000;
 8000d94:	4b77      	ldr	r3, [pc, #476]	; (8000f74 <main+0x224>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000d9a:	4b76      	ldr	r3, [pc, #472]	; (8000f74 <main+0x224>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000da0:	4b74      	ldr	r3, [pc, #464]	; (8000f74 <main+0x224>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000da6:	4b73      	ldr	r3, [pc, #460]	; (8000f74 <main+0x224>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000dac:	4b71      	ldr	r3, [pc, #452]	; (8000f74 <main+0x224>)
 8000dae:	220e      	movs	r2, #14
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
        }
*/
    // BMS Voltage
    // Can Message 0x7B6(1974), High to Low, Bytes 0-1

    sFilterConfig.FilterBank = 0;
 8000db2:	4b70      	ldr	r3, [pc, #448]	; (8000f74 <main+0x224>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterIdHigh = 0x07B6 << 5;
 8000db8:	4b6e      	ldr	r3, [pc, #440]	; (8000f74 <main+0x224>)
 8000dba:	f24f 62c0 	movw	r2, #63168	; 0xf6c0
 8000dbe:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterMaskIdHigh = 0x07B6 << 5;
 8000dc0:	4b6c      	ldr	r3, [pc, #432]	; (8000f74 <main+0x224>)
 8000dc2:	f24f 62c0 	movw	r2, #63168	; 0xf6c0
 8000dc6:	609a      	str	r2, [r3, #8]

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000dc8:	496a      	ldr	r1, [pc, #424]	; (8000f74 <main+0x224>)
 8000dca:	486b      	ldr	r0, [pc, #428]	; (8000f78 <main+0x228>)
 8000dcc:	f001 f94e 	bl	800206c <HAL_CAN_ConfigFilter>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <main+0x8a>
    {
      //Filter configuration Error
      Error_Handler();
 8000dd6:	f000 fb4d 	bl	8001474 <Error_Handler>
    }

    // Low Voltage
    // Can Message 0x527(1319), High to Low, Byte 1

    sFilterConfig.FilterBank = 1;
 8000dda:	4b66      	ldr	r3, [pc, #408]	; (8000f74 <main+0x224>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterIdHigh = 0x0527 << 5;
 8000de0:	4b64      	ldr	r3, [pc, #400]	; (8000f74 <main+0x224>)
 8000de2:	f24a 42e0 	movw	r2, #42208	; 0xa4e0
 8000de6:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterMaskIdHigh = 0x0527 << 5;
 8000de8:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <main+0x224>)
 8000dea:	f24a 42e0 	movw	r2, #42208	; 0xa4e0
 8000dee:	609a      	str	r2, [r3, #8]

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000df0:	4960      	ldr	r1, [pc, #384]	; (8000f74 <main+0x224>)
 8000df2:	4861      	ldr	r0, [pc, #388]	; (8000f78 <main+0x228>)
 8000df4:	f001 f93a 	bl	800206c <HAL_CAN_ConfigFilter>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <main+0xb2>
        {
          //Filter configuration Error
          Error_Handler();
 8000dfe:	f000 fb39 	bl	8001474 <Error_Handler>
        }

    // Drive Mode & Max Torque
    // Can Message 0x7C8(1992) Byte 1=Max Torque Byte 0=driveModeFuture

    sFilterConfig.FilterBank = 2;
 8000e02:	4b5c      	ldr	r3, [pc, #368]	; (8000f74 <main+0x224>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterIdHigh = 0x07C8 << 5;
 8000e08:	4b5a      	ldr	r3, [pc, #360]	; (8000f74 <main+0x224>)
 8000e0a:	f44f 4279 	mov.w	r2, #63744	; 0xf900
 8000e0e:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterMaskIdHigh = 0x07C8 << 5;
 8000e10:	4b58      	ldr	r3, [pc, #352]	; (8000f74 <main+0x224>)
 8000e12:	f44f 4279 	mov.w	r2, #63744	; 0xf900
 8000e16:	609a      	str	r2, [r3, #8]

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000e18:	4956      	ldr	r1, [pc, #344]	; (8000f74 <main+0x224>)
 8000e1a:	4857      	ldr	r0, [pc, #348]	; (8000f78 <main+0x228>)
 8000e1c:	f001 f926 	bl	800206c <HAL_CAN_ConfigFilter>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <main+0xda>
        {
          //Filter configuration Error
          Error_Handler();
 8000e26:	f000 fb25 	bl	8001474 <Error_Handler>
        }


  // Start Can 1

    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000e2a:	4853      	ldr	r0, [pc, #332]	; (8000f78 <main+0x228>)
 8000e2c:	f001 f9fe 	bl	800222c <HAL_CAN_Start>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <main+0xea>
    {
      // Start Error
      Error_Handler();
 8000e36:	f000 fb1d 	bl	8001474 <Error_Handler>
    }

    scrtimer=HAL_GetTick();
 8000e3a:	f000 ffed 	bl	8001e18 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	4b4e      	ldr	r3, [pc, #312]	; (8000f7c <main+0x22c>)
 8000e42:	601a      	str	r2, [r3, #0]

    // Write static stuff to screen only once
                  SSD1306_Clear();
 8000e44:	f000 fd43 	bl	80018ce <SSD1306_Clear>
    			  SSD1306_GotoXY (5,0);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2005      	movs	r0, #5
 8000e4c:	f000 fc84 	bl	8001758 <SSD1306_GotoXY>
   	  		      SSD1306_Puts ("Kerttu", &Font_7x10, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	494b      	ldr	r1, [pc, #300]	; (8000f80 <main+0x230>)
 8000e54:	484b      	ldr	r0, [pc, #300]	; (8000f84 <main+0x234>)
 8000e56:	f000 fd15 	bl	8001884 <SSD1306_Puts>
  	  		      SSD1306_GotoXY (65,0);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2041      	movs	r0, #65	; 0x41
 8000e5e:	f000 fc7b 	bl	8001758 <SSD1306_GotoXY>
   	  		      SSD1306_Puts ("LV Batt.", &Font_7x10, 1);
 8000e62:	2201      	movs	r2, #1
 8000e64:	4946      	ldr	r1, [pc, #280]	; (8000f80 <main+0x230>)
 8000e66:	4848      	ldr	r0, [pc, #288]	; (8000f88 <main+0x238>)
 8000e68:	f000 fd0c 	bl	8001884 <SSD1306_Puts>
   	  		      SSD1306_GotoXY (10,33);
 8000e6c:	2121      	movs	r1, #33	; 0x21
 8000e6e:	200a      	movs	r0, #10
 8000e70:	f000 fc72 	bl	8001758 <SSD1306_GotoXY>
   	  		      SSD1306_Puts ("Mode", &Font_7x10, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	4942      	ldr	r1, [pc, #264]	; (8000f80 <main+0x230>)
 8000e78:	4844      	ldr	r0, [pc, #272]	; (8000f8c <main+0x23c>)
 8000e7a:	f000 fd03 	bl	8001884 <SSD1306_Puts>
   	  		      SSD1306_GotoXY (65,33);
 8000e7e:	2121      	movs	r1, #33	; 0x21
 8000e80:	2041      	movs	r0, #65	; 0x41
 8000e82:	f000 fc69 	bl	8001758 <SSD1306_GotoXY>
   	  		      SSD1306_Puts ("Torque", &Font_7x10, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	493d      	ldr	r1, [pc, #244]	; (8000f80 <main+0x230>)
 8000e8a:	4841      	ldr	r0, [pc, #260]	; (8000f90 <main+0x240>)
 8000e8c:	f000 fcfa 	bl	8001884 <SSD1306_Puts>
   	  		      SSD1306_UpdateScreen();
 8000e90:	f000 fbbc 	bl	800160c <SSD1306_UpdateScreen>
  while (1)
  {


	   // Read Steering Angle sensor
	      PWMValue = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000e94:	2100      	movs	r1, #0
 8000e96:	4836      	ldr	r0, [pc, #216]	; (8000f70 <main+0x220>)
 8000e98:	f003 fd50 	bl	800493c <HAL_TIM_ReadCapturedValue>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <main+0x244>)
 8000ea0:	601a      	str	r2, [r3, #0]

	  	  if (PWMValue != 0)
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <main+0x244>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d017      	beq.n	8000eda <main+0x18a>
	  	  {
	  		STRAngle = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2)*360/PWMValue;
 8000eaa:	2104      	movs	r1, #4
 8000eac:	4830      	ldr	r0, [pc, #192]	; (8000f70 <main+0x220>)
 8000eae:	f003 fd45 	bl	800493c <HAL_TIM_ReadCapturedValue>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000eb8:	fb03 f202 	mul.w	r2, r3, r2
 8000ebc:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <main+0x244>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <main+0x248>)
 8000ec8:	801a      	strh	r2, [r3, #0]
	  		STRAngle = 360-(STRAngle-22);
 8000eca:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <main+0x248>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	f5c3 73bf 	rsb	r3, r3, #382	; 0x17e
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <main+0x248>)
 8000ed6:	801a      	strh	r2, [r3, #0]
 8000ed8:	e002      	b.n	8000ee0 <main+0x190>
	  	  }
	  	  else
	  	  {
	  		  STRAngle = 0;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <main+0x248>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	801a      	strh	r2, [r3, #0]
	  	  }


	  	// Receive Can 1 message

	  		    if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 1)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4825      	ldr	r0, [pc, #148]	; (8000f78 <main+0x228>)
 8000ee4:	f001 fc08 	bl	80026f8 <HAL_CAN_GetRxFifoFillLevel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d001      	beq.n	8000ef2 <main+0x1a2>
	  		      {
	  		        /* Reception Missing */
	  		        Error_Handler();
 8000eee:	f000 fac1 	bl	8001474 <Error_Handler>
	  		      }

	  		      if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <main+0x24c>)
 8000ef4:	4a2a      	ldr	r2, [pc, #168]	; (8000fa0 <main+0x250>)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	481f      	ldr	r0, [pc, #124]	; (8000f78 <main+0x228>)
 8000efa:	f001 faeb 	bl	80024d4 <HAL_CAN_GetRxMessage>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <main+0x1b8>
	  		      {
	  		        /* Reception Error */
	  		        Error_Handler();
 8000f04:	f000 fab6 	bl	8001474 <Error_Handler>
	  		      }

	  		    switch ( RxHeader.StdId )
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <main+0x250>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f240 72b6 	movw	r2, #1974	; 0x7b6
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d007      	beq.n	8000f24 <main+0x1d4>
 8000f14:	f5b3 6ff9 	cmp.w	r3, #1992	; 0x7c8
 8000f18:	d048      	beq.n	8000fac <main+0x25c>
 8000f1a:	f240 5227 	movw	r2, #1319	; 0x527
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <main+0x1ee>
 8000f22:	e04c      	b.n	8000fbe <main+0x26e>
	  		            {
	  		    			case 0x7B6 :  // BMS Voltage
	  		                    Kerttu=256*RxData[0]+RxData[1];
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <main+0x24c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <main+0x24c>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4413      	add	r3, r2
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <main+0x254>)
 8000f3a:	801a      	strh	r2, [r3, #0]
	  		                    break;
 8000f3c:	e03f      	b.n	8000fbe <main+0x26e>

	  		    			case 0x527 :  // Low Voltage Battery or is it 0x520???
	  		    				LVBatt=RxData[1]*1.216;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <main+0x24c>)
 8000f40:	785b      	ldrb	r3, [r3, #1]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fae6 	bl	8000514 <__aeabi_i2d>
 8000f48:	a307      	add	r3, pc, #28	; (adr r3, 8000f68 <main+0x218>)
 8000f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4e:	f7ff fb4b 	bl	80005e8 <__aeabi_dmul>
 8000f52:	4603      	mov	r3, r0
 8000f54:	460c      	mov	r4, r1
 8000f56:	4618      	mov	r0, r3
 8000f58:	4621      	mov	r1, r4
 8000f5a:	f7ff fd57 	bl	8000a0c <__aeabi_d2uiz>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <main+0x258>)
 8000f64:	801a      	strh	r2, [r3, #0]
	  		    				break;
 8000f66:	e02a      	b.n	8000fbe <main+0x26e>
 8000f68:	6a7ef9db 	.word	0x6a7ef9db
 8000f6c:	3ff374bc 	.word	0x3ff374bc
 8000f70:	20000558 	.word	0x20000558
 8000f74:	200004c4 	.word	0x200004c4
 8000f78:	20000598 	.word	0x20000598
 8000f7c:	200000ac 	.word	0x200000ac
 8000f80:	20000000 	.word	0x20000000
 8000f84:	080059b8 	.word	0x080059b8
 8000f88:	080059c0 	.word	0x080059c0
 8000f8c:	080059cc 	.word	0x080059cc
 8000f90:	080059d4 	.word	0x080059d4
 8000f94:	200000a4 	.word	0x200000a4
 8000f98:	200000a8 	.word	0x200000a8
 8000f9c:	20000550 	.word	0x20000550
 8000fa0:	200005d8 	.word	0x200005d8
 8000fa4:	20000010 	.word	0x20000010
 8000fa8:	20000012 	.word	0x20000012

	  		    			case 0x07C8 :  // Byte 1=Max Torque Byte 0=driveModeFuture
	  		    				DriveMode=RxData[3];
 8000fac:	4b4e      	ldr	r3, [pc, #312]	; (80010e8 <main+0x398>)
 8000fae:	78da      	ldrb	r2, [r3, #3]
 8000fb0:	4b4e      	ldr	r3, [pc, #312]	; (80010ec <main+0x39c>)
 8000fb2:	701a      	strb	r2, [r3, #0]
	  		    				Turku=RxData[1];
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <main+0x398>)
 8000fb6:	785a      	ldrb	r2, [r3, #1]
 8000fb8:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <main+0x3a0>)
 8000fba:	701a      	strb	r2, [r3, #0]
	  		    				break;
 8000fbc:	bf00      	nop

	  		      union {
	  		    	    uint16_t integer;
	  		      		unsigned char bytearray[2];
	  		      	} data;
	  		      	data.integer = STRAngle;
 8000fbe:	4b4d      	ldr	r3, [pc, #308]	; (80010f4 <main+0x3a4>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	80bb      	strh	r3, [r7, #4]


	  		      // Can 1 Start the Transmission process
	  		        TxHeader.StdId = 69;
 8000fc4:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <main+0x3a8>)
 8000fc6:	2245      	movs	r2, #69	; 0x45
 8000fc8:	601a      	str	r2, [r3, #0]
	  		        TxHeader.RTR = CAN_RTR_DATA;
 8000fca:	4b4b      	ldr	r3, [pc, #300]	; (80010f8 <main+0x3a8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
	  		        TxHeader.IDE = CAN_ID_STD;
 8000fd0:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <main+0x3a8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
	  		        TxHeader.DLC = 2;
 8000fd6:	4b48      	ldr	r3, [pc, #288]	; (80010f8 <main+0x3a8>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	611a      	str	r2, [r3, #16]
	  		        TxHeader.TransmitGlobalTime = DISABLE;
 8000fdc:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <main+0x3a8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	751a      	strb	r2, [r3, #20]
	  		        TxData[0] = data.bytearray[0];
 8000fe2:	793a      	ldrb	r2, [r7, #4]
 8000fe4:	4b45      	ldr	r3, [pc, #276]	; (80010fc <main+0x3ac>)
 8000fe6:	701a      	strb	r2, [r3, #0]
	  		        TxData[1] = data.bytearray[1];
 8000fe8:	797a      	ldrb	r2, [r7, #5]
 8000fea:	4b44      	ldr	r3, [pc, #272]	; (80010fc <main+0x3ac>)
 8000fec:	705a      	strb	r2, [r3, #1]


	  		        if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000fee:	4b44      	ldr	r3, [pc, #272]	; (8001100 <main+0x3b0>)
 8000ff0:	4a42      	ldr	r2, [pc, #264]	; (80010fc <main+0x3ac>)
 8000ff2:	4941      	ldr	r1, [pc, #260]	; (80010f8 <main+0x3a8>)
 8000ff4:	4843      	ldr	r0, [pc, #268]	; (8001104 <main+0x3b4>)
 8000ff6:	f001 f95d 	bl	80022b4 <HAL_CAN_AddTxMessage>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <main+0x2b4>
	  		        {
	  		          /* Transmission request Error */
	  		          Error_Handler();
 8001000:	f000 fa38 	bl	8001474 <Error_Handler>
	  		        }

	  		        /* Wait transmission complete */
	  		          while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 8001004:	bf00      	nop
 8001006:	483f      	ldr	r0, [pc, #252]	; (8001104 <main+0x3b4>)
 8001008:	f001 fa2f 	bl	800246a <HAL_CAN_GetTxMailboxesFreeLevel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b03      	cmp	r3, #3
 8001010:	d1f9      	bne.n	8001006 <main+0x2b6>

	   //Write to the screen


if (HAL_GetTick()-scrtimer > 100) {
 8001012:	f000 ff01 	bl	8001e18 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <main+0x3b8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b64      	cmp	r3, #100	; 0x64
 8001020:	d959      	bls.n	80010d6 <main+0x386>
	    SSD1306_GotoXY (5,12);
 8001022:	210c      	movs	r1, #12
 8001024:	2005      	movs	r0, #5
 8001026:	f000 fb97 	bl	8001758 <SSD1306_GotoXY>
	    sprintf(txt, "%iv", Kerttu);
 800102a:	4b38      	ldr	r3, [pc, #224]	; (800110c <main+0x3bc>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	4937      	ldr	r1, [pc, #220]	; (8001110 <main+0x3c0>)
 8001032:	4838      	ldr	r0, [pc, #224]	; (8001114 <main+0x3c4>)
 8001034:	f004 f8ae 	bl	8005194 <siprintf>
	    SSD1306_Puts (txt, &Font_11x18, 1);
 8001038:	2201      	movs	r2, #1
 800103a:	4937      	ldr	r1, [pc, #220]	; (8001118 <main+0x3c8>)
 800103c:	4835      	ldr	r0, [pc, #212]	; (8001114 <main+0x3c4>)
 800103e:	f000 fc21 	bl	8001884 <SSD1306_Puts>
	    SSD1306_GotoXY (65,12);
 8001042:	210c      	movs	r1, #12
 8001044:	2041      	movs	r0, #65	; 0x41
 8001046:	f000 fb87 	bl	8001758 <SSD1306_GotoXY>
	    sprintf(txt, "%u.%01uv", LVBatt/10, LVBatt%10);
 800104a:	4b34      	ldr	r3, [pc, #208]	; (800111c <main+0x3cc>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	4a34      	ldr	r2, [pc, #208]	; (8001120 <main+0x3d0>)
 8001050:	fba2 2303 	umull	r2, r3, r2, r3
 8001054:	08db      	lsrs	r3, r3, #3
 8001056:	b29b      	uxth	r3, r3
 8001058:	4618      	mov	r0, r3
 800105a:	4b30      	ldr	r3, [pc, #192]	; (800111c <main+0x3cc>)
 800105c:	881a      	ldrh	r2, [r3, #0]
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <main+0x3d0>)
 8001060:	fba3 1302 	umull	r1, r3, r3, r2
 8001064:	08d9      	lsrs	r1, r3, #3
 8001066:	460b      	mov	r3, r1
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	b29b      	uxth	r3, r3
 8001072:	4602      	mov	r2, r0
 8001074:	492b      	ldr	r1, [pc, #172]	; (8001124 <main+0x3d4>)
 8001076:	4827      	ldr	r0, [pc, #156]	; (8001114 <main+0x3c4>)
 8001078:	f004 f88c 	bl	8005194 <siprintf>
	    SSD1306_Puts (txt, &Font_11x18, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	4926      	ldr	r1, [pc, #152]	; (8001118 <main+0x3c8>)
 8001080:	4824      	ldr	r0, [pc, #144]	; (8001114 <main+0x3c4>)
 8001082:	f000 fbff 	bl	8001884 <SSD1306_Puts>
	    SSD1306_GotoXY (12,45);
 8001086:	212d      	movs	r1, #45	; 0x2d
 8001088:	200c      	movs	r0, #12
 800108a:	f000 fb65 	bl	8001758 <SSD1306_GotoXY>
	    sprintf(txt, "#%i", DriveMode);
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <main+0x39c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	4924      	ldr	r1, [pc, #144]	; (8001128 <main+0x3d8>)
 8001096:	481f      	ldr	r0, [pc, #124]	; (8001114 <main+0x3c4>)
 8001098:	f004 f87c 	bl	8005194 <siprintf>
	    SSD1306_Puts (txt, &Font_11x18, 1);
 800109c:	2201      	movs	r2, #1
 800109e:	491e      	ldr	r1, [pc, #120]	; (8001118 <main+0x3c8>)
 80010a0:	481c      	ldr	r0, [pc, #112]	; (8001114 <main+0x3c4>)
 80010a2:	f000 fbef 	bl	8001884 <SSD1306_Puts>
	    SSD1306_GotoXY (65,45);
 80010a6:	212d      	movs	r1, #45	; 0x2d
 80010a8:	2041      	movs	r0, #65	; 0x41
 80010aa:	f000 fb55 	bl	8001758 <SSD1306_GotoXY>
	    sprintf(txt, "%iNm ", Turku);
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <main+0x3a0>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	491d      	ldr	r1, [pc, #116]	; (800112c <main+0x3dc>)
 80010b6:	4817      	ldr	r0, [pc, #92]	; (8001114 <main+0x3c4>)
 80010b8:	f004 f86c 	bl	8005194 <siprintf>
	    SSD1306_Puts (txt, &Font_11x18, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	4916      	ldr	r1, [pc, #88]	; (8001118 <main+0x3c8>)
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <main+0x3c4>)
 80010c2:	f000 fbdf 	bl	8001884 <SSD1306_Puts>
	    SSD1306_UpdateScreen();
 80010c6:	f000 faa1 	bl	800160c <SSD1306_UpdateScreen>
        scrtimer=HAL_GetTick();
 80010ca:	f000 fea5 	bl	8001e18 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <main+0x3b8>)
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e002      	b.n	80010dc <main+0x38c>
} else { HAL_Delay(2);}
 80010d6:	2002      	movs	r0, #2
 80010d8:	f000 feaa 	bl	8001e30 <HAL_Delay>

	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80010dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e0:	4813      	ldr	r0, [pc, #76]	; (8001130 <main+0x3e0>)
 80010e2:	f002 f82a 	bl	800313a <HAL_GPIO_TogglePin>
  {
 80010e6:	e6d5      	b.n	8000e94 <main+0x144>
 80010e8:	20000550 	.word	0x20000550
 80010ec:	20000014 	.word	0x20000014
 80010f0:	20000015 	.word	0x20000015
 80010f4:	200000a8 	.word	0x200000a8
 80010f8:	200005c0 	.word	0x200005c0
 80010fc:	20000548 	.word	0x20000548
 8001100:	2000054c 	.word	0x2000054c
 8001104:	20000598 	.word	0x20000598
 8001108:	200000ac 	.word	0x200000ac
 800110c:	20000010 	.word	0x20000010
 8001110:	080059dc 	.word	0x080059dc
 8001114:	200004ec 	.word	0x200004ec
 8001118:	20000008 	.word	0x20000008
 800111c:	20000012 	.word	0x20000012
 8001120:	cccccccd 	.word	0xcccccccd
 8001124:	080059e0 	.word	0x080059e0
 8001128:	080059ec 	.word	0x080059ec
 800112c:	080059f0 	.word	0x080059f0
 8001130:	40020800 	.word	0x40020800

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	; 0x50
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	2230      	movs	r2, #48	; 0x30
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f004 f81e 	bl	8005184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <SystemClock_Config+0xcc>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	4a27      	ldr	r2, [pc, #156]	; (8001200 <SystemClock_Config+0xcc>)
 8001162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001166:	6413      	str	r3, [r2, #64]	; 0x40
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <SystemClock_Config+0xcc>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <SystemClock_Config+0xd0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <SystemClock_Config+0xd0>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <SystemClock_Config+0xd0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001198:	2310      	movs	r3, #16
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	2302      	movs	r3, #2
 800119e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a0:	2300      	movs	r3, #0
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011a4:	2308      	movs	r3, #8
 80011a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011a8:	23a8      	movs	r3, #168	; 0xa8
 80011aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b0:	2304      	movs	r3, #4
 80011b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fd47 	bl	8003c4c <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c4:	f000 f956 	bl	8001474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2105      	movs	r1, #5
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 ffa0 	bl	800412c <HAL_RCC_ClockConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011f2:	f000 f93f 	bl	8001474 <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3750      	adds	r7, #80	; 0x50
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_CAN1_Init+0x64>)
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <MX_CAN1_Init+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_CAN1_Init+0x64>)
 8001214:	2203      	movs	r2, #3
 8001216:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_CAN1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_CAN1_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_CAN1_Init+0x64>)
 8001226:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800122a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_CAN1_Init+0x64>)
 800122e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001232:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_CAN1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_CAN1_Init+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_CAN1_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_CAN1_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_CAN1_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_CAN1_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_CAN1_Init+0x64>)
 800125a:	f000 fe0b 	bl	8001e74 <HAL_CAN_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001264:	f000 f906 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000598 	.word	0x20000598
 8001270:	40006400 	.word	0x40006400

08001274 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

    // For better speed to update the screen
	// hi2c1.Init.ClockSpeed = 1600000;

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_I2C1_Init+0x50>)
 800127a:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <MX_I2C1_Init+0x54>)
 800127c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_I2C1_Init+0x50>)
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <MX_I2C1_Init+0x58>)
 8001282:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_I2C1_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_I2C1_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_I2C1_Init+0x50>)
 8001292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001296:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_I2C1_Init+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012b2:	f001 ff5d 	bl	8003170 <HAL_I2C_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012bc:	f000 f8da 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200004f4 	.word	0x200004f4
 80012c8:	40005400 	.word	0x40005400
 80012cc:	00061a80 	.word	0x00061a80

080012d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012fc:	4b33      	ldr	r3, [pc, #204]	; (80013cc <MX_TIM2_Init+0xfc>)
 80012fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001302:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120;
 8001304:	4b31      	ldr	r3, [pc, #196]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001306:	2278      	movs	r2, #120	; 0x78
 8001308:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <MX_TIM2_Init+0xfc>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <MX_TIM2_Init+0xfc>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001324:	4829      	ldr	r0, [pc, #164]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001326:	f003 f8f7 	bl	8004518 <HAL_TIM_IC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001330:	f000 f8a0 	bl	8001474 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001334:	2304      	movs	r3, #4
 8001336:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001338:	2350      	movs	r3, #80	; 0x50
 800133a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800133c:	2302      	movs	r3, #2
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	481f      	ldr	r0, [pc, #124]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001350:	f003 fab1 	bl	80048b6 <HAL_TIM_SlaveConfigSynchro>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800135a:	f000 f88b 	bl	8001474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800135e:	2302      	movs	r3, #2
 8001360:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001362:	2301      	movs	r3, #1
 8001364:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	4815      	ldr	r0, [pc, #84]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001378:	f003 fa01 	bl	800477e <HAL_TIM_IC_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001382:	f000 f877 	bl	8001474 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800138a:	2302      	movs	r3, #2
 800138c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2204      	movs	r2, #4
 8001394:	4619      	mov	r1, r3
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001398:	f003 f9f1 	bl	800477e <HAL_TIM_IC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80013a2:	f000 f867 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <MX_TIM2_Init+0xfc>)
 80013b4:	f003 fe2c 	bl	8005010 <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80013be:	f000 f859 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	; 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000558 	.word	0x20000558

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_GPIO_Init+0x9c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a1f      	ldr	r2, [pc, #124]	; (800146c <MX_GPIO_Init+0x9c>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_GPIO_Init+0x9c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_GPIO_Init+0x9c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <MX_GPIO_Init+0x9c>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_GPIO_Init+0x9c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_GPIO_Init+0x9c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <MX_GPIO_Init+0x9c>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_GPIO_Init+0x9c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <MX_GPIO_Init+0xa0>)
 8001442:	f001 fe61 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_GPIO_Init+0xa0>)
 8001460:	f001 fcb8 	bl	8002dd4 <HAL_GPIO_Init>

}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40020800 	.word	0x40020800

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800148a:	f000 fa29 	bl	80018e0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800148e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001492:	2201      	movs	r2, #1
 8001494:	2178      	movs	r1, #120	; 0x78
 8001496:	485b      	ldr	r0, [pc, #364]	; (8001604 <SSD1306_Init+0x180>)
 8001498:	f002 f8a0 	bl	80035dc <HAL_I2C_IsDeviceReady>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e0a9      	b.n	80015fa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80014a6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ac:	e002      	b.n	80014b4 <SSD1306_Init+0x30>
		p--;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f9      	bne.n	80014ae <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80014ba:	22ae      	movs	r2, #174	; 0xae
 80014bc:	2100      	movs	r1, #0
 80014be:	2078      	movs	r0, #120	; 0x78
 80014c0:	f000 fa6a 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80014c4:	2220      	movs	r2, #32
 80014c6:	2100      	movs	r1, #0
 80014c8:	2078      	movs	r0, #120	; 0x78
 80014ca:	f000 fa65 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014ce:	2210      	movs	r2, #16
 80014d0:	2100      	movs	r1, #0
 80014d2:	2078      	movs	r0, #120	; 0x78
 80014d4:	f000 fa60 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014d8:	22b0      	movs	r2, #176	; 0xb0
 80014da:	2100      	movs	r1, #0
 80014dc:	2078      	movs	r0, #120	; 0x78
 80014de:	f000 fa5b 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80014e2:	22c8      	movs	r2, #200	; 0xc8
 80014e4:	2100      	movs	r1, #0
 80014e6:	2078      	movs	r0, #120	; 0x78
 80014e8:	f000 fa56 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2078      	movs	r0, #120	; 0x78
 80014f2:	f000 fa51 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80014f6:	2210      	movs	r2, #16
 80014f8:	2100      	movs	r1, #0
 80014fa:	2078      	movs	r0, #120	; 0x78
 80014fc:	f000 fa4c 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001500:	2240      	movs	r2, #64	; 0x40
 8001502:	2100      	movs	r1, #0
 8001504:	2078      	movs	r0, #120	; 0x78
 8001506:	f000 fa47 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800150a:	2281      	movs	r2, #129	; 0x81
 800150c:	2100      	movs	r1, #0
 800150e:	2078      	movs	r0, #120	; 0x78
 8001510:	f000 fa42 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001514:	22ff      	movs	r2, #255	; 0xff
 8001516:	2100      	movs	r1, #0
 8001518:	2078      	movs	r0, #120	; 0x78
 800151a:	f000 fa3d 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800151e:	22a1      	movs	r2, #161	; 0xa1
 8001520:	2100      	movs	r1, #0
 8001522:	2078      	movs	r0, #120	; 0x78
 8001524:	f000 fa38 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001528:	22a6      	movs	r2, #166	; 0xa6
 800152a:	2100      	movs	r1, #0
 800152c:	2078      	movs	r0, #120	; 0x78
 800152e:	f000 fa33 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001532:	22a8      	movs	r2, #168	; 0xa8
 8001534:	2100      	movs	r1, #0
 8001536:	2078      	movs	r0, #120	; 0x78
 8001538:	f000 fa2e 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800153c:	223f      	movs	r2, #63	; 0x3f
 800153e:	2100      	movs	r1, #0
 8001540:	2078      	movs	r0, #120	; 0x78
 8001542:	f000 fa29 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001546:	22a4      	movs	r2, #164	; 0xa4
 8001548:	2100      	movs	r1, #0
 800154a:	2078      	movs	r0, #120	; 0x78
 800154c:	f000 fa24 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001550:	22d3      	movs	r2, #211	; 0xd3
 8001552:	2100      	movs	r1, #0
 8001554:	2078      	movs	r0, #120	; 0x78
 8001556:	f000 fa1f 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2078      	movs	r0, #120	; 0x78
 8001560:	f000 fa1a 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001564:	22d5      	movs	r2, #213	; 0xd5
 8001566:	2100      	movs	r1, #0
 8001568:	2078      	movs	r0, #120	; 0x78
 800156a:	f000 fa15 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800156e:	22f0      	movs	r2, #240	; 0xf0
 8001570:	2100      	movs	r1, #0
 8001572:	2078      	movs	r0, #120	; 0x78
 8001574:	f000 fa10 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001578:	22d9      	movs	r2, #217	; 0xd9
 800157a:	2100      	movs	r1, #0
 800157c:	2078      	movs	r0, #120	; 0x78
 800157e:	f000 fa0b 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001582:	2222      	movs	r2, #34	; 0x22
 8001584:	2100      	movs	r1, #0
 8001586:	2078      	movs	r0, #120	; 0x78
 8001588:	f000 fa06 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800158c:	22da      	movs	r2, #218	; 0xda
 800158e:	2100      	movs	r1, #0
 8001590:	2078      	movs	r0, #120	; 0x78
 8001592:	f000 fa01 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001596:	2212      	movs	r2, #18
 8001598:	2100      	movs	r1, #0
 800159a:	2078      	movs	r0, #120	; 0x78
 800159c:	f000 f9fc 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015a0:	22db      	movs	r2, #219	; 0xdb
 80015a2:	2100      	movs	r1, #0
 80015a4:	2078      	movs	r0, #120	; 0x78
 80015a6:	f000 f9f7 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80015aa:	2220      	movs	r2, #32
 80015ac:	2100      	movs	r1, #0
 80015ae:	2078      	movs	r0, #120	; 0x78
 80015b0:	f000 f9f2 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80015b4:	228d      	movs	r2, #141	; 0x8d
 80015b6:	2100      	movs	r1, #0
 80015b8:	2078      	movs	r0, #120	; 0x78
 80015ba:	f000 f9ed 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80015be:	2214      	movs	r2, #20
 80015c0:	2100      	movs	r1, #0
 80015c2:	2078      	movs	r0, #120	; 0x78
 80015c4:	f000 f9e8 	bl	8001998 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80015c8:	22af      	movs	r2, #175	; 0xaf
 80015ca:	2100      	movs	r1, #0
 80015cc:	2078      	movs	r0, #120	; 0x78
 80015ce:	f000 f9e3 	bl	8001998 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80015d2:	222e      	movs	r2, #46	; 0x2e
 80015d4:	2100      	movs	r1, #0
 80015d6:	2078      	movs	r0, #120	; 0x78
 80015d8:	f000 f9de 	bl	8001998 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015dc:	2000      	movs	r0, #0
 80015de:	f000 f843 	bl	8001668 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80015e2:	f000 f813 	bl	800160c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <SSD1306_Init+0x184>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <SSD1306_Init+0x184>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SSD1306_Init+0x184>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80015f8:	2301      	movs	r3, #1
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200004f4 	.word	0x200004f4
 8001608:	200004b0 	.word	0x200004b0

0800160c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001612:	2300      	movs	r3, #0
 8001614:	71fb      	strb	r3, [r7, #7]
 8001616:	e01d      	b.n	8001654 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	3b50      	subs	r3, #80	; 0x50
 800161c:	b2db      	uxtb	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	2100      	movs	r1, #0
 8001622:	2078      	movs	r0, #120	; 0x78
 8001624:	f000 f9b8 	bl	8001998 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001628:	2200      	movs	r2, #0
 800162a:	2100      	movs	r1, #0
 800162c:	2078      	movs	r0, #120	; 0x78
 800162e:	f000 f9b3 	bl	8001998 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001632:	2210      	movs	r2, #16
 8001634:	2100      	movs	r1, #0
 8001636:	2078      	movs	r0, #120	; 0x78
 8001638:	f000 f9ae 	bl	8001998 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	01db      	lsls	r3, r3, #7
 8001640:	4a08      	ldr	r2, [pc, #32]	; (8001664 <SSD1306_UpdateScreen+0x58>)
 8001642:	441a      	add	r2, r3
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	2140      	movs	r1, #64	; 0x40
 8001648:	2078      	movs	r0, #120	; 0x78
 800164a:	f000 f95d 	bl	8001908 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	3301      	adds	r3, #1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	2b07      	cmp	r3, #7
 8001658:	d9de      	bls.n	8001618 <SSD1306_UpdateScreen+0xc>
	}
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200000b0 	.word	0x200000b0

08001668 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <SSD1306_Fill+0x14>
 8001678:	2300      	movs	r3, #0
 800167a:	e000      	b.n	800167e <SSD1306_Fill+0x16>
 800167c:	23ff      	movs	r3, #255	; 0xff
 800167e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001682:	4619      	mov	r1, r3
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <SSD1306_Fill+0x2c>)
 8001686:	f003 fd7d 	bl	8005184 <memset>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200000b0 	.word	0x200000b0

08001698 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]
 80016a2:	460b      	mov	r3, r1
 80016a4:	80bb      	strh	r3, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	70fb      	strb	r3, [r7, #3]
	if (
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	2b7f      	cmp	r3, #127	; 0x7f
 80016ae:	d848      	bhi.n	8001742 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80016b0:	88bb      	ldrh	r3, [r7, #4]
 80016b2:	2b3f      	cmp	r3, #63	; 0x3f
 80016b4:	d845      	bhi.n	8001742 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <SSD1306_DrawPixel+0xb8>)
 80016b8:	791b      	ldrb	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d006      	beq.n	80016cc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d11a      	bne.n	8001708 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016d2:	88fa      	ldrh	r2, [r7, #6]
 80016d4:	88bb      	ldrh	r3, [r7, #4]
 80016d6:	08db      	lsrs	r3, r3, #3
 80016d8:	b298      	uxth	r0, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	01db      	lsls	r3, r3, #7
 80016de:	4413      	add	r3, r2
 80016e0:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <SSD1306_DrawPixel+0xbc>)
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	b25a      	sxtb	r2, r3
 80016e6:	88bb      	ldrh	r3, [r7, #4]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	2101      	movs	r1, #1
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b259      	sxtb	r1, r3
 80016f8:	88fa      	ldrh	r2, [r7, #6]
 80016fa:	4603      	mov	r3, r0
 80016fc:	01db      	lsls	r3, r3, #7
 80016fe:	4413      	add	r3, r2
 8001700:	b2c9      	uxtb	r1, r1
 8001702:	4a14      	ldr	r2, [pc, #80]	; (8001754 <SSD1306_DrawPixel+0xbc>)
 8001704:	54d1      	strb	r1, [r2, r3]
 8001706:	e01d      	b.n	8001744 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001708:	88fa      	ldrh	r2, [r7, #6]
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	b298      	uxth	r0, r3
 8001710:	4603      	mov	r3, r0
 8001712:	01db      	lsls	r3, r3, #7
 8001714:	4413      	add	r3, r2
 8001716:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <SSD1306_DrawPixel+0xbc>)
 8001718:	5cd3      	ldrb	r3, [r2, r3]
 800171a:	b25a      	sxtb	r2, r3
 800171c:	88bb      	ldrh	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	b25b      	sxtb	r3, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	b25b      	sxtb	r3, r3
 800172e:	4013      	ands	r3, r2
 8001730:	b259      	sxtb	r1, r3
 8001732:	88fa      	ldrh	r2, [r7, #6]
 8001734:	4603      	mov	r3, r0
 8001736:	01db      	lsls	r3, r3, #7
 8001738:	4413      	add	r3, r2
 800173a:	b2c9      	uxtb	r1, r1
 800173c:	4a05      	ldr	r2, [pc, #20]	; (8001754 <SSD1306_DrawPixel+0xbc>)
 800173e:	54d1      	strb	r1, [r2, r3]
 8001740:	e000      	b.n	8001744 <SSD1306_DrawPixel+0xac>
		return;
 8001742:	bf00      	nop
	}
}
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200004b0 	.word	0x200004b0
 8001754:	200000b0 	.word	0x200000b0

08001758 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	460a      	mov	r2, r1
 8001762:	80fb      	strh	r3, [r7, #6]
 8001764:	4613      	mov	r3, r2
 8001766:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001768:	4a05      	ldr	r2, [pc, #20]	; (8001780 <SSD1306_GotoXY+0x28>)
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <SSD1306_GotoXY+0x28>)
 8001770:	88bb      	ldrh	r3, [r7, #4]
 8001772:	8053      	strh	r3, [r2, #2]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	200004b0 	.word	0x200004b0

08001784 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	4613      	mov	r3, r2
 8001792:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001794:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <SSD1306_Putc+0xfc>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
	if (
 80017a0:	2b7f      	cmp	r3, #127	; 0x7f
 80017a2:	dc07      	bgt.n	80017b4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80017a4:	4b36      	ldr	r3, [pc, #216]	; (8001880 <SSD1306_Putc+0xfc>)
 80017a6:	885b      	ldrh	r3, [r3, #2]
 80017a8:	461a      	mov	r2, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	785b      	ldrb	r3, [r3, #1]
 80017ae:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017b0:	2b3f      	cmp	r3, #63	; 0x3f
 80017b2:	dd01      	ble.n	80017b8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e05e      	b.n	8001876 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e04b      	b.n	8001856 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	3b20      	subs	r3, #32
 80017c6:	6839      	ldr	r1, [r7, #0]
 80017c8:	7849      	ldrb	r1, [r1, #1]
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4619      	mov	r1, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	440b      	add	r3, r1
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	e030      	b.n	8001844 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d010      	beq.n	8001814 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <SSD1306_Putc+0xfc>)
 80017f4:	881a      	ldrh	r2, [r3, #0]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	b298      	uxth	r0, r3
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <SSD1306_Putc+0xfc>)
 8001800:	885a      	ldrh	r2, [r3, #2]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	b29b      	uxth	r3, r3
 8001806:	4413      	add	r3, r2
 8001808:	b29b      	uxth	r3, r3
 800180a:	79ba      	ldrb	r2, [r7, #6]
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff ff43 	bl	8001698 <SSD1306_DrawPixel>
 8001812:	e014      	b.n	800183e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <SSD1306_Putc+0xfc>)
 8001816:	881a      	ldrh	r2, [r3, #0]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	b29b      	uxth	r3, r3
 800181c:	4413      	add	r3, r2
 800181e:	b298      	uxth	r0, r3
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <SSD1306_Putc+0xfc>)
 8001822:	885a      	ldrh	r2, [r3, #2]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	b29b      	uxth	r3, r3
 8001828:	4413      	add	r3, r2
 800182a:	b299      	uxth	r1, r3
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf0c      	ite	eq
 8001832:	2301      	moveq	r3, #1
 8001834:	2300      	movne	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	f7ff ff2d 	bl	8001698 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	3301      	adds	r3, #1
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4293      	cmp	r3, r2
 800184e:	d3c8      	bcc.n	80017e2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3301      	adds	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	461a      	mov	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	4293      	cmp	r3, r2
 8001860:	d3ad      	bcc.n	80017be <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <SSD1306_Putc+0xfc>)
 8001864:	881a      	ldrh	r2, [r3, #0]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	4413      	add	r3, r2
 800186e:	b29a      	uxth	r2, r3
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <SSD1306_Putc+0xfc>)
 8001872:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001874:	79fb      	ldrb	r3, [r7, #7]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200004b0 	.word	0x200004b0

08001884 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	4613      	mov	r3, r2
 8001890:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001892:	e012      	b.n	80018ba <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	79fa      	ldrb	r2, [r7, #7]
 800189a:	68b9      	ldr	r1, [r7, #8]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff71 	bl	8001784 <SSD1306_Putc>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d002      	beq.n	80018b4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	e008      	b.n	80018c6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3301      	adds	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1e8      	bne.n	8001894 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	781b      	ldrb	r3, [r3, #0]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7ff fec8 	bl	8001668 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80018d8:	f7ff fe98 	bl	800160c <SSD1306_UpdateScreen>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <ssd1306_I2C_Init+0x24>)
 80018e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018ea:	e002      	b.n	80018f2 <ssd1306_I2C_Init+0x12>
		p--;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f9      	bne.n	80018ec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	0003d090 	.word	0x0003d090

08001908 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b0c7      	sub	sp, #284	; 0x11c
 800190c:	af02      	add	r7, sp, #8
 800190e:	4604      	mov	r4, r0
 8001910:	4608      	mov	r0, r1
 8001912:	4639      	mov	r1, r7
 8001914:	600a      	str	r2, [r1, #0]
 8001916:	4619      	mov	r1, r3
 8001918:	1dfb      	adds	r3, r7, #7
 800191a:	4622      	mov	r2, r4
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	1dbb      	adds	r3, r7, #6
 8001920:	4602      	mov	r2, r0
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	460a      	mov	r2, r1
 8001928:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	1dba      	adds	r2, r7, #6
 8001930:	7812      	ldrb	r2, [r2, #0]
 8001932:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001934:	2300      	movs	r3, #0
 8001936:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800193a:	e010      	b.n	800195e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800193c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001940:	463a      	mov	r2, r7
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	441a      	add	r2, r3
 8001946:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800194a:	3301      	adds	r3, #1
 800194c:	7811      	ldrb	r1, [r2, #0]
 800194e:	f107 020c 	add.w	r2, r7, #12
 8001952:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001954:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001958:	3301      	adds	r3, #1
 800195a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800195e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001962:	b29b      	uxth	r3, r3
 8001964:	1d3a      	adds	r2, r7, #4
 8001966:	8812      	ldrh	r2, [r2, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8e7      	bhi.n	800193c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b299      	uxth	r1, r3
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	b298      	uxth	r0, r3
 800197a:	f107 020c 	add.w	r2, r7, #12
 800197e:	230a      	movs	r3, #10
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	4603      	mov	r3, r0
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <ssd1306_I2C_WriteMulti+0x8c>)
 8001986:	f001 fd2b 	bl	80033e0 <HAL_I2C_Master_Transmit>
}
 800198a:	bf00      	nop
 800198c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	200004f4 	.word	0x200004f4

08001998 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af02      	add	r7, sp, #8
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	460b      	mov	r3, r1
 80019a4:	71bb      	strb	r3, [r7, #6]
 80019a6:	4613      	mov	r3, r2
 80019a8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80019aa:	79bb      	ldrb	r3, [r7, #6]
 80019ac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80019ae:	797b      	ldrb	r3, [r7, #5]
 80019b0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	b299      	uxth	r1, r3
 80019b6:	f107 020c 	add.w	r2, r7, #12
 80019ba:	230a      	movs	r3, #10
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2302      	movs	r3, #2
 80019c0:	4803      	ldr	r0, [pc, #12]	; (80019d0 <ssd1306_I2C_Write+0x38>)
 80019c2:	f001 fd0d 	bl	80033e0 <HAL_I2C_Master_Transmit>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200004f4 	.word	0x200004f4

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_MspInit+0x4c>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_MspInit+0x4c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800

08001a24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <HAL_CAN_MspInit+0x94>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d134      	bne.n	8001ab0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_CAN_MspInit+0x98>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_CAN_MspInit+0x98>)
 8001a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_CAN_MspInit+0x98>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_CAN_MspInit+0x98>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a14      	ldr	r2, [pc, #80]	; (8001abc <HAL_CAN_MspInit+0x98>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_CAN_MspInit+0x98>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a90:	2309      	movs	r3, #9
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <HAL_CAN_MspInit+0x9c>)
 8001a9c:	f001 f99a 	bl	8002dd4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2014      	movs	r0, #20
 8001aa6:	f001 f95e 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001aaa:	2014      	movs	r0, #20
 8001aac:	f001 f977 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40006400 	.word	0x40006400
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <HAL_I2C_MspInit+0x84>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d12b      	bne.n	8001b3e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_I2C_MspInit+0x88>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <HAL_I2C_MspInit+0x88>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_I2C_MspInit+0x88>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b02:	23c0      	movs	r3, #192	; 0xc0
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b06:	2312      	movs	r3, #18
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b12:	2304      	movs	r3, #4
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <HAL_I2C_MspInit+0x8c>)
 8001b1e:	f001 f959 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_I2C_MspInit+0x88>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <HAL_I2C_MspInit+0x88>)
 8001b2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_I2C_MspInit+0x88>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	; 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020400 	.word	0x40020400

08001b54 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b74:	d133      	bne.n	8001bde <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_TIM_IC_MspInit+0x94>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a1a      	ldr	r2, [pc, #104]	; (8001be8 <HAL_TIM_IC_MspInit+0x94>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_TIM_IC_MspInit+0x94>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_TIM_IC_MspInit+0x94>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <HAL_TIM_IC_MspInit+0x94>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_TIM_IC_MspInit+0x94>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4808      	ldr	r0, [pc, #32]	; (8001bec <HAL_TIM_IC_MspInit+0x98>)
 8001bca:	f001 f903 	bl	8002dd4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	201c      	movs	r0, #28
 8001bd4:	f001 f8c7 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bd8:	201c      	movs	r0, #28
 8001bda:	f001 f8e0 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bde:	bf00      	nop
 8001be0:	3728      	adds	r7, #40	; 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000

08001bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <HardFault_Handler+0x4>

08001c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <MemManage_Handler+0x4>

08001c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <BusFault_Handler+0x4>

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <UsageFault_Handler+0x4>

08001c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c44:	f000 f8d4 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <CAN1_RX0_IRQHandler+0x10>)
 8001c52:	f000 fd79 	bl	8002748 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000598 	.word	0x20000598

08001c60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <TIM2_IRQHandler+0x10>)
 8001c66:	f002 fc82 	bl	800456e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000558 	.word	0x20000558

08001c74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <_sbrk+0x50>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x16>
		heap_end = &end;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <_sbrk+0x50>)
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <_sbrk+0x54>)
 8001c88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <_sbrk+0x50>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <_sbrk+0x50>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	466a      	mov	r2, sp
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d907      	bls.n	8001cae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c9e:	f003 fa47 	bl	8005130 <__errno>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	e006      	b.n	8001cbc <_sbrk+0x48>
	}

	heap_end += incr;
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <_sbrk+0x50>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <_sbrk+0x50>)
 8001cb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200004b8 	.word	0x200004b8
 8001cc8:	20000600 	.word	0x20000600

08001ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <SystemInit+0x28>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd6:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <SystemInit+0x28>)
 8001cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SystemInit+0x28>)
 8001ce2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cfe:	e003      	b.n	8001d08 <LoopCopyDataInit>

08001d00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d06:	3104      	adds	r1, #4

08001d08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d08:	480b      	ldr	r0, [pc, #44]	; (8001d38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d10:	d3f6      	bcc.n	8001d00 <CopyDataInit>
  ldr  r2, =_sbss
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d14:	e002      	b.n	8001d1c <LoopFillZerobss>

08001d16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d18:	f842 3b04 	str.w	r3, [r2], #4

08001d1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d20:	d3f9      	bcc.n	8001d16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d22:	f7ff ffd3 	bl	8001ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d26:	f003 fa09 	bl	800513c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2a:	f7ff f811 	bl	8000d50 <main>
  bx  lr    
 8001d2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d34:	08006f1c 	.word	0x08006f1c
  ldr  r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d3c:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001d40:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001d44:	200005fc 	.word	0x200005fc

08001d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC_IRQHandler>
	...

08001d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <HAL_Init+0x40>)
 8001d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_Init+0x40>)
 8001d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <HAL_Init+0x40>)
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d74:	2003      	movs	r0, #3
 8001d76:	f000 ffeb 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f000 f808 	bl	8001d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d80:	f7ff fe28 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023c00 	.word	0x40023c00

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x54>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x58>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 f803 	bl	8002dba <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00e      	b.n	8001ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d80a      	bhi.n	8001dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f000 ffcb 	bl	8002d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd0:	4a06      	ldr	r2, [pc, #24]	; (8001dec <HAL_InitTick+0x5c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000018 	.word	0x20000018
 8001de8:	20000020 	.word	0x20000020
 8001dec:	2000001c 	.word	0x2000001c

08001df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_IncTick+0x20>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_IncTick+0x24>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <HAL_IncTick+0x24>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000020 	.word	0x20000020
 8001e14:	200005f4 	.word	0x200005f4

08001e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <HAL_GetTick+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	200005f4 	.word	0x200005f4

08001e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff ffee 	bl	8001e18 <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_Delay+0x40>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e56:	bf00      	nop
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
  {
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000020 	.word	0x20000020

08001e74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0ed      	b.n	8002062 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fdc6 	bl	8001a24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0202 	bic.w	r2, r2, #2
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea8:	f7ff ffb6 	bl	8001e18 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eae:	e012      	b.n	8001ed6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eb0:	f7ff ffb2 	bl	8001e18 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b0a      	cmp	r3, #10
 8001ebc:	d90b      	bls.n	8001ed6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2205      	movs	r2, #5
 8001ece:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0c5      	b.n	8002062 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1e5      	bne.n	8001eb0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef4:	f7ff ff90 	bl	8001e18 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001efa:	e012      	b.n	8001f22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001efc:	f7ff ff8c 	bl	8001e18 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b0a      	cmp	r3, #10
 8001f08:	d90b      	bls.n	8001f22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2205      	movs	r2, #5
 8001f1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e09f      	b.n	8002062 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0e5      	beq.n	8001efc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7e1b      	ldrb	r3, [r3, #24]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d108      	bne.n	8001f4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e007      	b.n	8001f5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7e5b      	ldrb	r3, [r3, #25]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d108      	bne.n	8001f74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e007      	b.n	8001f84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7e9b      	ldrb	r3, [r3, #26]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d108      	bne.n	8001f9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	e007      	b.n	8001fae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0220 	bic.w	r2, r2, #32
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7edb      	ldrb	r3, [r3, #27]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d108      	bne.n	8001fc8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0210 	bic.w	r2, r2, #16
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e007      	b.n	8001fd8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0210 	orr.w	r2, r2, #16
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7f1b      	ldrb	r3, [r3, #28]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d108      	bne.n	8001ff2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0208 	orr.w	r2, r2, #8
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	e007      	b.n	8002002 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0208 	bic.w	r2, r2, #8
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7f5b      	ldrb	r3, [r3, #29]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d108      	bne.n	800201c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0204 	orr.w	r2, r2, #4
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e007      	b.n	800202c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0204 	bic.w	r2, r2, #4
 800202a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	ea42 0103 	orr.w	r1, r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	1e5a      	subs	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002082:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d003      	beq.n	8002092 <HAL_CAN_ConfigFilter+0x26>
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	2b02      	cmp	r3, #2
 800208e:	f040 80be 	bne.w	800220e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002092:	4b65      	ldr	r3, [pc, #404]	; (8002228 <HAL_CAN_ConfigFilter+0x1bc>)
 8002094:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800209c:	f043 0201 	orr.w	r2, r3, #1
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	431a      	orrs	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2201      	movs	r2, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	401a      	ands	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d123      	bne.n	800213c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002116:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3248      	adds	r2, #72	; 0x48
 800211c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002130:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002132:	6979      	ldr	r1, [r7, #20]
 8002134:	3348      	adds	r3, #72	; 0x48
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d122      	bne.n	800218a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	431a      	orrs	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002164:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3248      	adds	r2, #72	; 0x48
 800216a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800217e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002180:	6979      	ldr	r1, [r7, #20]
 8002182:	3348      	adds	r3, #72	; 0x48
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	43db      	mvns	r3, r3
 800219c:	401a      	ands	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80021a4:	e007      	b.n	80021b6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	401a      	ands	r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80021d0:	e007      	b.n	80021e2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	431a      	orrs	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002200:	f023 0201 	bic.w	r2, r3, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e006      	b.n	800221c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
  }
}
 800221c:	4618      	mov	r0, r3
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40006400 	.word	0x40006400

0800222c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d12e      	bne.n	800229e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002258:	f7ff fdde 	bl	8001e18 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800225e:	e012      	b.n	8002286 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002260:	f7ff fdda 	bl	8001e18 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b0a      	cmp	r3, #10
 800226c:	d90b      	bls.n	8002286 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2205      	movs	r2, #5
 800227e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e012      	b.n	80022ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e5      	bne.n	8002260 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e006      	b.n	80022ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
  }
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80022d2:	7ffb      	ldrb	r3, [r7, #31]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d003      	beq.n	80022e0 <HAL_CAN_AddTxMessage+0x2c>
 80022d8:	7ffb      	ldrb	r3, [r7, #31]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	f040 80b8 	bne.w	8002450 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10a      	bne.n	8002300 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80a0 	beq.w	8002440 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	0e1b      	lsrs	r3, r3, #24
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d907      	bls.n	8002320 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e09e      	b.n	800245e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002320:	2201      	movs	r2, #1
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	409a      	lsls	r2, r3
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	6809      	ldr	r1, [r1, #0]
 8002340:	431a      	orrs	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3318      	adds	r3, #24
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	440b      	add	r3, r1
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e00f      	b.n	800236e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002358:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800235e:	68f9      	ldr	r1, [r7, #12]
 8002360:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002362:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3318      	adds	r3, #24
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	440b      	add	r3, r1
 800236c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6819      	ldr	r1, [r3, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3318      	adds	r3, #24
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	440b      	add	r3, r1
 800237e:	3304      	adds	r3, #4
 8002380:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	7d1b      	ldrb	r3, [r3, #20]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d111      	bne.n	80023ae <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3318      	adds	r3, #24
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4413      	add	r3, r2
 8002396:	3304      	adds	r3, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	6811      	ldr	r1, [r2, #0]
 800239e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3318      	adds	r3, #24
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	440b      	add	r3, r1
 80023aa:	3304      	adds	r3, #4
 80023ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3307      	adds	r3, #7
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	061a      	lsls	r2, r3, #24
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3306      	adds	r3, #6
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3305      	adds	r3, #5
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	4313      	orrs	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	3204      	adds	r2, #4
 80023ce:	7812      	ldrb	r2, [r2, #0]
 80023d0:	4610      	mov	r0, r2
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	6811      	ldr	r1, [r2, #0]
 80023d6:	ea43 0200 	orr.w	r2, r3, r0
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	440b      	add	r3, r1
 80023e0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80023e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3303      	adds	r3, #3
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	061a      	lsls	r2, r3, #24
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3302      	adds	r3, #2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3301      	adds	r3, #1
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	4313      	orrs	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	4610      	mov	r0, r2
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	6811      	ldr	r1, [r2, #0]
 800240c:	ea43 0200 	orr.w	r2, r3, r0
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	440b      	add	r3, r1
 8002416:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800241a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3318      	adds	r3, #24
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	4413      	add	r3, r2
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	6811      	ldr	r1, [r2, #0]
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3318      	adds	r3, #24
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	440b      	add	r3, r1
 800243a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e00e      	b.n	800245e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e006      	b.n	800245e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800247c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800247e:	7afb      	ldrb	r3, [r7, #11]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d002      	beq.n	800248a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002484:	7afb      	ldrb	r3, [r7, #11]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d11d      	bne.n	80024c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3301      	adds	r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3301      	adds	r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d003      	beq.n	80024f8 <HAL_CAN_GetRxMessage+0x24>
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	f040 80f3 	bne.w	80026de <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10e      	bne.n	800251c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d116      	bne.n	800253a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0e7      	b.n	80026ec <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d107      	bne.n	800253a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0d8      	b.n	80026ec <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	331b      	adds	r3, #27
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	4413      	add	r3, r2
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0204 	and.w	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10c      	bne.n	8002572 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	331b      	adds	r3, #27
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4413      	add	r3, r2
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	0d5b      	lsrs	r3, r3, #21
 8002568:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e00b      	b.n	800258a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	331b      	adds	r3, #27
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	4413      	add	r3, r2
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	08db      	lsrs	r3, r3, #3
 8002582:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	331b      	adds	r3, #27
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	4413      	add	r3, r2
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0202 	and.w	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	331b      	adds	r3, #27
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 020f 	and.w	r2, r3, #15
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	331b      	adds	r3, #27
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	4413      	add	r3, r2
 80025c4:	3304      	adds	r3, #4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	331b      	adds	r3, #27
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	4413      	add	r3, r2
 80025dc:	3304      	adds	r3, #4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	4413      	add	r3, r2
 8002608:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	0a1a      	lsrs	r2, r3, #8
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	4413      	add	r3, r2
 8002622:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0c1a      	lsrs	r2, r3, #16
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	3302      	adds	r3, #2
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	4413      	add	r3, r2
 800263c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0e1a      	lsrs	r2, r3, #24
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	3303      	adds	r3, #3
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	4413      	add	r3, r2
 8002656:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	3304      	adds	r3, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	4413      	add	r3, r2
 800266e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0a1a      	lsrs	r2, r3, #8
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	3305      	adds	r3, #5
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	4413      	add	r3, r2
 8002688:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0c1a      	lsrs	r2, r3, #16
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	3306      	adds	r3, #6
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0e1a      	lsrs	r2, r3, #24
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	3307      	adds	r3, #7
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d108      	bne.n	80026ca <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0220 	orr.w	r2, r2, #32
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	e007      	b.n	80026da <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0220 	orr.w	r2, r2, #32
 80026d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e006      	b.n	80026ec <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
  }
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	371c      	adds	r7, #28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800270e:	7afb      	ldrb	r3, [r7, #11]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d002      	beq.n	800271a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002714:	7afb      	ldrb	r3, [r7, #11]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d10f      	bne.n	800273a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d106      	bne.n	800272e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	e005      	b.n	800273a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002750:	2300      	movs	r3, #0
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d07c      	beq.n	8002888 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d023      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2201      	movs	r2, #1
 800279e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f97d 	bl	8002aaa <HAL_CAN_TxMailbox0CompleteCallback>
 80027b0:	e016      	b.n	80027e0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
 80027c4:	e00c      	b.n	80027e0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
 80027d8:	e002      	b.n	80027e0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f983 	bl	8002ae6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d024      	beq.n	8002834 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f95d 	bl	8002abe <HAL_CAN_TxMailbox1CompleteCallback>
 8002804:	e016      	b.n	8002834 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	e00c      	b.n	8002834 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002820:	2b00      	cmp	r3, #0
 8002822:	d004      	beq.n	800282e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
 800282c:	e002      	b.n	8002834 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f963 	bl	8002afa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d024      	beq.n	8002888 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002846:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f93d 	bl	8002ad2 <HAL_CAN_TxMailbox2CompleteCallback>
 8002858:	e016      	b.n	8002888 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
 800286c:	e00c      	b.n	8002888 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
 8002880:	e002      	b.n	8002888 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f943 	bl	8002b0e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00c      	beq.n	80028ac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2210      	movs	r2, #16
 80028aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2208      	movs	r2, #8
 80028c6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f934 	bl	8002b36 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f91b 	bl	8002b22 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002906:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2210      	movs	r2, #16
 800290e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2208      	movs	r2, #8
 800292a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f916 	bl	8002b5e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f8fd 	bl	8002b4a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	d006      	beq.n	8002972 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2210      	movs	r2, #16
 800296a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f900 	bl	8002b72 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2208      	movs	r2, #8
 800298c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f8f9 	bl	8002b86 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d075      	beq.n	8002a8a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d06c      	beq.n	8002a82 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	f043 0302 	orr.w	r3, r3, #2
 80029de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	f043 0304 	orr.w	r3, r3, #4
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d03d      	beq.n	8002a82 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d038      	beq.n	8002a82 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a16:	2b30      	cmp	r3, #48	; 0x30
 8002a18:	d017      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x302>
 8002a1a:	2b30      	cmp	r3, #48	; 0x30
 8002a1c:	d804      	bhi.n	8002a28 <HAL_CAN_IRQHandler+0x2e0>
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d009      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x2ee>
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d00c      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a26:	e024      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002a28:	2b50      	cmp	r3, #80	; 0x50
 8002a2a:	d018      	beq.n	8002a5e <HAL_CAN_IRQHandler+0x316>
 8002a2c:	2b60      	cmp	r3, #96	; 0x60
 8002a2e:	d01b      	beq.n	8002a68 <HAL_CAN_IRQHandler+0x320>
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d00f      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002a34:	e01d      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	f043 0308 	orr.w	r3, r3, #8
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a3e:	e018      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	f043 0310 	orr.w	r3, r3, #16
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a48:	e013      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	f043 0320 	orr.w	r3, r3, #32
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a52:	e00e      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a5c:	e009      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a66:	e004      	b.n	8002a72 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a70:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a80:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2204      	movs	r2, #4
 8002a88:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f87c 	bl	8002b9a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be2:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	60d3      	str	r3, [r2, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db0b      	blt.n	8002c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	4907      	ldr	r1, [pc, #28]	; (8002c4c <__NVIC_EnableIRQ+0x38>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	; (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	; (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	; 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d1c:	d301      	bcc.n	8002d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00f      	b.n	8002d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <SysTick_Config+0x40>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f7ff ff8e 	bl	8002c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <SysTick_Config+0x40>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <SysTick_Config+0x40>)
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	e000e010 	.word	0xe000e010

08002d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ff29 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d78:	f7ff ff3e 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f7ff ff8e 	bl	8002ca4 <NVIC_EncodePriority>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff5d 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff31 	bl	8002c14 <__NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ffa2 	bl	8002d0c <SysTick_Config>
 8002dc8:	4603      	mov	r3, r0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	e16b      	b.n	80030c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	f040 815a 	bne.w	80030c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d00b      	beq.n	8002e2e <HAL_GPIO_Init+0x5a>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d007      	beq.n	8002e2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e22:	2b11      	cmp	r3, #17
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b12      	cmp	r3, #18
 8002e2c:	d130      	bne.n	8002e90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	2203      	movs	r2, #3
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e64:	2201      	movs	r2, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 0201 	and.w	r2, r3, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0xfc>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b12      	cmp	r3, #18
 8002ece:	d123      	bne.n	8002f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	08da      	lsrs	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3208      	adds	r2, #8
 8002ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	08da      	lsrs	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3208      	adds	r2, #8
 8002f12:	69b9      	ldr	r1, [r7, #24]
 8002f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0203 	and.w	r2, r3, #3
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80b4 	beq.w	80030c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b5f      	ldr	r3, [pc, #380]	; (80030dc <HAL_GPIO_Init+0x308>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	4a5e      	ldr	r2, [pc, #376]	; (80030dc <HAL_GPIO_Init+0x308>)
 8002f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f68:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6a:	4b5c      	ldr	r3, [pc, #368]	; (80030dc <HAL_GPIO_Init+0x308>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f76:	4a5a      	ldr	r2, [pc, #360]	; (80030e0 <HAL_GPIO_Init+0x30c>)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a51      	ldr	r2, [pc, #324]	; (80030e4 <HAL_GPIO_Init+0x310>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d02b      	beq.n	8002ffa <HAL_GPIO_Init+0x226>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a50      	ldr	r2, [pc, #320]	; (80030e8 <HAL_GPIO_Init+0x314>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d025      	beq.n	8002ff6 <HAL_GPIO_Init+0x222>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a4f      	ldr	r2, [pc, #316]	; (80030ec <HAL_GPIO_Init+0x318>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01f      	beq.n	8002ff2 <HAL_GPIO_Init+0x21e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a4e      	ldr	r2, [pc, #312]	; (80030f0 <HAL_GPIO_Init+0x31c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d019      	beq.n	8002fee <HAL_GPIO_Init+0x21a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a4d      	ldr	r2, [pc, #308]	; (80030f4 <HAL_GPIO_Init+0x320>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_GPIO_Init+0x216>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a4c      	ldr	r2, [pc, #304]	; (80030f8 <HAL_GPIO_Init+0x324>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00d      	beq.n	8002fe6 <HAL_GPIO_Init+0x212>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a4b      	ldr	r2, [pc, #300]	; (80030fc <HAL_GPIO_Init+0x328>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d007      	beq.n	8002fe2 <HAL_GPIO_Init+0x20e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a4a      	ldr	r2, [pc, #296]	; (8003100 <HAL_GPIO_Init+0x32c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_GPIO_Init+0x20a>
 8002fda:	2307      	movs	r3, #7
 8002fdc:	e00e      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fde:	2308      	movs	r3, #8
 8002fe0:	e00c      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fe2:	2306      	movs	r3, #6
 8002fe4:	e00a      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fe6:	2305      	movs	r3, #5
 8002fe8:	e008      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fea:	2304      	movs	r3, #4
 8002fec:	e006      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e004      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e002      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_GPIO_Init+0x228>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f002 0203 	and.w	r2, r2, #3
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	4093      	lsls	r3, r2
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800300c:	4934      	ldr	r1, [pc, #208]	; (80030e0 <HAL_GPIO_Init+0x30c>)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800301a:	4b3a      	ldr	r3, [pc, #232]	; (8003104 <HAL_GPIO_Init+0x330>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800303e:	4a31      	ldr	r2, [pc, #196]	; (8003104 <HAL_GPIO_Init+0x330>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003044:	4b2f      	ldr	r3, [pc, #188]	; (8003104 <HAL_GPIO_Init+0x330>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003068:	4a26      	ldr	r2, [pc, #152]	; (8003104 <HAL_GPIO_Init+0x330>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800306e:	4b25      	ldr	r3, [pc, #148]	; (8003104 <HAL_GPIO_Init+0x330>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003092:	4a1c      	ldr	r2, [pc, #112]	; (8003104 <HAL_GPIO_Init+0x330>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003098:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <HAL_GPIO_Init+0x330>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030bc:	4a11      	ldr	r2, [pc, #68]	; (8003104 <HAL_GPIO_Init+0x330>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3301      	adds	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	f67f ae90 	bls.w	8002df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	3724      	adds	r7, #36	; 0x24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40013800 	.word	0x40013800
 80030e4:	40020000 	.word	0x40020000
 80030e8:	40020400 	.word	0x40020400
 80030ec:	40020800 	.word	0x40020800
 80030f0:	40020c00 	.word	0x40020c00
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40021400 	.word	0x40021400
 80030fc:	40021800 	.word	0x40021800
 8003100:	40021c00 	.word	0x40021c00
 8003104:	40013c00 	.word	0x40013c00

08003108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
 8003114:	4613      	mov	r3, r2
 8003116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003118:	787b      	ldrb	r3, [r7, #1]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003124:	e003      	b.n	800312e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	041a      	lsls	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	619a      	str	r2, [r3, #24]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	887b      	ldrh	r3, [r7, #2]
 800314c:	401a      	ands	r2, r3
 800314e:	887b      	ldrh	r3, [r7, #2]
 8003150:	429a      	cmp	r2, r3
 8003152:	d104      	bne.n	800315e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	041a      	lsls	r2, r3, #16
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800315c:	e002      	b.n	8003164 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	619a      	str	r2, [r3, #24]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e11f      	b.n	80033c2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fe fc94 	bl	8001ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	; 0x24
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031d4:	f001 f94e 	bl	8004474 <HAL_RCC_GetPCLK1Freq>
 80031d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4a7b      	ldr	r2, [pc, #492]	; (80033cc <HAL_I2C_Init+0x25c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d807      	bhi.n	80031f4 <HAL_I2C_Init+0x84>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a7a      	ldr	r2, [pc, #488]	; (80033d0 <HAL_I2C_Init+0x260>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	bf94      	ite	ls
 80031ec:	2301      	movls	r3, #1
 80031ee:	2300      	movhi	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e006      	b.n	8003202 <HAL_I2C_Init+0x92>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4a77      	ldr	r2, [pc, #476]	; (80033d4 <HAL_I2C_Init+0x264>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	bf94      	ite	ls
 80031fc:	2301      	movls	r3, #1
 80031fe:	2300      	movhi	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0db      	b.n	80033c2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a72      	ldr	r2, [pc, #456]	; (80033d8 <HAL_I2C_Init+0x268>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0c9b      	lsrs	r3, r3, #18
 8003214:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a64      	ldr	r2, [pc, #400]	; (80033cc <HAL_I2C_Init+0x25c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d802      	bhi.n	8003244 <HAL_I2C_Init+0xd4>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	3301      	adds	r3, #1
 8003242:	e009      	b.n	8003258 <HAL_I2C_Init+0xe8>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	4a63      	ldr	r2, [pc, #396]	; (80033dc <HAL_I2C_Init+0x26c>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	099b      	lsrs	r3, r3, #6
 8003256:	3301      	adds	r3, #1
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	430b      	orrs	r3, r1
 800325e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800326a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4956      	ldr	r1, [pc, #344]	; (80033cc <HAL_I2C_Init+0x25c>)
 8003274:	428b      	cmp	r3, r1
 8003276:	d80d      	bhi.n	8003294 <HAL_I2C_Init+0x124>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1e59      	subs	r1, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	fbb1 f3f3 	udiv	r3, r1, r3
 8003286:	3301      	adds	r3, #1
 8003288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328c:	2b04      	cmp	r3, #4
 800328e:	bf38      	it	cc
 8003290:	2304      	movcc	r3, #4
 8003292:	e04f      	b.n	8003334 <HAL_I2C_Init+0x1c4>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d111      	bne.n	80032c0 <HAL_I2C_Init+0x150>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1e58      	subs	r0, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	440b      	add	r3, r1
 80032aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e012      	b.n	80032e6 <HAL_I2C_Init+0x176>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1e58      	subs	r0, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	0099      	lsls	r1, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Init+0x17e>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e022      	b.n	8003334 <HAL_I2C_Init+0x1c4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10e      	bne.n	8003314 <HAL_I2C_Init+0x1a4>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1e58      	subs	r0, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	460b      	mov	r3, r1
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	440b      	add	r3, r1
 8003304:	fbb0 f3f3 	udiv	r3, r0, r3
 8003308:	3301      	adds	r3, #1
 800330a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003312:	e00f      	b.n	8003334 <HAL_I2C_Init+0x1c4>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1e58      	subs	r0, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	0099      	lsls	r1, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	fbb0 f3f3 	udiv	r3, r0, r3
 800332a:	3301      	adds	r3, #1
 800332c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	6809      	ldr	r1, [r1, #0]
 8003338:	4313      	orrs	r3, r2
 800333a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003362:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6911      	ldr	r1, [r2, #16]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68d2      	ldr	r2, [r2, #12]
 800336e:	4311      	orrs	r1, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	430b      	orrs	r3, r1
 8003376:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	000186a0 	.word	0x000186a0
 80033d0:	001e847f 	.word	0x001e847f
 80033d4:	003d08ff 	.word	0x003d08ff
 80033d8:	431bde83 	.word	0x431bde83
 80033dc:	10624dd3 	.word	0x10624dd3

080033e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	461a      	mov	r2, r3
 80033ec:	460b      	mov	r3, r1
 80033ee:	817b      	strh	r3, [r7, #10]
 80033f0:	4613      	mov	r3, r2
 80033f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033f4:	f7fe fd10 	bl	8001e18 <HAL_GetTick>
 80033f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b20      	cmp	r3, #32
 8003404:	f040 80e0 	bne.w	80035c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2319      	movs	r3, #25
 800340e:	2201      	movs	r2, #1
 8003410:	4970      	ldr	r1, [pc, #448]	; (80035d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fa92 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800341e:	2302      	movs	r3, #2
 8003420:	e0d3      	b.n	80035ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_I2C_Master_Transmit+0x50>
 800342c:	2302      	movs	r3, #2
 800342e:	e0cc      	b.n	80035ca <HAL_I2C_Master_Transmit+0x1ea>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d007      	beq.n	8003456 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003464:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2221      	movs	r2, #33	; 0x21
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2210      	movs	r2, #16
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	893a      	ldrh	r2, [r7, #8]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4a50      	ldr	r2, [pc, #320]	; (80035d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003496:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003498:	8979      	ldrh	r1, [r7, #10]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	6a3a      	ldr	r2, [r7, #32]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f9ca 	bl	8003838 <I2C_MasterRequestWrite>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e08d      	b.n	80035ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034c4:	e066      	b.n	8003594 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	6a39      	ldr	r1, [r7, #32]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 fb0c 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d107      	bne.n	80034ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e06b      	b.n	80035ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	781a      	ldrb	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b04      	cmp	r3, #4
 800352e:	d11b      	bne.n	8003568 <HAL_I2C_Master_Transmit+0x188>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	d017      	beq.n	8003568 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	781a      	ldrb	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	6a39      	ldr	r1, [r7, #32]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fafc 	bl	8003b6a <I2C_WaitOnBTFFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00d      	beq.n	8003594 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	2b04      	cmp	r3, #4
 800357e:	d107      	bne.n	8003590 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e01a      	b.n	80035ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	d194      	bne.n	80034c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
  }
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	00100002 	.word	0x00100002
 80035d8:	ffff0000 	.word	0xffff0000

080035dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	460b      	mov	r3, r1
 80035ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80035ec:	f7fe fc14 	bl	8001e18 <HAL_GetTick>
 80035f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80035f2:	2301      	movs	r3, #1
 80035f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b20      	cmp	r3, #32
 8003600:	f040 8110 	bne.w	8003824 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2319      	movs	r3, #25
 800360a:	2201      	movs	r2, #1
 800360c:	4988      	ldr	r1, [pc, #544]	; (8003830 <HAL_I2C_IsDeviceReady+0x254>)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f994 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
 800361c:	e103      	b.n	8003826 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_I2C_IsDeviceReady+0x50>
 8003628:	2302      	movs	r3, #2
 800362a:	e0fc      	b.n	8003826 <HAL_I2C_IsDeviceReady+0x24a>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d007      	beq.n	8003652 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2224      	movs	r2, #36	; 0x24
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4a70      	ldr	r2, [pc, #448]	; (8003834 <HAL_I2C_IsDeviceReady+0x258>)
 8003674:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003684:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2200      	movs	r2, #0
 800368e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f952 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00c      	beq.n	80036b8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e0b6      	b.n	8003826 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036b8:	897b      	ldrh	r3, [r7, #10]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036c6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80036c8:	f7fe fba6 	bl	8001e18 <HAL_GetTick>
 80036cc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	bf0c      	ite	eq
 80036dc:	2301      	moveq	r3, #1
 80036de:	2300      	movne	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036fc:	e025      	b.n	800374a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fe fb8b 	bl	8001e18 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <HAL_I2C_IsDeviceReady+0x138>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	22a0      	movs	r2, #160	; 0xa0
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b02      	cmp	r3, #2
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003740:	bf0c      	ite	eq
 8003742:	2301      	moveq	r3, #1
 8003744:	2300      	movne	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2ba0      	cmp	r3, #160	; 0xa0
 8003754:	d005      	beq.n	8003762 <HAL_I2C_IsDeviceReady+0x186>
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d102      	bne.n	8003762 <HAL_I2C_IsDeviceReady+0x186>
 800375c:	7dbb      	ldrb	r3, [r7, #22]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0cd      	beq.n	80036fe <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b02      	cmp	r3, #2
 8003776:	d129      	bne.n	80037cc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003786:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003788:	2300      	movs	r3, #0
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	2319      	movs	r3, #25
 80037a4:	2201      	movs	r2, #1
 80037a6:	4922      	ldr	r1, [pc, #136]	; (8003830 <HAL_I2C_IsDeviceReady+0x254>)
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f8c7 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e036      	b.n	8003826 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e02c      	b.n	8003826 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037da:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037e4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2319      	movs	r3, #25
 80037ec:	2201      	movs	r2, #1
 80037ee:	4910      	ldr	r1, [pc, #64]	; (8003830 <HAL_I2C_IsDeviceReady+0x254>)
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f8a3 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e012      	b.n	8003826 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	3301      	adds	r3, #1
 8003804:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	f4ff af33 	bcc.w	8003676 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	00100002 	.word	0x00100002
 8003834:	ffff0000 	.word	0xffff0000

08003838 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	460b      	mov	r3, r1
 8003846:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d006      	beq.n	8003862 <I2C_MasterRequestWrite+0x2a>
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d003      	beq.n	8003862 <I2C_MasterRequestWrite+0x2a>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003860:	d108      	bne.n	8003874 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e00b      	b.n	800388c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	2b12      	cmp	r3, #18
 800387a:	d107      	bne.n	800388c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f84f 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00c      	beq.n	80038be <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e035      	b.n	800392a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038c6:	d108      	bne.n	80038da <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038c8:	897b      	ldrh	r3, [r7, #10]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038d6:	611a      	str	r2, [r3, #16]
 80038d8:	e01b      	b.n	8003912 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038da:	897b      	ldrh	r3, [r7, #10]
 80038dc:	11db      	asrs	r3, r3, #7
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f003 0306 	and.w	r3, r3, #6
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f063 030f 	orn	r3, r3, #15
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	490f      	ldr	r1, [pc, #60]	; (8003934 <I2C_MasterRequestWrite+0xfc>)
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f876 	bl	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e010      	b.n	800392a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003908:	897b      	ldrh	r3, [r7, #10]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4908      	ldr	r1, [pc, #32]	; (8003938 <I2C_MasterRequestWrite+0x100>)
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f866 	bl	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	00010008 	.word	0x00010008
 8003938:	00010002 	.word	0x00010002

0800393c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800394c:	e025      	b.n	800399a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d021      	beq.n	800399a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7fe fa5f 	bl	8001e18 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d116      	bne.n	800399a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e023      	b.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10d      	bne.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4013      	ands	r3, r2
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	e00c      	b.n	80039da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	43da      	mvns	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4013      	ands	r3, r2
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bf0c      	ite	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	2300      	movne	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d0b6      	beq.n	800394e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039f8:	e051      	b.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a08:	d123      	bne.n	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f043 0204 	orr.w	r2, r3, #4
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e046      	b.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d021      	beq.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fe f9dd 	bl	8001e18 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d116      	bne.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e020      	b.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d10c      	bne.n	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bf14      	ite	ne
 8003aba:	2301      	movne	r3, #1
 8003abc:	2300      	moveq	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	e00b      	b.n	8003ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	43da      	mvns	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf14      	ite	ne
 8003ad4:	2301      	movne	r3, #1
 8003ad6:	2300      	moveq	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d18d      	bne.n	80039fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af4:	e02d      	b.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f878 	bl	8003bec <I2C_IsAcknowledgeFailed>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e02d      	b.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d021      	beq.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fe f983 	bl	8001e18 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d116      	bne.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e007      	b.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5c:	2b80      	cmp	r3, #128	; 0x80
 8003b5e:	d1ca      	bne.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b76:	e02d      	b.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f837 	bl	8003bec <I2C_IsAcknowledgeFailed>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e02d      	b.n	8003be4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d021      	beq.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b90:	f7fe f942 	bl	8001e18 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d302      	bcc.n	8003ba6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d116      	bne.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	f043 0220 	orr.w	r2, r3, #32
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e007      	b.n	8003be4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d1ca      	bne.n	8003b78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c02:	d11b      	bne.n	8003c3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f043 0204 	orr.w	r2, r3, #4
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
	...

08003c4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e25b      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d075      	beq.n	8003d56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c6a:	4ba3      	ldr	r3, [pc, #652]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d00c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c76:	4ba0      	ldr	r3, [pc, #640]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d112      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c82:	4b9d      	ldr	r3, [pc, #628]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	4b99      	ldr	r3, [pc, #612]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d05b      	beq.n	8003d54 <HAL_RCC_OscConfig+0x108>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d157      	bne.n	8003d54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e236      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb0:	d106      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x74>
 8003cb2:	4b91      	ldr	r3, [pc, #580]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a90      	ldr	r2, [pc, #576]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e01d      	b.n	8003cfc <HAL_RCC_OscConfig+0xb0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x98>
 8003cca:	4b8b      	ldr	r3, [pc, #556]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a8a      	ldr	r2, [pc, #552]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b88      	ldr	r3, [pc, #544]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a87      	ldr	r2, [pc, #540]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCC_OscConfig+0xb0>
 8003ce4:	4b84      	ldr	r3, [pc, #528]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a83      	ldr	r2, [pc, #524]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	4b81      	ldr	r3, [pc, #516]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a80      	ldr	r2, [pc, #512]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fe f888 	bl	8001e18 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fe f884 	bl	8001e18 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e1fb      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b76      	ldr	r3, [pc, #472]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0xc0>
 8003d2a:	e014      	b.n	8003d56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fe f874 	bl	8001e18 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fe f870 	bl	8001e18 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e1e7      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d46:	4b6c      	ldr	r3, [pc, #432]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0xe8>
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d063      	beq.n	8003e2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d62:	4b65      	ldr	r3, [pc, #404]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6e:	4b62      	ldr	r3, [pc, #392]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d11c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d116      	bne.n	8003db4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d86:	4b5c      	ldr	r3, [pc, #368]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_RCC_OscConfig+0x152>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e1bb      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9e:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4952      	ldr	r1, [pc, #328]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db2:	e03a      	b.n	8003e2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d020      	beq.n	8003dfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dbc:	4b4f      	ldr	r3, [pc, #316]	; (8003efc <HAL_RCC_OscConfig+0x2b0>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc2:	f7fe f829 	bl	8001e18 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dca:	f7fe f825 	bl	8001e18 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e19c      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ddc:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de8:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4940      	ldr	r1, [pc, #256]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
 8003dfc:	e015      	b.n	8003e2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfe:	4b3f      	ldr	r3, [pc, #252]	; (8003efc <HAL_RCC_OscConfig+0x2b0>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe f808 	bl	8001e18 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fe f804 	bl	8001e18 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e17b      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d030      	beq.n	8003e98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d016      	beq.n	8003e6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3e:	4b30      	ldr	r3, [pc, #192]	; (8003f00 <HAL_RCC_OscConfig+0x2b4>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e44:	f7fd ffe8 	bl	8001e18 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e4c:	f7fd ffe4 	bl	8001e18 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e15b      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5e:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x200>
 8003e6a:	e015      	b.n	8003e98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6c:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <HAL_RCC_OscConfig+0x2b4>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e72:	f7fd ffd1 	bl	8001e18 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7a:	f7fd ffcd 	bl	8001e18 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e144      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f0      	bne.n	8003e7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80a0 	beq.w	8003fe6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eaa:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10f      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	4a0e      	ldr	r2, [pc, #56]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_OscConfig+0x2b8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d121      	bne.n	8003f26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee2:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <HAL_RCC_OscConfig+0x2b8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a07      	ldr	r2, [pc, #28]	; (8003f04 <HAL_RCC_OscConfig+0x2b8>)
 8003ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eee:	f7fd ff93 	bl	8001e18 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	e011      	b.n	8003f1a <HAL_RCC_OscConfig+0x2ce>
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	42470000 	.word	0x42470000
 8003f00:	42470e80 	.word	0x42470e80
 8003f04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f08:	f7fd ff86 	bl	8001e18 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0fd      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1a:	4b81      	ldr	r3, [pc, #516]	; (8004120 <HAL_RCC_OscConfig+0x4d4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d106      	bne.n	8003f3c <HAL_RCC_OscConfig+0x2f0>
 8003f2e:	4b7d      	ldr	r3, [pc, #500]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	4a7c      	ldr	r2, [pc, #496]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3a:	e01c      	b.n	8003f76 <HAL_RCC_OscConfig+0x32a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b05      	cmp	r3, #5
 8003f42:	d10c      	bne.n	8003f5e <HAL_RCC_OscConfig+0x312>
 8003f44:	4b77      	ldr	r3, [pc, #476]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	4a76      	ldr	r2, [pc, #472]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003f4a:	f043 0304 	orr.w	r3, r3, #4
 8003f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f50:	4b74      	ldr	r3, [pc, #464]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	4a73      	ldr	r2, [pc, #460]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5c:	e00b      	b.n	8003f76 <HAL_RCC_OscConfig+0x32a>
 8003f5e:	4b71      	ldr	r3, [pc, #452]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	4a70      	ldr	r2, [pc, #448]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6a:	4b6e      	ldr	r3, [pc, #440]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	4a6d      	ldr	r2, [pc, #436]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003f70:	f023 0304 	bic.w	r3, r3, #4
 8003f74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d015      	beq.n	8003faa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7e:	f7fd ff4b 	bl	8001e18 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f84:	e00a      	b.n	8003f9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f86:	f7fd ff47 	bl	8001e18 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e0bc      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	4b61      	ldr	r3, [pc, #388]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0ee      	beq.n	8003f86 <HAL_RCC_OscConfig+0x33a>
 8003fa8:	e014      	b.n	8003fd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003faa:	f7fd ff35 	bl	8001e18 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb0:	e00a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fd ff31 	bl	8001e18 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e0a6      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc8:	4b56      	ldr	r3, [pc, #344]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ee      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d105      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fda:	4b52      	ldr	r3, [pc, #328]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	4a51      	ldr	r2, [pc, #324]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8092 	beq.w	8004114 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ff0:	4b4c      	ldr	r3, [pc, #304]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 030c 	and.w	r3, r3, #12
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d05c      	beq.n	80040b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d141      	bne.n	8004088 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004004:	4b48      	ldr	r3, [pc, #288]	; (8004128 <HAL_RCC_OscConfig+0x4dc>)
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400a:	f7fd ff05 	bl	8001e18 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004012:	f7fd ff01 	bl	8001e18 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e078      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004024:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f0      	bne.n	8004012 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	019b      	lsls	r3, r3, #6
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	3b01      	subs	r3, #1
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	061b      	lsls	r3, r3, #24
 8004054:	4933      	ldr	r1, [pc, #204]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 8004056:	4313      	orrs	r3, r2
 8004058:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800405a:	4b33      	ldr	r3, [pc, #204]	; (8004128 <HAL_RCC_OscConfig+0x4dc>)
 800405c:	2201      	movs	r2, #1
 800405e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fd feda 	bl	8001e18 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004068:	f7fd fed6 	bl	8001e18 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e04d      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407a:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f0      	beq.n	8004068 <HAL_RCC_OscConfig+0x41c>
 8004086:	e045      	b.n	8004114 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <HAL_RCC_OscConfig+0x4dc>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408e:	f7fd fec3 	bl	8001e18 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004096:	f7fd febf 	bl	8001e18 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e036      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a8:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCC_OscConfig+0x44a>
 80040b4:	e02e      	b.n	8004114 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e029      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040c2:	4b18      	ldr	r3, [pc, #96]	; (8004124 <HAL_RCC_OscConfig+0x4d8>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d11c      	bne.n	8004110 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d115      	bne.n	8004110 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040ea:	4013      	ands	r3, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d10d      	bne.n	8004110 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d106      	bne.n	8004110 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40007000 	.word	0x40007000
 8004124:	40023800 	.word	0x40023800
 8004128:	42470060 	.word	0x42470060

0800412c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0cc      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004140:	4b68      	ldr	r3, [pc, #416]	; (80042e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d90c      	bls.n	8004168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b65      	ldr	r3, [pc, #404]	; (80042e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b63      	ldr	r3, [pc, #396]	; (80042e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0b8      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d020      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004180:	4b59      	ldr	r3, [pc, #356]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4a58      	ldr	r2, [pc, #352]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800418a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004198:	4b53      	ldr	r3, [pc, #332]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a52      	ldr	r2, [pc, #328]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a4:	4b50      	ldr	r3, [pc, #320]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	494d      	ldr	r1, [pc, #308]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d044      	beq.n	800424c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d107      	bne.n	80041da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	4b47      	ldr	r3, [pc, #284]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d119      	bne.n	800420a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e07f      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d003      	beq.n	80041ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	4b3f      	ldr	r3, [pc, #252]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e06f      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fa:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e067      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420a:	4b37      	ldr	r3, [pc, #220]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 0203 	bic.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4934      	ldr	r1, [pc, #208]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	4313      	orrs	r3, r2
 800421a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800421c:	f7fd fdfc 	bl	8001e18 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	e00a      	b.n	800423a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004224:	f7fd fdf8 	bl	8001e18 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e04f      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	4b2b      	ldr	r3, [pc, #172]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 020c 	and.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	429a      	cmp	r2, r3
 800424a:	d1eb      	bne.n	8004224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <HAL_RCC_ClockConfig+0x1b8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d20c      	bcs.n	8004274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b22      	ldr	r3, [pc, #136]	; (80042e4 <HAL_RCC_ClockConfig+0x1b8>)
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e032      	b.n	80042da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004280:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4916      	ldr	r1, [pc, #88]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d009      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	490e      	ldr	r1, [pc, #56]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042b2:	f000 f821 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 80042b6:	4601      	mov	r1, r0
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <HAL_RCC_ClockConfig+0x1c0>)
 80042c4:	5cd3      	ldrb	r3, [r2, r3]
 80042c6:	fa21 f303 	lsr.w	r3, r1, r3
 80042ca:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ce:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_RCC_ClockConfig+0x1c8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fd fd5c 	bl	8001d90 <HAL_InitTick>

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40023c00 	.word	0x40023c00
 80042e8:	40023800 	.word	0x40023800
 80042ec:	08006ec0 	.word	0x08006ec0
 80042f0:	20000018 	.word	0x20000018
 80042f4:	2000001c 	.word	0x2000001c

080042f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	2300      	movs	r3, #0
 8004308:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800430e:	4b50      	ldr	r3, [pc, #320]	; (8004450 <HAL_RCC_GetSysClockFreq+0x158>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
 8004316:	2b04      	cmp	r3, #4
 8004318:	d007      	beq.n	800432a <HAL_RCC_GetSysClockFreq+0x32>
 800431a:	2b08      	cmp	r3, #8
 800431c:	d008      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x38>
 800431e:	2b00      	cmp	r3, #0
 8004320:	f040 808d 	bne.w	800443e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004324:	4b4b      	ldr	r3, [pc, #300]	; (8004454 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004326:	60bb      	str	r3, [r7, #8]
       break;
 8004328:	e08c      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800432a:	4b4b      	ldr	r3, [pc, #300]	; (8004458 <HAL_RCC_GetSysClockFreq+0x160>)
 800432c:	60bb      	str	r3, [r7, #8]
      break;
 800432e:	e089      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004330:	4b47      	ldr	r3, [pc, #284]	; (8004450 <HAL_RCC_GetSysClockFreq+0x158>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004338:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800433a:	4b45      	ldr	r3, [pc, #276]	; (8004450 <HAL_RCC_GetSysClockFreq+0x158>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d023      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004346:	4b42      	ldr	r3, [pc, #264]	; (8004450 <HAL_RCC_GetSysClockFreq+0x158>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	099b      	lsrs	r3, r3, #6
 800434c:	f04f 0400 	mov.w	r4, #0
 8004350:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	ea03 0501 	and.w	r5, r3, r1
 800435c:	ea04 0602 	and.w	r6, r4, r2
 8004360:	4a3d      	ldr	r2, [pc, #244]	; (8004458 <HAL_RCC_GetSysClockFreq+0x160>)
 8004362:	fb02 f106 	mul.w	r1, r2, r6
 8004366:	2200      	movs	r2, #0
 8004368:	fb02 f205 	mul.w	r2, r2, r5
 800436c:	440a      	add	r2, r1
 800436e:	493a      	ldr	r1, [pc, #232]	; (8004458 <HAL_RCC_GetSysClockFreq+0x160>)
 8004370:	fba5 0101 	umull	r0, r1, r5, r1
 8004374:	1853      	adds	r3, r2, r1
 8004376:	4619      	mov	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f04f 0400 	mov.w	r4, #0
 800437e:	461a      	mov	r2, r3
 8004380:	4623      	mov	r3, r4
 8004382:	f7fc fb63 	bl	8000a4c <__aeabi_uldivmod>
 8004386:	4603      	mov	r3, r0
 8004388:	460c      	mov	r4, r1
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	e049      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438e:	4b30      	ldr	r3, [pc, #192]	; (8004450 <HAL_RCC_GetSysClockFreq+0x158>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	099b      	lsrs	r3, r3, #6
 8004394:	f04f 0400 	mov.w	r4, #0
 8004398:	f240 11ff 	movw	r1, #511	; 0x1ff
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	ea03 0501 	and.w	r5, r3, r1
 80043a4:	ea04 0602 	and.w	r6, r4, r2
 80043a8:	4629      	mov	r1, r5
 80043aa:	4632      	mov	r2, r6
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	f04f 0400 	mov.w	r4, #0
 80043b4:	0154      	lsls	r4, r2, #5
 80043b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043ba:	014b      	lsls	r3, r1, #5
 80043bc:	4619      	mov	r1, r3
 80043be:	4622      	mov	r2, r4
 80043c0:	1b49      	subs	r1, r1, r5
 80043c2:	eb62 0206 	sbc.w	r2, r2, r6
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	f04f 0400 	mov.w	r4, #0
 80043ce:	0194      	lsls	r4, r2, #6
 80043d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043d4:	018b      	lsls	r3, r1, #6
 80043d6:	1a5b      	subs	r3, r3, r1
 80043d8:	eb64 0402 	sbc.w	r4, r4, r2
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	00e2      	lsls	r2, r4, #3
 80043e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043ea:	00d9      	lsls	r1, r3, #3
 80043ec:	460b      	mov	r3, r1
 80043ee:	4614      	mov	r4, r2
 80043f0:	195b      	adds	r3, r3, r5
 80043f2:	eb44 0406 	adc.w	r4, r4, r6
 80043f6:	f04f 0100 	mov.w	r1, #0
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	02a2      	lsls	r2, r4, #10
 8004400:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004404:	0299      	lsls	r1, r3, #10
 8004406:	460b      	mov	r3, r1
 8004408:	4614      	mov	r4, r2
 800440a:	4618      	mov	r0, r3
 800440c:	4621      	mov	r1, r4
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f04f 0400 	mov.w	r4, #0
 8004414:	461a      	mov	r2, r3
 8004416:	4623      	mov	r3, r4
 8004418:	f7fc fb18 	bl	8000a4c <__aeabi_uldivmod>
 800441c:	4603      	mov	r3, r0
 800441e:	460c      	mov	r4, r1
 8004420:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004422:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_RCC_GetSysClockFreq+0x158>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	0c1b      	lsrs	r3, r3, #16
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	3301      	adds	r3, #1
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	60bb      	str	r3, [r7, #8]
      break;
 800443c:	e002      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004440:	60bb      	str	r3, [r7, #8]
      break;
 8004442:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004444:	68bb      	ldr	r3, [r7, #8]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800
 8004454:	00f42400 	.word	0x00f42400
 8004458:	017d7840 	.word	0x017d7840

0800445c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <HAL_RCC_GetHCLKFreq+0x14>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000018 	.word	0x20000018

08004474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004478:	f7ff fff0 	bl	800445c <HAL_RCC_GetHCLKFreq>
 800447c:	4601      	mov	r1, r0
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0a9b      	lsrs	r3, r3, #10
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4a03      	ldr	r2, [pc, #12]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800448a:	5cd3      	ldrb	r3, [r2, r3]
 800448c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40023800 	.word	0x40023800
 8004498:	08006ed0 	.word	0x08006ed0

0800449c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2201      	movs	r2, #1
 80044ac:	6839      	ldr	r1, [r7, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fd89 	bl	8004fc6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a15      	ldr	r2, [pc, #84]	; (8004510 <HAL_TIM_PWM_Start+0x74>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_TIM_PWM_Start+0x2c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a14      	ldr	r2, [pc, #80]	; (8004514 <HAL_TIM_PWM_Start+0x78>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d101      	bne.n	80044cc <HAL_TIM_PWM_Start+0x30>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <HAL_TIM_PWM_Start+0x32>
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d007      	beq.n	8004504 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40010000 	.word	0x40010000
 8004514:	40010400 	.word	0x40010400

08004518 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e01d      	b.n	8004566 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fd fb08 	bl	8001b54 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f000 fa66 	bl	8004a28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b02      	cmp	r3, #2
 8004582:	d122      	bne.n	80045ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b02      	cmp	r3, #2
 8004590:	d11b      	bne.n	80045ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f06f 0202 	mvn.w	r2, #2
 800459a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fa1b 	bl	80049ec <HAL_TIM_IC_CaptureCallback>
 80045b6:	e005      	b.n	80045c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fa0d 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fa1e 	bl	8004a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d122      	bne.n	800461e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d11b      	bne.n	800461e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f06f 0204 	mvn.w	r2, #4
 80045ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f9f1 	bl	80049ec <HAL_TIM_IC_CaptureCallback>
 800460a:	e005      	b.n	8004618 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f9e3 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f9f4 	bl	8004a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b08      	cmp	r3, #8
 800462a:	d122      	bne.n	8004672 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b08      	cmp	r3, #8
 8004638:	d11b      	bne.n	8004672 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f06f 0208 	mvn.w	r2, #8
 8004642:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2204      	movs	r2, #4
 8004648:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f9c7 	bl	80049ec <HAL_TIM_IC_CaptureCallback>
 800465e:	e005      	b.n	800466c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f9b9 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f9ca 	bl	8004a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b10      	cmp	r3, #16
 800467e:	d122      	bne.n	80046c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b10      	cmp	r3, #16
 800468c:	d11b      	bne.n	80046c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f06f 0210 	mvn.w	r2, #16
 8004696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2208      	movs	r2, #8
 800469c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f99d 	bl	80049ec <HAL_TIM_IC_CaptureCallback>
 80046b2:	e005      	b.n	80046c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f98f 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f9a0 	bl	8004a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d10e      	bne.n	80046f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d107      	bne.n	80046f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f06f 0201 	mvn.w	r2, #1
 80046ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f969 	bl	80049c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fc:	2b80      	cmp	r3, #128	; 0x80
 80046fe:	d10e      	bne.n	800471e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470a:	2b80      	cmp	r3, #128	; 0x80
 800470c:	d107      	bne.n	800471e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fcff 	bl	800511c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b40      	cmp	r3, #64	; 0x40
 800472a:	d10e      	bne.n	800474a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d107      	bne.n	800474a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f965 	bl	8004a14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b20      	cmp	r3, #32
 8004756:	d10e      	bne.n	8004776 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b20      	cmp	r3, #32
 8004764:	d107      	bne.n	8004776 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f06f 0220 	mvn.w	r2, #32
 800476e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fcc9 	bl	8005108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004794:	2302      	movs	r3, #2
 8004796:	e08a      	b.n	80048ae <HAL_TIM_IC_ConfigChannel+0x130>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d11b      	bne.n	80047e6 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6819      	ldr	r1, [r3, #0]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f000 fa59 	bl	8004c74 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699a      	ldr	r2, [r3, #24]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 020c 	bic.w	r2, r2, #12
 80047d0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6999      	ldr	r1, [r3, #24]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	619a      	str	r2, [r3, #24]
 80047e4:	e05a      	b.n	800489c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d11c      	bne.n	8004826 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6819      	ldr	r1, [r3, #0]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f000 fadd 	bl	8004dba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800480e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6999      	ldr	r1, [r3, #24]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	021a      	lsls	r2, r3, #8
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	619a      	str	r2, [r3, #24]
 8004824:	e03a      	b.n	800489c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b08      	cmp	r3, #8
 800482a:	d11b      	bne.n	8004864 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f000 fb2a 	bl	8004e94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 020c 	bic.w	r2, r2, #12
 800484e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69d9      	ldr	r1, [r3, #28]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	61da      	str	r2, [r3, #28]
 8004862:	e01b      	b.n	800489c <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	6819      	ldr	r1, [r3, #0]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f000 fb4a 	bl	8004f0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004886:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69d9      	ldr	r1, [r3, #28]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	021a      	lsls	r2, r3, #8
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_TIM_SlaveConfigSynchro+0x18>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e031      	b.n	8004932 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80048de:	6839      	ldr	r1, [r7, #0]
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f941 	bl	8004b68 <TIM_SlaveTimer_SetConfig>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d009      	beq.n	8004900 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e018      	b.n	8004932 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800491e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b0c      	cmp	r3, #12
 800494e:	d831      	bhi.n	80049b4 <HAL_TIM_ReadCapturedValue+0x78>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	0800498d 	.word	0x0800498d
 800495c:	080049b5 	.word	0x080049b5
 8004960:	080049b5 	.word	0x080049b5
 8004964:	080049b5 	.word	0x080049b5
 8004968:	08004997 	.word	0x08004997
 800496c:	080049b5 	.word	0x080049b5
 8004970:	080049b5 	.word	0x080049b5
 8004974:	080049b5 	.word	0x080049b5
 8004978:	080049a1 	.word	0x080049a1
 800497c:	080049b5 	.word	0x080049b5
 8004980:	080049b5 	.word	0x080049b5
 8004984:	080049b5 	.word	0x080049b5
 8004988:	080049ab 	.word	0x080049ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004992:	60fb      	str	r3, [r7, #12]

      break;
 8004994:	e00f      	b.n	80049b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	60fb      	str	r3, [r7, #12]

      break;
 800499e:	e00a      	b.n	80049b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	60fb      	str	r3, [r7, #12]

      break;
 80049a8:	e005      	b.n	80049b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	60fb      	str	r3, [r7, #12]

      break;
 80049b2:	e000      	b.n	80049b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80049b4:	bf00      	nop
  }

  return tmpreg;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a40      	ldr	r2, [pc, #256]	; (8004b3c <TIM_Base_SetConfig+0x114>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a46:	d00f      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a3d      	ldr	r2, [pc, #244]	; (8004b40 <TIM_Base_SetConfig+0x118>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a3c      	ldr	r2, [pc, #240]	; (8004b44 <TIM_Base_SetConfig+0x11c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a3b      	ldr	r2, [pc, #236]	; (8004b48 <TIM_Base_SetConfig+0x120>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a3a      	ldr	r2, [pc, #232]	; (8004b4c <TIM_Base_SetConfig+0x124>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d108      	bne.n	8004a7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2f      	ldr	r2, [pc, #188]	; (8004b3c <TIM_Base_SetConfig+0x114>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02b      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a88:	d027      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2c      	ldr	r2, [pc, #176]	; (8004b40 <TIM_Base_SetConfig+0x118>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d023      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2b      	ldr	r2, [pc, #172]	; (8004b44 <TIM_Base_SetConfig+0x11c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01f      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2a      	ldr	r2, [pc, #168]	; (8004b48 <TIM_Base_SetConfig+0x120>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01b      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a29      	ldr	r2, [pc, #164]	; (8004b4c <TIM_Base_SetConfig+0x124>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d017      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a28      	ldr	r2, [pc, #160]	; (8004b50 <TIM_Base_SetConfig+0x128>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a27      	ldr	r2, [pc, #156]	; (8004b54 <TIM_Base_SetConfig+0x12c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00f      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a26      	ldr	r2, [pc, #152]	; (8004b58 <TIM_Base_SetConfig+0x130>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a25      	ldr	r2, [pc, #148]	; (8004b5c <TIM_Base_SetConfig+0x134>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a24      	ldr	r2, [pc, #144]	; (8004b60 <TIM_Base_SetConfig+0x138>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a23      	ldr	r2, [pc, #140]	; (8004b64 <TIM_Base_SetConfig+0x13c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d108      	bne.n	8004aec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <TIM_Base_SetConfig+0x114>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_Base_SetConfig+0xf8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a0c      	ldr	r2, [pc, #48]	; (8004b4c <TIM_Base_SetConfig+0x124>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d103      	bne.n	8004b28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	615a      	str	r2, [r3, #20]
}
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800
 8004b48:	40000c00 	.word	0x40000c00
 8004b4c:	40010400 	.word	0x40010400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800
 8004b5c:	40001800 	.word	0x40001800
 8004b60:	40001c00 	.word	0x40001c00
 8004b64:	40002000 	.word	0x40002000

08004b68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b80:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0307 	bic.w	r3, r3, #7
 8004b92:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b30      	cmp	r3, #48	; 0x30
 8004bac:	d05c      	beq.n	8004c68 <TIM_SlaveTimer_SetConfig+0x100>
 8004bae:	2b30      	cmp	r3, #48	; 0x30
 8004bb0:	d806      	bhi.n	8004bc0 <TIM_SlaveTimer_SetConfig+0x58>
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	d058      	beq.n	8004c68 <TIM_SlaveTimer_SetConfig+0x100>
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d056      	beq.n	8004c68 <TIM_SlaveTimer_SetConfig+0x100>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d054      	beq.n	8004c68 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8004bbe:	e054      	b.n	8004c6a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8004bc0:	2b50      	cmp	r3, #80	; 0x50
 8004bc2:	d03d      	beq.n	8004c40 <TIM_SlaveTimer_SetConfig+0xd8>
 8004bc4:	2b50      	cmp	r3, #80	; 0x50
 8004bc6:	d802      	bhi.n	8004bce <TIM_SlaveTimer_SetConfig+0x66>
 8004bc8:	2b40      	cmp	r3, #64	; 0x40
 8004bca:	d010      	beq.n	8004bee <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8004bcc:	e04d      	b.n	8004c6a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8004bce:	2b60      	cmp	r3, #96	; 0x60
 8004bd0:	d040      	beq.n	8004c54 <TIM_SlaveTimer_SetConfig+0xec>
 8004bd2:	2b70      	cmp	r3, #112	; 0x70
 8004bd4:	d000      	beq.n	8004bd8 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8004bd6:	e048      	b.n	8004c6a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68d9      	ldr	r1, [r3, #12]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f000 f9cd 	bl	8004f86 <TIM_ETR_SetConfig>
      break;
 8004bec:	e03d      	b.n	8004c6a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b05      	cmp	r3, #5
 8004bf4:	d101      	bne.n	8004bfa <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e038      	b.n	8004c6c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0201 	bic.w	r2, r2, #1
 8004c10:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c20:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	621a      	str	r2, [r3, #32]
      break;
 8004c3e:	e014      	b.n	8004c6a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	6899      	ldr	r1, [r3, #8]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f000 f885 	bl	8004d5c <TIM_TI1_ConfigInputStage>
      break;
 8004c52:	e00a      	b.n	8004c6a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6899      	ldr	r1, [r3, #8]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	461a      	mov	r2, r3
 8004c62:	f000 f8e7 	bl	8004e34 <TIM_TI2_ConfigInputStage>
      break;
 8004c66:	e000      	b.n	8004c6a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8004c68:	bf00      	nop
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f023 0201 	bic.w	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a28      	ldr	r2, [pc, #160]	; (8004d40 <TIM_TI1_SetConfig+0xcc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01b      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca8:	d017      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4a25      	ldr	r2, [pc, #148]	; (8004d44 <TIM_TI1_SetConfig+0xd0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a24      	ldr	r2, [pc, #144]	; (8004d48 <TIM_TI1_SetConfig+0xd4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a23      	ldr	r2, [pc, #140]	; (8004d4c <TIM_TI1_SetConfig+0xd8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a22      	ldr	r2, [pc, #136]	; (8004d50 <TIM_TI1_SetConfig+0xdc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <TIM_TI1_SetConfig+0xe0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_TI1_SetConfig+0x66>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4a20      	ldr	r2, [pc, #128]	; (8004d58 <TIM_TI1_SetConfig+0xe4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d101      	bne.n	8004cde <TIM_TI1_SetConfig+0x6a>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <TIM_TI1_SetConfig+0x6c>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e003      	b.n	8004cfe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f023 030a 	bic.w	r3, r3, #10
 8004d18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f003 030a 	and.w	r3, r3, #10
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40010000 	.word	0x40010000
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40000800 	.word	0x40000800
 8004d4c:	40000c00 	.word	0x40000c00
 8004d50:	40010400 	.word	0x40010400
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40001800 	.word	0x40001800

08004d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 030a 	bic.w	r3, r3, #10
 8004d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b087      	sub	sp, #28
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
 8004dc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f023 0210 	bic.w	r2, r3, #16
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	031b      	lsls	r3, r3, #12
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	621a      	str	r2, [r3, #32]
}
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f023 0210 	bic.w	r2, r3, #16
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	031b      	lsls	r3, r3, #12
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 0303 	bic.w	r3, r3, #3
 8004ec0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ed0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	621a      	str	r2, [r3, #32]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	031b      	lsls	r3, r3, #12
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	031b      	lsls	r3, r3, #12
 8004f64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b087      	sub	sp, #28
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
 8004f92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	021a      	lsls	r2, r3, #8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	609a      	str	r2, [r3, #8]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b087      	sub	sp, #28
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	2201      	movs	r2, #1
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a1a      	ldr	r2, [r3, #32]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	401a      	ands	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1a      	ldr	r2, [r3, #32]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffe:	431a      	orrs	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	621a      	str	r2, [r3, #32]
}
 8005004:	bf00      	nop
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005024:	2302      	movs	r3, #2
 8005026:	e05a      	b.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a21      	ldr	r2, [pc, #132]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d022      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005074:	d01d      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d018      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1b      	ldr	r2, [pc, #108]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00e      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d009      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a17      	ldr	r2, [pc, #92]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a15      	ldr	r2, [pc, #84]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10c      	bne.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40010400 	.word	0x40010400
 8005100:	40014000 	.word	0x40014000
 8005104:	40001800 	.word	0x40001800

08005108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <__errno>:
 8005130:	4b01      	ldr	r3, [pc, #4]	; (8005138 <__errno+0x8>)
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20000024 	.word	0x20000024

0800513c <__libc_init_array>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	4e0d      	ldr	r6, [pc, #52]	; (8005174 <__libc_init_array+0x38>)
 8005140:	4c0d      	ldr	r4, [pc, #52]	; (8005178 <__libc_init_array+0x3c>)
 8005142:	1ba4      	subs	r4, r4, r6
 8005144:	10a4      	asrs	r4, r4, #2
 8005146:	2500      	movs	r5, #0
 8005148:	42a5      	cmp	r5, r4
 800514a:	d109      	bne.n	8005160 <__libc_init_array+0x24>
 800514c:	4e0b      	ldr	r6, [pc, #44]	; (800517c <__libc_init_array+0x40>)
 800514e:	4c0c      	ldr	r4, [pc, #48]	; (8005180 <__libc_init_array+0x44>)
 8005150:	f000 fc26 	bl	80059a0 <_init>
 8005154:	1ba4      	subs	r4, r4, r6
 8005156:	10a4      	asrs	r4, r4, #2
 8005158:	2500      	movs	r5, #0
 800515a:	42a5      	cmp	r5, r4
 800515c:	d105      	bne.n	800516a <__libc_init_array+0x2e>
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005164:	4798      	blx	r3
 8005166:	3501      	adds	r5, #1
 8005168:	e7ee      	b.n	8005148 <__libc_init_array+0xc>
 800516a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800516e:	4798      	blx	r3
 8005170:	3501      	adds	r5, #1
 8005172:	e7f2      	b.n	800515a <__libc_init_array+0x1e>
 8005174:	08006f14 	.word	0x08006f14
 8005178:	08006f14 	.word	0x08006f14
 800517c:	08006f14 	.word	0x08006f14
 8005180:	08006f18 	.word	0x08006f18

08005184 <memset>:
 8005184:	4402      	add	r2, r0
 8005186:	4603      	mov	r3, r0
 8005188:	4293      	cmp	r3, r2
 800518a:	d100      	bne.n	800518e <memset+0xa>
 800518c:	4770      	bx	lr
 800518e:	f803 1b01 	strb.w	r1, [r3], #1
 8005192:	e7f9      	b.n	8005188 <memset+0x4>

08005194 <siprintf>:
 8005194:	b40e      	push	{r1, r2, r3}
 8005196:	b500      	push	{lr}
 8005198:	b09c      	sub	sp, #112	; 0x70
 800519a:	ab1d      	add	r3, sp, #116	; 0x74
 800519c:	9002      	str	r0, [sp, #8]
 800519e:	9006      	str	r0, [sp, #24]
 80051a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051a4:	4809      	ldr	r0, [pc, #36]	; (80051cc <siprintf+0x38>)
 80051a6:	9107      	str	r1, [sp, #28]
 80051a8:	9104      	str	r1, [sp, #16]
 80051aa:	4909      	ldr	r1, [pc, #36]	; (80051d0 <siprintf+0x3c>)
 80051ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80051b0:	9105      	str	r1, [sp, #20]
 80051b2:	6800      	ldr	r0, [r0, #0]
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	a902      	add	r1, sp, #8
 80051b8:	f000 f866 	bl	8005288 <_svfiprintf_r>
 80051bc:	9b02      	ldr	r3, [sp, #8]
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	b01c      	add	sp, #112	; 0x70
 80051c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051c8:	b003      	add	sp, #12
 80051ca:	4770      	bx	lr
 80051cc:	20000024 	.word	0x20000024
 80051d0:	ffff0208 	.word	0xffff0208

080051d4 <__ssputs_r>:
 80051d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d8:	688e      	ldr	r6, [r1, #8]
 80051da:	429e      	cmp	r6, r3
 80051dc:	4682      	mov	sl, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	4690      	mov	r8, r2
 80051e2:	4699      	mov	r9, r3
 80051e4:	d837      	bhi.n	8005256 <__ssputs_r+0x82>
 80051e6:	898a      	ldrh	r2, [r1, #12]
 80051e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051ec:	d031      	beq.n	8005252 <__ssputs_r+0x7e>
 80051ee:	6825      	ldr	r5, [r4, #0]
 80051f0:	6909      	ldr	r1, [r1, #16]
 80051f2:	1a6f      	subs	r7, r5, r1
 80051f4:	6965      	ldr	r5, [r4, #20]
 80051f6:	2302      	movs	r3, #2
 80051f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8005200:	f109 0301 	add.w	r3, r9, #1
 8005204:	443b      	add	r3, r7
 8005206:	429d      	cmp	r5, r3
 8005208:	bf38      	it	cc
 800520a:	461d      	movcc	r5, r3
 800520c:	0553      	lsls	r3, r2, #21
 800520e:	d530      	bpl.n	8005272 <__ssputs_r+0x9e>
 8005210:	4629      	mov	r1, r5
 8005212:	f000 fb2b 	bl	800586c <_malloc_r>
 8005216:	4606      	mov	r6, r0
 8005218:	b950      	cbnz	r0, 8005230 <__ssputs_r+0x5c>
 800521a:	230c      	movs	r3, #12
 800521c:	f8ca 3000 	str.w	r3, [sl]
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005226:	81a3      	strh	r3, [r4, #12]
 8005228:	f04f 30ff 	mov.w	r0, #4294967295
 800522c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005230:	463a      	mov	r2, r7
 8005232:	6921      	ldr	r1, [r4, #16]
 8005234:	f000 faa8 	bl	8005788 <memcpy>
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800523e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005242:	81a3      	strh	r3, [r4, #12]
 8005244:	6126      	str	r6, [r4, #16]
 8005246:	6165      	str	r5, [r4, #20]
 8005248:	443e      	add	r6, r7
 800524a:	1bed      	subs	r5, r5, r7
 800524c:	6026      	str	r6, [r4, #0]
 800524e:	60a5      	str	r5, [r4, #8]
 8005250:	464e      	mov	r6, r9
 8005252:	454e      	cmp	r6, r9
 8005254:	d900      	bls.n	8005258 <__ssputs_r+0x84>
 8005256:	464e      	mov	r6, r9
 8005258:	4632      	mov	r2, r6
 800525a:	4641      	mov	r1, r8
 800525c:	6820      	ldr	r0, [r4, #0]
 800525e:	f000 fa9e 	bl	800579e <memmove>
 8005262:	68a3      	ldr	r3, [r4, #8]
 8005264:	1b9b      	subs	r3, r3, r6
 8005266:	60a3      	str	r3, [r4, #8]
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	441e      	add	r6, r3
 800526c:	6026      	str	r6, [r4, #0]
 800526e:	2000      	movs	r0, #0
 8005270:	e7dc      	b.n	800522c <__ssputs_r+0x58>
 8005272:	462a      	mov	r2, r5
 8005274:	f000 fb54 	bl	8005920 <_realloc_r>
 8005278:	4606      	mov	r6, r0
 800527a:	2800      	cmp	r0, #0
 800527c:	d1e2      	bne.n	8005244 <__ssputs_r+0x70>
 800527e:	6921      	ldr	r1, [r4, #16]
 8005280:	4650      	mov	r0, sl
 8005282:	f000 faa5 	bl	80057d0 <_free_r>
 8005286:	e7c8      	b.n	800521a <__ssputs_r+0x46>

08005288 <_svfiprintf_r>:
 8005288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528c:	461d      	mov	r5, r3
 800528e:	898b      	ldrh	r3, [r1, #12]
 8005290:	061f      	lsls	r7, r3, #24
 8005292:	b09d      	sub	sp, #116	; 0x74
 8005294:	4680      	mov	r8, r0
 8005296:	460c      	mov	r4, r1
 8005298:	4616      	mov	r6, r2
 800529a:	d50f      	bpl.n	80052bc <_svfiprintf_r+0x34>
 800529c:	690b      	ldr	r3, [r1, #16]
 800529e:	b96b      	cbnz	r3, 80052bc <_svfiprintf_r+0x34>
 80052a0:	2140      	movs	r1, #64	; 0x40
 80052a2:	f000 fae3 	bl	800586c <_malloc_r>
 80052a6:	6020      	str	r0, [r4, #0]
 80052a8:	6120      	str	r0, [r4, #16]
 80052aa:	b928      	cbnz	r0, 80052b8 <_svfiprintf_r+0x30>
 80052ac:	230c      	movs	r3, #12
 80052ae:	f8c8 3000 	str.w	r3, [r8]
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
 80052b6:	e0c8      	b.n	800544a <_svfiprintf_r+0x1c2>
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	6163      	str	r3, [r4, #20]
 80052bc:	2300      	movs	r3, #0
 80052be:	9309      	str	r3, [sp, #36]	; 0x24
 80052c0:	2320      	movs	r3, #32
 80052c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052c6:	2330      	movs	r3, #48	; 0x30
 80052c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052cc:	9503      	str	r5, [sp, #12]
 80052ce:	f04f 0b01 	mov.w	fp, #1
 80052d2:	4637      	mov	r7, r6
 80052d4:	463d      	mov	r5, r7
 80052d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80052da:	b10b      	cbz	r3, 80052e0 <_svfiprintf_r+0x58>
 80052dc:	2b25      	cmp	r3, #37	; 0x25
 80052de:	d13e      	bne.n	800535e <_svfiprintf_r+0xd6>
 80052e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80052e4:	d00b      	beq.n	80052fe <_svfiprintf_r+0x76>
 80052e6:	4653      	mov	r3, sl
 80052e8:	4632      	mov	r2, r6
 80052ea:	4621      	mov	r1, r4
 80052ec:	4640      	mov	r0, r8
 80052ee:	f7ff ff71 	bl	80051d4 <__ssputs_r>
 80052f2:	3001      	adds	r0, #1
 80052f4:	f000 80a4 	beq.w	8005440 <_svfiprintf_r+0x1b8>
 80052f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fa:	4453      	add	r3, sl
 80052fc:	9309      	str	r3, [sp, #36]	; 0x24
 80052fe:	783b      	ldrb	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 809d 	beq.w	8005440 <_svfiprintf_r+0x1b8>
 8005306:	2300      	movs	r3, #0
 8005308:	f04f 32ff 	mov.w	r2, #4294967295
 800530c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005310:	9304      	str	r3, [sp, #16]
 8005312:	9307      	str	r3, [sp, #28]
 8005314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005318:	931a      	str	r3, [sp, #104]	; 0x68
 800531a:	462f      	mov	r7, r5
 800531c:	2205      	movs	r2, #5
 800531e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005322:	4850      	ldr	r0, [pc, #320]	; (8005464 <_svfiprintf_r+0x1dc>)
 8005324:	f7fa ff54 	bl	80001d0 <memchr>
 8005328:	9b04      	ldr	r3, [sp, #16]
 800532a:	b9d0      	cbnz	r0, 8005362 <_svfiprintf_r+0xda>
 800532c:	06d9      	lsls	r1, r3, #27
 800532e:	bf44      	itt	mi
 8005330:	2220      	movmi	r2, #32
 8005332:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005336:	071a      	lsls	r2, r3, #28
 8005338:	bf44      	itt	mi
 800533a:	222b      	movmi	r2, #43	; 0x2b
 800533c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005340:	782a      	ldrb	r2, [r5, #0]
 8005342:	2a2a      	cmp	r2, #42	; 0x2a
 8005344:	d015      	beq.n	8005372 <_svfiprintf_r+0xea>
 8005346:	9a07      	ldr	r2, [sp, #28]
 8005348:	462f      	mov	r7, r5
 800534a:	2000      	movs	r0, #0
 800534c:	250a      	movs	r5, #10
 800534e:	4639      	mov	r1, r7
 8005350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005354:	3b30      	subs	r3, #48	; 0x30
 8005356:	2b09      	cmp	r3, #9
 8005358:	d94d      	bls.n	80053f6 <_svfiprintf_r+0x16e>
 800535a:	b1b8      	cbz	r0, 800538c <_svfiprintf_r+0x104>
 800535c:	e00f      	b.n	800537e <_svfiprintf_r+0xf6>
 800535e:	462f      	mov	r7, r5
 8005360:	e7b8      	b.n	80052d4 <_svfiprintf_r+0x4c>
 8005362:	4a40      	ldr	r2, [pc, #256]	; (8005464 <_svfiprintf_r+0x1dc>)
 8005364:	1a80      	subs	r0, r0, r2
 8005366:	fa0b f000 	lsl.w	r0, fp, r0
 800536a:	4318      	orrs	r0, r3
 800536c:	9004      	str	r0, [sp, #16]
 800536e:	463d      	mov	r5, r7
 8005370:	e7d3      	b.n	800531a <_svfiprintf_r+0x92>
 8005372:	9a03      	ldr	r2, [sp, #12]
 8005374:	1d11      	adds	r1, r2, #4
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	9103      	str	r1, [sp, #12]
 800537a:	2a00      	cmp	r2, #0
 800537c:	db01      	blt.n	8005382 <_svfiprintf_r+0xfa>
 800537e:	9207      	str	r2, [sp, #28]
 8005380:	e004      	b.n	800538c <_svfiprintf_r+0x104>
 8005382:	4252      	negs	r2, r2
 8005384:	f043 0302 	orr.w	r3, r3, #2
 8005388:	9207      	str	r2, [sp, #28]
 800538a:	9304      	str	r3, [sp, #16]
 800538c:	783b      	ldrb	r3, [r7, #0]
 800538e:	2b2e      	cmp	r3, #46	; 0x2e
 8005390:	d10c      	bne.n	80053ac <_svfiprintf_r+0x124>
 8005392:	787b      	ldrb	r3, [r7, #1]
 8005394:	2b2a      	cmp	r3, #42	; 0x2a
 8005396:	d133      	bne.n	8005400 <_svfiprintf_r+0x178>
 8005398:	9b03      	ldr	r3, [sp, #12]
 800539a:	1d1a      	adds	r2, r3, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	9203      	str	r2, [sp, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bfb8      	it	lt
 80053a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80053a8:	3702      	adds	r7, #2
 80053aa:	9305      	str	r3, [sp, #20]
 80053ac:	4d2e      	ldr	r5, [pc, #184]	; (8005468 <_svfiprintf_r+0x1e0>)
 80053ae:	7839      	ldrb	r1, [r7, #0]
 80053b0:	2203      	movs	r2, #3
 80053b2:	4628      	mov	r0, r5
 80053b4:	f7fa ff0c 	bl	80001d0 <memchr>
 80053b8:	b138      	cbz	r0, 80053ca <_svfiprintf_r+0x142>
 80053ba:	2340      	movs	r3, #64	; 0x40
 80053bc:	1b40      	subs	r0, r0, r5
 80053be:	fa03 f000 	lsl.w	r0, r3, r0
 80053c2:	9b04      	ldr	r3, [sp, #16]
 80053c4:	4303      	orrs	r3, r0
 80053c6:	3701      	adds	r7, #1
 80053c8:	9304      	str	r3, [sp, #16]
 80053ca:	7839      	ldrb	r1, [r7, #0]
 80053cc:	4827      	ldr	r0, [pc, #156]	; (800546c <_svfiprintf_r+0x1e4>)
 80053ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053d2:	2206      	movs	r2, #6
 80053d4:	1c7e      	adds	r6, r7, #1
 80053d6:	f7fa fefb 	bl	80001d0 <memchr>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d038      	beq.n	8005450 <_svfiprintf_r+0x1c8>
 80053de:	4b24      	ldr	r3, [pc, #144]	; (8005470 <_svfiprintf_r+0x1e8>)
 80053e0:	bb13      	cbnz	r3, 8005428 <_svfiprintf_r+0x1a0>
 80053e2:	9b03      	ldr	r3, [sp, #12]
 80053e4:	3307      	adds	r3, #7
 80053e6:	f023 0307 	bic.w	r3, r3, #7
 80053ea:	3308      	adds	r3, #8
 80053ec:	9303      	str	r3, [sp, #12]
 80053ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f0:	444b      	add	r3, r9
 80053f2:	9309      	str	r3, [sp, #36]	; 0x24
 80053f4:	e76d      	b.n	80052d2 <_svfiprintf_r+0x4a>
 80053f6:	fb05 3202 	mla	r2, r5, r2, r3
 80053fa:	2001      	movs	r0, #1
 80053fc:	460f      	mov	r7, r1
 80053fe:	e7a6      	b.n	800534e <_svfiprintf_r+0xc6>
 8005400:	2300      	movs	r3, #0
 8005402:	3701      	adds	r7, #1
 8005404:	9305      	str	r3, [sp, #20]
 8005406:	4619      	mov	r1, r3
 8005408:	250a      	movs	r5, #10
 800540a:	4638      	mov	r0, r7
 800540c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005410:	3a30      	subs	r2, #48	; 0x30
 8005412:	2a09      	cmp	r2, #9
 8005414:	d903      	bls.n	800541e <_svfiprintf_r+0x196>
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0c8      	beq.n	80053ac <_svfiprintf_r+0x124>
 800541a:	9105      	str	r1, [sp, #20]
 800541c:	e7c6      	b.n	80053ac <_svfiprintf_r+0x124>
 800541e:	fb05 2101 	mla	r1, r5, r1, r2
 8005422:	2301      	movs	r3, #1
 8005424:	4607      	mov	r7, r0
 8005426:	e7f0      	b.n	800540a <_svfiprintf_r+0x182>
 8005428:	ab03      	add	r3, sp, #12
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	4622      	mov	r2, r4
 800542e:	4b11      	ldr	r3, [pc, #68]	; (8005474 <_svfiprintf_r+0x1ec>)
 8005430:	a904      	add	r1, sp, #16
 8005432:	4640      	mov	r0, r8
 8005434:	f3af 8000 	nop.w
 8005438:	f1b0 3fff 	cmp.w	r0, #4294967295
 800543c:	4681      	mov	r9, r0
 800543e:	d1d6      	bne.n	80053ee <_svfiprintf_r+0x166>
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	065b      	lsls	r3, r3, #25
 8005444:	f53f af35 	bmi.w	80052b2 <_svfiprintf_r+0x2a>
 8005448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800544a:	b01d      	add	sp, #116	; 0x74
 800544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005450:	ab03      	add	r3, sp, #12
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	4622      	mov	r2, r4
 8005456:	4b07      	ldr	r3, [pc, #28]	; (8005474 <_svfiprintf_r+0x1ec>)
 8005458:	a904      	add	r1, sp, #16
 800545a:	4640      	mov	r0, r8
 800545c:	f000 f882 	bl	8005564 <_printf_i>
 8005460:	e7ea      	b.n	8005438 <_svfiprintf_r+0x1b0>
 8005462:	bf00      	nop
 8005464:	08006ed8 	.word	0x08006ed8
 8005468:	08006ede 	.word	0x08006ede
 800546c:	08006ee2 	.word	0x08006ee2
 8005470:	00000000 	.word	0x00000000
 8005474:	080051d5 	.word	0x080051d5

08005478 <_printf_common>:
 8005478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800547c:	4691      	mov	r9, r2
 800547e:	461f      	mov	r7, r3
 8005480:	688a      	ldr	r2, [r1, #8]
 8005482:	690b      	ldr	r3, [r1, #16]
 8005484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005488:	4293      	cmp	r3, r2
 800548a:	bfb8      	it	lt
 800548c:	4613      	movlt	r3, r2
 800548e:	f8c9 3000 	str.w	r3, [r9]
 8005492:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005496:	4606      	mov	r6, r0
 8005498:	460c      	mov	r4, r1
 800549a:	b112      	cbz	r2, 80054a2 <_printf_common+0x2a>
 800549c:	3301      	adds	r3, #1
 800549e:	f8c9 3000 	str.w	r3, [r9]
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	0699      	lsls	r1, r3, #26
 80054a6:	bf42      	ittt	mi
 80054a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80054ac:	3302      	addmi	r3, #2
 80054ae:	f8c9 3000 	strmi.w	r3, [r9]
 80054b2:	6825      	ldr	r5, [r4, #0]
 80054b4:	f015 0506 	ands.w	r5, r5, #6
 80054b8:	d107      	bne.n	80054ca <_printf_common+0x52>
 80054ba:	f104 0a19 	add.w	sl, r4, #25
 80054be:	68e3      	ldr	r3, [r4, #12]
 80054c0:	f8d9 2000 	ldr.w	r2, [r9]
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	42ab      	cmp	r3, r5
 80054c8:	dc28      	bgt.n	800551c <_printf_common+0xa4>
 80054ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	3300      	adds	r3, #0
 80054d2:	bf18      	it	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	0692      	lsls	r2, r2, #26
 80054d8:	d42d      	bmi.n	8005536 <_printf_common+0xbe>
 80054da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054de:	4639      	mov	r1, r7
 80054e0:	4630      	mov	r0, r6
 80054e2:	47c0      	blx	r8
 80054e4:	3001      	adds	r0, #1
 80054e6:	d020      	beq.n	800552a <_printf_common+0xb2>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	68e5      	ldr	r5, [r4, #12]
 80054ec:	f8d9 2000 	ldr.w	r2, [r9]
 80054f0:	f003 0306 	and.w	r3, r3, #6
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	bf08      	it	eq
 80054f8:	1aad      	subeq	r5, r5, r2
 80054fa:	68a3      	ldr	r3, [r4, #8]
 80054fc:	6922      	ldr	r2, [r4, #16]
 80054fe:	bf0c      	ite	eq
 8005500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005504:	2500      	movne	r5, #0
 8005506:	4293      	cmp	r3, r2
 8005508:	bfc4      	itt	gt
 800550a:	1a9b      	subgt	r3, r3, r2
 800550c:	18ed      	addgt	r5, r5, r3
 800550e:	f04f 0900 	mov.w	r9, #0
 8005512:	341a      	adds	r4, #26
 8005514:	454d      	cmp	r5, r9
 8005516:	d11a      	bne.n	800554e <_printf_common+0xd6>
 8005518:	2000      	movs	r0, #0
 800551a:	e008      	b.n	800552e <_printf_common+0xb6>
 800551c:	2301      	movs	r3, #1
 800551e:	4652      	mov	r2, sl
 8005520:	4639      	mov	r1, r7
 8005522:	4630      	mov	r0, r6
 8005524:	47c0      	blx	r8
 8005526:	3001      	adds	r0, #1
 8005528:	d103      	bne.n	8005532 <_printf_common+0xba>
 800552a:	f04f 30ff 	mov.w	r0, #4294967295
 800552e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005532:	3501      	adds	r5, #1
 8005534:	e7c3      	b.n	80054be <_printf_common+0x46>
 8005536:	18e1      	adds	r1, r4, r3
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	2030      	movs	r0, #48	; 0x30
 800553c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005540:	4422      	add	r2, r4
 8005542:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005546:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800554a:	3302      	adds	r3, #2
 800554c:	e7c5      	b.n	80054da <_printf_common+0x62>
 800554e:	2301      	movs	r3, #1
 8005550:	4622      	mov	r2, r4
 8005552:	4639      	mov	r1, r7
 8005554:	4630      	mov	r0, r6
 8005556:	47c0      	blx	r8
 8005558:	3001      	adds	r0, #1
 800555a:	d0e6      	beq.n	800552a <_printf_common+0xb2>
 800555c:	f109 0901 	add.w	r9, r9, #1
 8005560:	e7d8      	b.n	8005514 <_printf_common+0x9c>
	...

08005564 <_printf_i>:
 8005564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005568:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800556c:	460c      	mov	r4, r1
 800556e:	7e09      	ldrb	r1, [r1, #24]
 8005570:	b085      	sub	sp, #20
 8005572:	296e      	cmp	r1, #110	; 0x6e
 8005574:	4617      	mov	r7, r2
 8005576:	4606      	mov	r6, r0
 8005578:	4698      	mov	r8, r3
 800557a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800557c:	f000 80b3 	beq.w	80056e6 <_printf_i+0x182>
 8005580:	d822      	bhi.n	80055c8 <_printf_i+0x64>
 8005582:	2963      	cmp	r1, #99	; 0x63
 8005584:	d036      	beq.n	80055f4 <_printf_i+0x90>
 8005586:	d80a      	bhi.n	800559e <_printf_i+0x3a>
 8005588:	2900      	cmp	r1, #0
 800558a:	f000 80b9 	beq.w	8005700 <_printf_i+0x19c>
 800558e:	2958      	cmp	r1, #88	; 0x58
 8005590:	f000 8083 	beq.w	800569a <_printf_i+0x136>
 8005594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005598:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800559c:	e032      	b.n	8005604 <_printf_i+0xa0>
 800559e:	2964      	cmp	r1, #100	; 0x64
 80055a0:	d001      	beq.n	80055a6 <_printf_i+0x42>
 80055a2:	2969      	cmp	r1, #105	; 0x69
 80055a4:	d1f6      	bne.n	8005594 <_printf_i+0x30>
 80055a6:	6820      	ldr	r0, [r4, #0]
 80055a8:	6813      	ldr	r3, [r2, #0]
 80055aa:	0605      	lsls	r5, r0, #24
 80055ac:	f103 0104 	add.w	r1, r3, #4
 80055b0:	d52a      	bpl.n	8005608 <_printf_i+0xa4>
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6011      	str	r1, [r2, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	da03      	bge.n	80055c2 <_printf_i+0x5e>
 80055ba:	222d      	movs	r2, #45	; 0x2d
 80055bc:	425b      	negs	r3, r3
 80055be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80055c2:	486f      	ldr	r0, [pc, #444]	; (8005780 <_printf_i+0x21c>)
 80055c4:	220a      	movs	r2, #10
 80055c6:	e039      	b.n	800563c <_printf_i+0xd8>
 80055c8:	2973      	cmp	r1, #115	; 0x73
 80055ca:	f000 809d 	beq.w	8005708 <_printf_i+0x1a4>
 80055ce:	d808      	bhi.n	80055e2 <_printf_i+0x7e>
 80055d0:	296f      	cmp	r1, #111	; 0x6f
 80055d2:	d020      	beq.n	8005616 <_printf_i+0xb2>
 80055d4:	2970      	cmp	r1, #112	; 0x70
 80055d6:	d1dd      	bne.n	8005594 <_printf_i+0x30>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	f043 0320 	orr.w	r3, r3, #32
 80055de:	6023      	str	r3, [r4, #0]
 80055e0:	e003      	b.n	80055ea <_printf_i+0x86>
 80055e2:	2975      	cmp	r1, #117	; 0x75
 80055e4:	d017      	beq.n	8005616 <_printf_i+0xb2>
 80055e6:	2978      	cmp	r1, #120	; 0x78
 80055e8:	d1d4      	bne.n	8005594 <_printf_i+0x30>
 80055ea:	2378      	movs	r3, #120	; 0x78
 80055ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055f0:	4864      	ldr	r0, [pc, #400]	; (8005784 <_printf_i+0x220>)
 80055f2:	e055      	b.n	80056a0 <_printf_i+0x13c>
 80055f4:	6813      	ldr	r3, [r2, #0]
 80055f6:	1d19      	adds	r1, r3, #4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6011      	str	r1, [r2, #0]
 80055fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005604:	2301      	movs	r3, #1
 8005606:	e08c      	b.n	8005722 <_printf_i+0x1be>
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6011      	str	r1, [r2, #0]
 800560c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005610:	bf18      	it	ne
 8005612:	b21b      	sxthne	r3, r3
 8005614:	e7cf      	b.n	80055b6 <_printf_i+0x52>
 8005616:	6813      	ldr	r3, [r2, #0]
 8005618:	6825      	ldr	r5, [r4, #0]
 800561a:	1d18      	adds	r0, r3, #4
 800561c:	6010      	str	r0, [r2, #0]
 800561e:	0628      	lsls	r0, r5, #24
 8005620:	d501      	bpl.n	8005626 <_printf_i+0xc2>
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	e002      	b.n	800562c <_printf_i+0xc8>
 8005626:	0668      	lsls	r0, r5, #25
 8005628:	d5fb      	bpl.n	8005622 <_printf_i+0xbe>
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	4854      	ldr	r0, [pc, #336]	; (8005780 <_printf_i+0x21c>)
 800562e:	296f      	cmp	r1, #111	; 0x6f
 8005630:	bf14      	ite	ne
 8005632:	220a      	movne	r2, #10
 8005634:	2208      	moveq	r2, #8
 8005636:	2100      	movs	r1, #0
 8005638:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800563c:	6865      	ldr	r5, [r4, #4]
 800563e:	60a5      	str	r5, [r4, #8]
 8005640:	2d00      	cmp	r5, #0
 8005642:	f2c0 8095 	blt.w	8005770 <_printf_i+0x20c>
 8005646:	6821      	ldr	r1, [r4, #0]
 8005648:	f021 0104 	bic.w	r1, r1, #4
 800564c:	6021      	str	r1, [r4, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d13d      	bne.n	80056ce <_printf_i+0x16a>
 8005652:	2d00      	cmp	r5, #0
 8005654:	f040 808e 	bne.w	8005774 <_printf_i+0x210>
 8005658:	4665      	mov	r5, ip
 800565a:	2a08      	cmp	r2, #8
 800565c:	d10b      	bne.n	8005676 <_printf_i+0x112>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	07db      	lsls	r3, r3, #31
 8005662:	d508      	bpl.n	8005676 <_printf_i+0x112>
 8005664:	6923      	ldr	r3, [r4, #16]
 8005666:	6862      	ldr	r2, [r4, #4]
 8005668:	429a      	cmp	r2, r3
 800566a:	bfde      	ittt	le
 800566c:	2330      	movle	r3, #48	; 0x30
 800566e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005672:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005676:	ebac 0305 	sub.w	r3, ip, r5
 800567a:	6123      	str	r3, [r4, #16]
 800567c:	f8cd 8000 	str.w	r8, [sp]
 8005680:	463b      	mov	r3, r7
 8005682:	aa03      	add	r2, sp, #12
 8005684:	4621      	mov	r1, r4
 8005686:	4630      	mov	r0, r6
 8005688:	f7ff fef6 	bl	8005478 <_printf_common>
 800568c:	3001      	adds	r0, #1
 800568e:	d14d      	bne.n	800572c <_printf_i+0x1c8>
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	b005      	add	sp, #20
 8005696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800569a:	4839      	ldr	r0, [pc, #228]	; (8005780 <_printf_i+0x21c>)
 800569c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80056a0:	6813      	ldr	r3, [r2, #0]
 80056a2:	6821      	ldr	r1, [r4, #0]
 80056a4:	1d1d      	adds	r5, r3, #4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6015      	str	r5, [r2, #0]
 80056aa:	060a      	lsls	r2, r1, #24
 80056ac:	d50b      	bpl.n	80056c6 <_printf_i+0x162>
 80056ae:	07ca      	lsls	r2, r1, #31
 80056b0:	bf44      	itt	mi
 80056b2:	f041 0120 	orrmi.w	r1, r1, #32
 80056b6:	6021      	strmi	r1, [r4, #0]
 80056b8:	b91b      	cbnz	r3, 80056c2 <_printf_i+0x15e>
 80056ba:	6822      	ldr	r2, [r4, #0]
 80056bc:	f022 0220 	bic.w	r2, r2, #32
 80056c0:	6022      	str	r2, [r4, #0]
 80056c2:	2210      	movs	r2, #16
 80056c4:	e7b7      	b.n	8005636 <_printf_i+0xd2>
 80056c6:	064d      	lsls	r5, r1, #25
 80056c8:	bf48      	it	mi
 80056ca:	b29b      	uxthmi	r3, r3
 80056cc:	e7ef      	b.n	80056ae <_printf_i+0x14a>
 80056ce:	4665      	mov	r5, ip
 80056d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80056d4:	fb02 3311 	mls	r3, r2, r1, r3
 80056d8:	5cc3      	ldrb	r3, [r0, r3]
 80056da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80056de:	460b      	mov	r3, r1
 80056e0:	2900      	cmp	r1, #0
 80056e2:	d1f5      	bne.n	80056d0 <_printf_i+0x16c>
 80056e4:	e7b9      	b.n	800565a <_printf_i+0xf6>
 80056e6:	6813      	ldr	r3, [r2, #0]
 80056e8:	6825      	ldr	r5, [r4, #0]
 80056ea:	6961      	ldr	r1, [r4, #20]
 80056ec:	1d18      	adds	r0, r3, #4
 80056ee:	6010      	str	r0, [r2, #0]
 80056f0:	0628      	lsls	r0, r5, #24
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	d501      	bpl.n	80056fa <_printf_i+0x196>
 80056f6:	6019      	str	r1, [r3, #0]
 80056f8:	e002      	b.n	8005700 <_printf_i+0x19c>
 80056fa:	066a      	lsls	r2, r5, #25
 80056fc:	d5fb      	bpl.n	80056f6 <_printf_i+0x192>
 80056fe:	8019      	strh	r1, [r3, #0]
 8005700:	2300      	movs	r3, #0
 8005702:	6123      	str	r3, [r4, #16]
 8005704:	4665      	mov	r5, ip
 8005706:	e7b9      	b.n	800567c <_printf_i+0x118>
 8005708:	6813      	ldr	r3, [r2, #0]
 800570a:	1d19      	adds	r1, r3, #4
 800570c:	6011      	str	r1, [r2, #0]
 800570e:	681d      	ldr	r5, [r3, #0]
 8005710:	6862      	ldr	r2, [r4, #4]
 8005712:	2100      	movs	r1, #0
 8005714:	4628      	mov	r0, r5
 8005716:	f7fa fd5b 	bl	80001d0 <memchr>
 800571a:	b108      	cbz	r0, 8005720 <_printf_i+0x1bc>
 800571c:	1b40      	subs	r0, r0, r5
 800571e:	6060      	str	r0, [r4, #4]
 8005720:	6863      	ldr	r3, [r4, #4]
 8005722:	6123      	str	r3, [r4, #16]
 8005724:	2300      	movs	r3, #0
 8005726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800572a:	e7a7      	b.n	800567c <_printf_i+0x118>
 800572c:	6923      	ldr	r3, [r4, #16]
 800572e:	462a      	mov	r2, r5
 8005730:	4639      	mov	r1, r7
 8005732:	4630      	mov	r0, r6
 8005734:	47c0      	blx	r8
 8005736:	3001      	adds	r0, #1
 8005738:	d0aa      	beq.n	8005690 <_printf_i+0x12c>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	079b      	lsls	r3, r3, #30
 800573e:	d413      	bmi.n	8005768 <_printf_i+0x204>
 8005740:	68e0      	ldr	r0, [r4, #12]
 8005742:	9b03      	ldr	r3, [sp, #12]
 8005744:	4298      	cmp	r0, r3
 8005746:	bfb8      	it	lt
 8005748:	4618      	movlt	r0, r3
 800574a:	e7a3      	b.n	8005694 <_printf_i+0x130>
 800574c:	2301      	movs	r3, #1
 800574e:	464a      	mov	r2, r9
 8005750:	4639      	mov	r1, r7
 8005752:	4630      	mov	r0, r6
 8005754:	47c0      	blx	r8
 8005756:	3001      	adds	r0, #1
 8005758:	d09a      	beq.n	8005690 <_printf_i+0x12c>
 800575a:	3501      	adds	r5, #1
 800575c:	68e3      	ldr	r3, [r4, #12]
 800575e:	9a03      	ldr	r2, [sp, #12]
 8005760:	1a9b      	subs	r3, r3, r2
 8005762:	42ab      	cmp	r3, r5
 8005764:	dcf2      	bgt.n	800574c <_printf_i+0x1e8>
 8005766:	e7eb      	b.n	8005740 <_printf_i+0x1dc>
 8005768:	2500      	movs	r5, #0
 800576a:	f104 0919 	add.w	r9, r4, #25
 800576e:	e7f5      	b.n	800575c <_printf_i+0x1f8>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1ac      	bne.n	80056ce <_printf_i+0x16a>
 8005774:	7803      	ldrb	r3, [r0, #0]
 8005776:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800577a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800577e:	e76c      	b.n	800565a <_printf_i+0xf6>
 8005780:	08006ee9 	.word	0x08006ee9
 8005784:	08006efa 	.word	0x08006efa

08005788 <memcpy>:
 8005788:	b510      	push	{r4, lr}
 800578a:	1e43      	subs	r3, r0, #1
 800578c:	440a      	add	r2, r1
 800578e:	4291      	cmp	r1, r2
 8005790:	d100      	bne.n	8005794 <memcpy+0xc>
 8005792:	bd10      	pop	{r4, pc}
 8005794:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005798:	f803 4f01 	strb.w	r4, [r3, #1]!
 800579c:	e7f7      	b.n	800578e <memcpy+0x6>

0800579e <memmove>:
 800579e:	4288      	cmp	r0, r1
 80057a0:	b510      	push	{r4, lr}
 80057a2:	eb01 0302 	add.w	r3, r1, r2
 80057a6:	d807      	bhi.n	80057b8 <memmove+0x1a>
 80057a8:	1e42      	subs	r2, r0, #1
 80057aa:	4299      	cmp	r1, r3
 80057ac:	d00a      	beq.n	80057c4 <memmove+0x26>
 80057ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057b2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80057b6:	e7f8      	b.n	80057aa <memmove+0xc>
 80057b8:	4283      	cmp	r3, r0
 80057ba:	d9f5      	bls.n	80057a8 <memmove+0xa>
 80057bc:	1881      	adds	r1, r0, r2
 80057be:	1ad2      	subs	r2, r2, r3
 80057c0:	42d3      	cmn	r3, r2
 80057c2:	d100      	bne.n	80057c6 <memmove+0x28>
 80057c4:	bd10      	pop	{r4, pc}
 80057c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80057ce:	e7f7      	b.n	80057c0 <memmove+0x22>

080057d0 <_free_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4605      	mov	r5, r0
 80057d4:	2900      	cmp	r1, #0
 80057d6:	d045      	beq.n	8005864 <_free_r+0x94>
 80057d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057dc:	1f0c      	subs	r4, r1, #4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bfb8      	it	lt
 80057e2:	18e4      	addlt	r4, r4, r3
 80057e4:	f000 f8d2 	bl	800598c <__malloc_lock>
 80057e8:	4a1f      	ldr	r2, [pc, #124]	; (8005868 <_free_r+0x98>)
 80057ea:	6813      	ldr	r3, [r2, #0]
 80057ec:	4610      	mov	r0, r2
 80057ee:	b933      	cbnz	r3, 80057fe <_free_r+0x2e>
 80057f0:	6063      	str	r3, [r4, #4]
 80057f2:	6014      	str	r4, [r2, #0]
 80057f4:	4628      	mov	r0, r5
 80057f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057fa:	f000 b8c8 	b.w	800598e <__malloc_unlock>
 80057fe:	42a3      	cmp	r3, r4
 8005800:	d90c      	bls.n	800581c <_free_r+0x4c>
 8005802:	6821      	ldr	r1, [r4, #0]
 8005804:	1862      	adds	r2, r4, r1
 8005806:	4293      	cmp	r3, r2
 8005808:	bf04      	itt	eq
 800580a:	681a      	ldreq	r2, [r3, #0]
 800580c:	685b      	ldreq	r3, [r3, #4]
 800580e:	6063      	str	r3, [r4, #4]
 8005810:	bf04      	itt	eq
 8005812:	1852      	addeq	r2, r2, r1
 8005814:	6022      	streq	r2, [r4, #0]
 8005816:	6004      	str	r4, [r0, #0]
 8005818:	e7ec      	b.n	80057f4 <_free_r+0x24>
 800581a:	4613      	mov	r3, r2
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	b10a      	cbz	r2, 8005824 <_free_r+0x54>
 8005820:	42a2      	cmp	r2, r4
 8005822:	d9fa      	bls.n	800581a <_free_r+0x4a>
 8005824:	6819      	ldr	r1, [r3, #0]
 8005826:	1858      	adds	r0, r3, r1
 8005828:	42a0      	cmp	r0, r4
 800582a:	d10b      	bne.n	8005844 <_free_r+0x74>
 800582c:	6820      	ldr	r0, [r4, #0]
 800582e:	4401      	add	r1, r0
 8005830:	1858      	adds	r0, r3, r1
 8005832:	4282      	cmp	r2, r0
 8005834:	6019      	str	r1, [r3, #0]
 8005836:	d1dd      	bne.n	80057f4 <_free_r+0x24>
 8005838:	6810      	ldr	r0, [r2, #0]
 800583a:	6852      	ldr	r2, [r2, #4]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	4401      	add	r1, r0
 8005840:	6019      	str	r1, [r3, #0]
 8005842:	e7d7      	b.n	80057f4 <_free_r+0x24>
 8005844:	d902      	bls.n	800584c <_free_r+0x7c>
 8005846:	230c      	movs	r3, #12
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	e7d3      	b.n	80057f4 <_free_r+0x24>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	1821      	adds	r1, r4, r0
 8005850:	428a      	cmp	r2, r1
 8005852:	bf04      	itt	eq
 8005854:	6811      	ldreq	r1, [r2, #0]
 8005856:	6852      	ldreq	r2, [r2, #4]
 8005858:	6062      	str	r2, [r4, #4]
 800585a:	bf04      	itt	eq
 800585c:	1809      	addeq	r1, r1, r0
 800585e:	6021      	streq	r1, [r4, #0]
 8005860:	605c      	str	r4, [r3, #4]
 8005862:	e7c7      	b.n	80057f4 <_free_r+0x24>
 8005864:	bd38      	pop	{r3, r4, r5, pc}
 8005866:	bf00      	nop
 8005868:	200004bc 	.word	0x200004bc

0800586c <_malloc_r>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	1ccd      	adds	r5, r1, #3
 8005870:	f025 0503 	bic.w	r5, r5, #3
 8005874:	3508      	adds	r5, #8
 8005876:	2d0c      	cmp	r5, #12
 8005878:	bf38      	it	cc
 800587a:	250c      	movcc	r5, #12
 800587c:	2d00      	cmp	r5, #0
 800587e:	4606      	mov	r6, r0
 8005880:	db01      	blt.n	8005886 <_malloc_r+0x1a>
 8005882:	42a9      	cmp	r1, r5
 8005884:	d903      	bls.n	800588e <_malloc_r+0x22>
 8005886:	230c      	movs	r3, #12
 8005888:	6033      	str	r3, [r6, #0]
 800588a:	2000      	movs	r0, #0
 800588c:	bd70      	pop	{r4, r5, r6, pc}
 800588e:	f000 f87d 	bl	800598c <__malloc_lock>
 8005892:	4a21      	ldr	r2, [pc, #132]	; (8005918 <_malloc_r+0xac>)
 8005894:	6814      	ldr	r4, [r2, #0]
 8005896:	4621      	mov	r1, r4
 8005898:	b991      	cbnz	r1, 80058c0 <_malloc_r+0x54>
 800589a:	4c20      	ldr	r4, [pc, #128]	; (800591c <_malloc_r+0xb0>)
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	b91b      	cbnz	r3, 80058a8 <_malloc_r+0x3c>
 80058a0:	4630      	mov	r0, r6
 80058a2:	f000 f863 	bl	800596c <_sbrk_r>
 80058a6:	6020      	str	r0, [r4, #0]
 80058a8:	4629      	mov	r1, r5
 80058aa:	4630      	mov	r0, r6
 80058ac:	f000 f85e 	bl	800596c <_sbrk_r>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d124      	bne.n	80058fe <_malloc_r+0x92>
 80058b4:	230c      	movs	r3, #12
 80058b6:	6033      	str	r3, [r6, #0]
 80058b8:	4630      	mov	r0, r6
 80058ba:	f000 f868 	bl	800598e <__malloc_unlock>
 80058be:	e7e4      	b.n	800588a <_malloc_r+0x1e>
 80058c0:	680b      	ldr	r3, [r1, #0]
 80058c2:	1b5b      	subs	r3, r3, r5
 80058c4:	d418      	bmi.n	80058f8 <_malloc_r+0x8c>
 80058c6:	2b0b      	cmp	r3, #11
 80058c8:	d90f      	bls.n	80058ea <_malloc_r+0x7e>
 80058ca:	600b      	str	r3, [r1, #0]
 80058cc:	50cd      	str	r5, [r1, r3]
 80058ce:	18cc      	adds	r4, r1, r3
 80058d0:	4630      	mov	r0, r6
 80058d2:	f000 f85c 	bl	800598e <__malloc_unlock>
 80058d6:	f104 000b 	add.w	r0, r4, #11
 80058da:	1d23      	adds	r3, r4, #4
 80058dc:	f020 0007 	bic.w	r0, r0, #7
 80058e0:	1ac3      	subs	r3, r0, r3
 80058e2:	d0d3      	beq.n	800588c <_malloc_r+0x20>
 80058e4:	425a      	negs	r2, r3
 80058e6:	50e2      	str	r2, [r4, r3]
 80058e8:	e7d0      	b.n	800588c <_malloc_r+0x20>
 80058ea:	428c      	cmp	r4, r1
 80058ec:	684b      	ldr	r3, [r1, #4]
 80058ee:	bf16      	itet	ne
 80058f0:	6063      	strne	r3, [r4, #4]
 80058f2:	6013      	streq	r3, [r2, #0]
 80058f4:	460c      	movne	r4, r1
 80058f6:	e7eb      	b.n	80058d0 <_malloc_r+0x64>
 80058f8:	460c      	mov	r4, r1
 80058fa:	6849      	ldr	r1, [r1, #4]
 80058fc:	e7cc      	b.n	8005898 <_malloc_r+0x2c>
 80058fe:	1cc4      	adds	r4, r0, #3
 8005900:	f024 0403 	bic.w	r4, r4, #3
 8005904:	42a0      	cmp	r0, r4
 8005906:	d005      	beq.n	8005914 <_malloc_r+0xa8>
 8005908:	1a21      	subs	r1, r4, r0
 800590a:	4630      	mov	r0, r6
 800590c:	f000 f82e 	bl	800596c <_sbrk_r>
 8005910:	3001      	adds	r0, #1
 8005912:	d0cf      	beq.n	80058b4 <_malloc_r+0x48>
 8005914:	6025      	str	r5, [r4, #0]
 8005916:	e7db      	b.n	80058d0 <_malloc_r+0x64>
 8005918:	200004bc 	.word	0x200004bc
 800591c:	200004c0 	.word	0x200004c0

08005920 <_realloc_r>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	4607      	mov	r7, r0
 8005924:	4614      	mov	r4, r2
 8005926:	460e      	mov	r6, r1
 8005928:	b921      	cbnz	r1, 8005934 <_realloc_r+0x14>
 800592a:	4611      	mov	r1, r2
 800592c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005930:	f7ff bf9c 	b.w	800586c <_malloc_r>
 8005934:	b922      	cbnz	r2, 8005940 <_realloc_r+0x20>
 8005936:	f7ff ff4b 	bl	80057d0 <_free_r>
 800593a:	4625      	mov	r5, r4
 800593c:	4628      	mov	r0, r5
 800593e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005940:	f000 f826 	bl	8005990 <_malloc_usable_size_r>
 8005944:	42a0      	cmp	r0, r4
 8005946:	d20f      	bcs.n	8005968 <_realloc_r+0x48>
 8005948:	4621      	mov	r1, r4
 800594a:	4638      	mov	r0, r7
 800594c:	f7ff ff8e 	bl	800586c <_malloc_r>
 8005950:	4605      	mov	r5, r0
 8005952:	2800      	cmp	r0, #0
 8005954:	d0f2      	beq.n	800593c <_realloc_r+0x1c>
 8005956:	4631      	mov	r1, r6
 8005958:	4622      	mov	r2, r4
 800595a:	f7ff ff15 	bl	8005788 <memcpy>
 800595e:	4631      	mov	r1, r6
 8005960:	4638      	mov	r0, r7
 8005962:	f7ff ff35 	bl	80057d0 <_free_r>
 8005966:	e7e9      	b.n	800593c <_realloc_r+0x1c>
 8005968:	4635      	mov	r5, r6
 800596a:	e7e7      	b.n	800593c <_realloc_r+0x1c>

0800596c <_sbrk_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4c06      	ldr	r4, [pc, #24]	; (8005988 <_sbrk_r+0x1c>)
 8005970:	2300      	movs	r3, #0
 8005972:	4605      	mov	r5, r0
 8005974:	4608      	mov	r0, r1
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	f7fc f97c 	bl	8001c74 <_sbrk>
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	d102      	bne.n	8005986 <_sbrk_r+0x1a>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	b103      	cbz	r3, 8005986 <_sbrk_r+0x1a>
 8005984:	602b      	str	r3, [r5, #0]
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	200005f8 	.word	0x200005f8

0800598c <__malloc_lock>:
 800598c:	4770      	bx	lr

0800598e <__malloc_unlock>:
 800598e:	4770      	bx	lr

08005990 <_malloc_usable_size_r>:
 8005990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005994:	1f18      	subs	r0, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	bfbc      	itt	lt
 800599a:	580b      	ldrlt	r3, [r1, r0]
 800599c:	18c0      	addlt	r0, r0, r3
 800599e:	4770      	bx	lr

080059a0 <_init>:
 80059a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a2:	bf00      	nop
 80059a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a6:	bc08      	pop	{r3}
 80059a8:	469e      	mov	lr, r3
 80059aa:	4770      	bx	lr

080059ac <_fini>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	bf00      	nop
 80059b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b2:	bc08      	pop	{r3}
 80059b4:	469e      	mov	lr, r3
 80059b6:	4770      	bx	lr
